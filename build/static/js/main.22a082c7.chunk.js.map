{"version":3,"sources":["assets/Homepage.svg","assets/fonts/roboto-100.ttf","assets/fonts/roboto-v20-latin-300.woff","assets/fonts/roboto-v20-latin-300.woff2","assets/fonts/roboto-v20-latin-500.woff","assets/fonts/roboto-v20-latin-500.woff2","assets/fonts/roboto-v20-latin-700.woff","assets/fonts/roboto-v20-latin-700.woff2","assets/Logo.svg","assets/MetamaskLogo.png","assets/DownloadMetamask.png","assets/NoThumbnail.jpg","assets/NoVideo.png","theme.js","networks.js","contexts/Connect.js","queries/queries.js","types/models.js","contexts/AppState.js","contexts/BackendProvider.js","helpers/amara-helpers.js","types/actions.js","helpers/transaction-helpers.js","helpers/route-helpers.js","helpers/web3-helpers.js","helpers/data-transform-helpers.js","hooks/useRequests.js","helpers/general-helpers.js","amara-api/client/index.js","amara-api/api-helper.js","amara-api/Teams.js","amara-api/index.js","amara-api/Users.js","amara-api/Videos.js","amara-api/Ratings.js","hooks/useUserLogicFCFS.js","hooks/useTransaction.js","hooks/useActions.js","components/Logo.js","wallet-providers.js","hooks/useEagerConnect.js","hooks/useInactiveListener.js","components/Modals/ProvidersModal.js","components/Identicon.js","components/AccountModule/IdentityBadge.js","components/Modals/MessageModal.js","components/AccountModule/AccountModule.js","components/NavBar.js","components/Footer.js","components/ErrorPanels/ErrorPanel.js","components/ErrorPanels/NoMetamaskDetected.js","components/MainView.js","components/Banner.js","components/Cards/TaskCard/Thumbnail/VideoTag.js","language-codes.js","components/Cards/TaskCard/Thumbnail/Thumbnail.js","components/Cards/TaskCard/Details.js","hooks/useAnimationFrame.js","helpers/date-helpers.js","helpers/css-helpers.js","components/Cards/TaskCard/Timer.js","components/Buttons/ActionButton.js","components/Cards/TaskCard/TaskCard.js","components/TasksSection/FCFSTasksGroup.js","components/TasksSection/RRTasksGroup.js","components/TaskSection.js","components/Modals/TransactionModal.js","components/ErrorPanels/NoValidUserEntered.js","pages/HomeFCFS.js","types/taskStatuses.js","hooks/useUserLogicRR.js","hooks/useActionsRR.js","pages/HomeRR.js","hooks/useActionsRRCal.js","components/Calendar.js","pages/HomeRRCal.js","components/Select.js","components/Tables/TasksTable.js","components/Tables/UsersTable.js","components/Tables/TxsTable.js","mock-data.js","hooks/useBulkTransactions.js","hooks/useAdminActions.js","pages/AdminFCFS.js","components/Tables/JobsTable.js","components/Tables/TasksTableRR.js","types/taskStatusesRR.js","hooks/useManager.js","hooks/useQueuedTransactions.js","types/events.js","hooks/useAdminActionsRR.js","pages/AdminRR.js","components/ConfigView.js","pages/Config.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","roboto100","fontFamily","fontStyle","fontWeight","src","roboto100ttf","roboto300","roboto300Woff2","roboto300Woff","roboto500","roboto500Woff2","roboto500Woff","roboto700","roboto700Woff2","roboto700Woff","white","grey","purple","green","theme","createMuiTheme","palette","secondary","main","text","dark","light","chips","low","medium","high","background","primary","translateButton","info","success","typography","spacing","mixins","toolbar","minHeight","overrides","MuiCssBaseline","body","backgroundColor","overflowX","RPC_URLS","process","networks","1","name","chain","network","rpc","faucets","nativeCurrency","symbol","decimals","infoURL","shortName","chainId","networkId","slip44","ens","registry","4","5","getDefaultChainId","instance","getNetwork","ConnectProvider","networkOnlyConnector","children","InjectedConnector","Connectors","NetworkOnlyConnector","web3React","useWeb3React","useEffect","a","connector","providerURL","supportedChainIds","activate","connect","deactivate","FCFS_USERS","gql","FCFS_USER","FCFS_TASKS","FCFS_TASKS_AVAILABLE","FCFS_USER_TASKS_ACCEPTED","RR_USERS","RR_USER","RR_CAL_USER","RR_TASKS","RR_USER_TASKS_ASSIGNED","RR_USER_TASKS_ACCEPTED","models","displayName","description","contractAddress","contractAbi","FCFS_CONTRACT","abi","endpoint","requests","users","user","tasks","tasksAvailable","tasksAccepted","RR_CONTRACT_ABI","tasksAssigned","RR_CAL_CONTRACT_ABI","AppStateContext","createContext","AppStateProvider","useState","appName","web3","library","modelName","setModelName","modelDisplayName","setModelDisplayName","setContractAddress","contractABI","setContractABI","setEndpoint","userId","setUserId","modelContractInstance","setModelContractInstance","eth","Contract","getContractInstance","console","log","setModel","model","find","m","setUser","value","useMemo","Provider","useAppState","context","useContext","Error","BackendProvider","props","ApolloProvider","client","httpLink","createHttpLink","uri","ApolloClient","link","cache","InMemoryCache","createClient","getEditorLink","task","video","language","team","Actions","Restart","Symbol","RegisterUser","CreateTask","AcceptTask","RejectTask","SetUserCalendarRanges","stringMapping","convertToString","getTxStatus","type","getTxAction","action","getResourceFromPathname","pathname","resourceName","resources","split","filter","p","length","forEach","includes","generateUrl","url","params","generatedUrl","key","toBytes32","totalLength","hexText","toHex","paddingSize","Array","fill","join","transformTaskData","endDate","timestamp","Date","mergeTaskData","contractTasks","amaraTasks","map","cT","amaraTask","aT","job_id","id","contractData","useUsersQuery","first","skip","useQuery","variables","data","error","loading","refetch","useUserQuery","undefined","useTasksQueryPolling","pollInterval","fetchPolicy","stopPolling","useTasksAcceptedByUserQueryPolling","t","buildMapById","elements","idField","reduce","currElement","set","Map","baseURL","axios","create","headers","flatQueryParams","queryParams","Object","keys","prevQueries","queryKey","index","createBasicCRUDEndpoints","endpoints","query","formattedQuery","get","modifiedEntity","post","entity","AVAILALBLE_SUBTITLE_REQUESTS_QUERY","work_status","Teams","getTeamTasks","getTeamSubtitleRequest","subReqId","path","getAvailableTeamSubtitleRequests","updateSubtitleRequest","jobId","subtitler","put","Api","teams","getDemoUsers","getUserTeams","username","videos","ratings","setApiKeyHeader","apiKey","defaults","getApiKeyHeader","getTasks","teamName","AmaraApi","tasksRequests","Promise","all","responses","transformedTasks","useUserLogicFCFS","contractUser","useAvailableTasksQueryPolling","stopTasksPolling","contractAcceptedTasks","setTasks","acceptedTask","setAcceptedTask","videosRegistry","setVideosRegistry","isMounted","getOne","amaraUserRes","amaraUser","buildUser","getAll","objects","videosMap","getTeamVideos","then","mergedTasks","PRIVATE_KEY","useTransaction","txHash","setTxHash","receipt","setReceipt","setLoading","setError","tx","accounts","signTransaction","rawTransaction","sendSignedTransaction","on","hash","r","err","sendTransaction","useActions","onReportStatus","account","processTransaction","txReceipt","txLoading","txError","currentAction","setCurrentAction","acceptTask","useCallback","taskId","hexUserId","hexTaskId","acceptTaskTxParams","from","to","methods","encodeABI","gasPrice","useStyles","makeStyles","logoWrapper","position","margin","cursor","userSelect","subtitle","top","left","color","Logo","className","AmaraLogo","Typography","variant","injected","connectorsByName","Injected","logo","MetamaskLogo","useEagerConnect","active","tried","setTried","isAuthorized","catch","useInactiveListener","suppress","ethereum","window","handleChainChanged","handleAccountsChanged","removeListener","root","flexGrow","providerItem","activating","padding","textAlign","opacity","transition","dialogContent","display","alignContent","justifyContent","border","providerTitle","providerLogo","width","closeButton","right","activatingProgress","Transition","React","forwardRef","ref","Slide","direction","timeout","ProviderItem","onSelect","Grid","item","onClick","ProvidersModal","open","onClose","Dialog","TransitionComponent","keepMounted","aria-labelledby","aria-describedby","DialogTitle","IconButton","aria-label","DialogContent","container","alignItems","CircularProgress","PX_RATIO","devicePixelRatio","verticalAlign","overflow","mainSize","height","borderRadius","radius","blockiesOpacity","soften","blockiesScaling","scalingSize","Identicon","address","scale","blockiesScale","seed","toLowerCase","size","wrapper","addressWrapper","maxWidth","textOverflow","whiteSpace","letterSpacing","marginBottom","fontSize","lineHeight","rightSection","flexDirection","maxHeight","paddingLeft","connectionMessage","marginRight","IdentityBadge","word","icon","shortAddress","charsLength","prefixLength","slice","shortenAddress","css","charAt","toUpperCase","titleWrapper","modalTitle","marginLeft","MessageModal","title","message","showIcon","messageIcon","messageType","getIconType","DialogContentText","disconnectButton","AccountModule","activatingConnector","setActivatingConnector","openModal","setOpenModal","networkName","isNaN","triedEager","Fragment","Button","currentConnector","NoEthereumProviderError","msg","displayComponent","UnsupportedChainIdError","UserRejectedRequestErrorInjected","transformError","navBar","NavBar","buttonWrapper","AppBar","elevation","Container","flexRow","flexRowPT","paddingTop","flexCol","footer","zIndex","footerContent","logos","textDecoration","githubIcon","Footer","clsx","Box","Link","href","target","ErrorPanel","Fade","in","Paper","style","imageWrapper","downloadImage","objectFit","NoMetamaskDetected","mt","ml","rel","justify","DownloadMetamask","alt","marginTop","MainView","hasMetamask","content","textImgWrapper","bottom","h100","Banner","img","cta","classes","transitionDelay","lg","xl","mb","videoTag","VideoTag","label","boxProps","typographyEl","useRef","ellipsisActivated","setEllipsisActivated","element","current","offsetHeight","scrollHeight","offsetWidth","scrollWidth","innerComponent","noWrap","Tooltip","arrow","af","ar","az","be","bg","ca","cs","da","de","div","el","en","es","et","eu","fa","fi","fo","fr","gl","gu","he","hi","hr","hu","hy","is","it","ja","ka","kk","kn","ko","kok","ky","lt","lv","mk","mn","mr","ms","nl","no","pa","pl","pt","ro","ru","sa","sk","sl","sq","sv","sw","syr","ta","te","th","tr","tt","uk","ur","uz","vi","media","playButton","A700","transform","Thumbnail","targetLanguage","onClickHandler","thumbnail","duration","allUrls","all_urls","minutes","Math","floor","seconds","timeDuration","languageCodes","CardMedia","image","NoThumbnail","NoVideo","dayjs","extend","relativeTime","detailText","detailWrapper","WebkitLineClamp","WebkitBoxOrient","Detail","gutterBottom","Details","due_date","languages","audioLanguageCode","primary_audio_language_code","subLanguages","published","replace","formattedSubLanguages","dueDate","isValid","format","useAnimationFrame","interval","callback","requestRef","previousTimeRef","accumulatedTime","stopSignalRef","animate","time","deltaTime","requestAnimationFrame","cancelAnimation","cancelAnimationFrame","UNITS","DEFAULT_UNITS","lightenDarkenColor","col","amt","usePound","num","parseInt","b","g","toString","timer","WebkitTouchCallout","WebkitUserSelect","MozUserSelect","msUserSelect","clockIconWrapper","timeTextWrapper","timeText","timeUnit","minWidth","separator","formats","yMdhms","yMdhm","yMdh","yMd","yM","Mdhms","Mdhm","Mdh","Md","dhms","dhm","hms","hm","s","unitNames","y","M","d","h","getTime","start","end","showEmpty","maxUnits","date1","date2","totalInSeconds","diff","options","units","keepLeadingZeros","getRightMostUnitIndex","reverse","unit","result","unitName","remainingUnits","remaining","subtract","seenNonZero","values","every","val","difference","years","months","days","hours","Timer","date","onTimeOut","isMountedRef","useTheme","computedFormat","getFormat","setTime","lastUnitIndex","lastIndex","updateTime","dateTime","toISOString","v","isLast","isSeconds","isTimeUnit","String","padStart","component","actionButton","hoverColor","ActionButton","fullWidth","disabled","chip","priorityColor","cardContent","TaskCard","actionButtons","onTaskTimeout","priority","reallocationTime","getPriority","showTimer","now","toLocaleTimeString","Card","Chip","CardContent","arr","actionHandler","buttonProps","FCFSTasksGroup","videoRegistry","totalPages","onChangePage","Pagination","count","shape","onChange","e","RRTasksGroup","TaskSection","taskActionButtons","anchorRef","selectedPage","setSelectedPage","currentTasks","init","computePageTasks","ceil","handleChangePage","scrollIntoView","inline","behavior","totalTasks","tasksPerPage","operationTitle","opacityWrapper","opacityBackground","TransactionModal","modalContent","createTransactionHandler","DialogActions","NoValidUserEntered","taskSection","toastMessage","iconLoadingState","disabledModal","MODAL_ACTIONS","SlideUp","SlideLeft","HomeFCFS","useLocation","modelNameParam","loadingHandlerExecutedRef","openMessageModal","setOpenMessageModal","modal","setModal","openTxModal","setOpenTxModal","activatingTxModal","setActivatingTxModal","openLoadingSnackbar","setOpenLoadingSnackbar","openTxSnackbar","setOpenTxSnackbar","txSnackbar","setTxSnackbar","processingTx","setProcessingTx","setTimeout","actions","snackbar","txStatus","handleCreateTransaction","actionStr","availableTaskActionButtons","disabledTaskActionButtons","taskButton","assignedTaskActionButtons","Homepage","Snackbar","anchorOrigin","vertical","horizontal","transitionDuration","autoHideDuration","event","reason","Alert","severity","thickness","onCreateTransaction","TaskStatuses","NonExistent","Available","Accepted","Completed","useUserLogicRR","useAssignedTasksQueryPolling","gas","rejectTask","rejectTaskTxParams","rejectButton","HomeRR","nTasksToDisplay","setNTasksToDisplay","n","timerId","clearTimeout","unshift","emptyText","_n","setUserCalendarRanges","calendarRangesStart","calendarRangesEnd","setCalendarRangesTxParams","modalBox","boxShadow","header1","textTransform","mainHeader","paragraph1","note","submitButton","Calendar","calendarRanges","onSubmit","events","setEvents","currentEvents","startRange","i","startRangeDate","endRangeDate","newEventId","updateEvents","eventStart","eventEnd","findIndex","splice","Modal","sm","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","initialView","headerToolbar","startAccessor","endAccessor","select","startStr","endStr","view","calendar","unselect","eventDrop","_instance","range","getTimezoneOffset","oldEvent","_def","publicId","eventColor","eventBorderColor","aspectRatio","selectable","editable","selectMirror","businessHours","startTime","endTime","daysOfWeek","nowIndicator","allDaySlot","scrollTime","sort","r1","r2","push","HomeRRCal","showCalendar","setShowCalendar","Select","labelTitle","other","required","FormControl","InputLabel","MenuItem","opt","table","StyledTableCell","withStyles","head","common","TableCell","StyledTableRow","hover","TableRow","TasksTable","TableContainer","Table","stickyHeader","TableHead","align","TableBody","componenet","scope","colSpan","status","lastUpdateCell","UsersTable","hasTask","TxsTable","txs","transactionHash","blockNumber","mockTasks","video_type","created","project","metadata","code","dir","subtitles_uri","resource_uri","activity_uri","urls_uri","subtitle_languages_uri","source_team","evaluation_teams","reviewer","approver","subtitles_due_date","review_due_date","approval_due_date","completed","work_completed","video_uri","actions_uri","useBulkTransactions","txsHash","setTxsHash","receipts","setReceipts","setWeb3","usePrivateKey","setUsePrivateKey","txsToProcess","setTxsToProcess","currentTxIndex","setCurrentTxIndex","preparingNextTx","setPreparingNextTx","lastTxIndex","setLastTxIndex","currentTxHash","currentReceipt","currentLoading","currentError","inputTxs","useAdminActions","processBulkTransactions","restartContractTxParams","bulkUserRegisterTxParams","mockUsers","bulkCreateTaskTxParams","appBar","drawer","transitions","easing","sharp","leavingScreen","appBarShift","enteringScreen","menuButton","hide","flexShrink","drawerOpen","drawerClose","listItem","AdminFCFS","refecthUsers","restartPrototype","restartPrototypeData","setOpen","openSnackbar","setOpenSnackbar","snackbarMsg","setSnackbarMsg","modelsOptions","Toolbar","edge","Drawer","paper","Divider","List","ListItem","button","ListItemIcon","ListItemText","u","JobsTable","jobs","job","Assigned","Rejected","useManager","GAS_LIMIT","GAS_PRICE","running","setRunning","providers","setProviders","usePrivateKeys","setUsePrivateKeys","inputTx","useQueuedTransactions","queueTransaction","stopQueue","txsRecord","scheduledJobs","handledEvents","createJob","txParams","taskAllocatedHandler","call","endDateMillis","has","delete","reallocateTaskTxParams","scheduledJob","taskAcceptedHandler","taskRejectedHandler","taskDeletedHandler","setUpEventListeners","hexToUtf8","returnValues","manageTasks","filteredTasks","stop","clearSubscriptions","bulkTxsRecord","managerTxsRecord","startManager","stopManager","managerRunning","restartPrototypeLoading","AdminRR","snackbarSeverity","setSnackbarSeverity","snackbarAutoHide","setSnackbarAutoHide","firstRun","refetchUsers","notifyWithSeverity","autoHide","handleSnackbarClose","notify","assignee","available","onExited","mainContainer","ConfigView","Config","history","useHistory","selectedUser","setSelectedUser","usersOptions","setUsersOptions","selectedModel","setSelectedModel","location","origin","navigator","clipboard","writeText","Routes","homeComponent","adminComponent","exact","getLibrary","provider","Web3","App","fallback","ThemeProvider","CssBaseline","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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,YAAa,GACboiB,SAAU,GACVD,UACI,sIACJqX,QAAS,uBACTr1B,KAAM,mBACNs1B,QAAS,KACTnX,SAAU,CACN,6GAEJoX,SAAU,GACV9V,UAAW,CACP,CACI+V,KAAM,KACN78B,KAAM,SACNknB,WAAW,EACX4V,IAAK,MACLC,cACI,4EACJC,aACI,mEAER,CACIH,KAAM,KACN78B,KAAM,UACNknB,WAAW,EACX4V,IAAK,MACLC,cACI,4EACJC,aACI,mEAER,CACIH,KAAM,KACN78B,KAAM,UACNknB,WAAW,EACX4V,IAAK,MACLC,cACI,4EACJC,aACI,mEAER,CACIH,KAAM,KACN78B,KAAM,SACNknB,WAAW,EACX4V,IAAK,MACLC,cACI,4EACJC,aACI,mEAER,CACIH,KAAM,QACN78B,KAAM,wBACNknB,WAAW,EACX4V,IAAK,MACLC,cACI,+EACJC,aACI,uEAGZC,aACI,8DACJC,SAAU,0DACVC,uBACI,+DACJH,aAAc,sDAElB,CACIzyB,GAAI,eACJkyB,WAAY,IACZzV,4BAA6B,KAC7BjM,MAAO,kBACP7X,YAAa,GACboiB,SAAU,EACVD,UACI,sIACJqX,QAAS,uBACTr1B,KAAM,mBACNs1B,QAAS,KACTnX,SAAU,CACN,6GAEJoX,SAAU,GACV9V,UAAW,CACP,CACI+V,KAAM,KACN78B,KAAM,SACNknB,WAAW,EACX4V,IAAK,MACLC,cACI,4EACJC,aACI,mEAER,CACIH,KAAM,KACN78B,KAAM,UACNknB,WAAW,EACX4V,IAAK,MACLC,cACI,4EACJC,aACI,mEAER,CACIH,KAAM,KACN78B,KAAM,UACNknB,WAAW,EACX4V,IAAK,MACLC,cACI,4EACJC,aACI,mEAER,CACIH,KAAM,KACN78B,KAAM,SACNknB,WAAW,EACX4V,IAAK,MACLC,cACI,4EACJC,aACI,mEAER,CACIH,KAAM,QACN78B,KAAM,wBACNknB,WAAW,EACX4V,IAAK,MACLC,cACI,+EACJC,aACI,uEAGZC,aACI,8DACJC,SAAU,0DACVC,uBACI,+DACJH,aAAc,uDAIkBnxB,QAAO,SAAC/K,EAAU2sB,GAEtD,OADA3sB,EAASiL,IAAI0hB,EAAEljB,GAAIkjB,GACZ3sB,IACR,IAAIkL,KAEkB,CACrB,CACI1B,OAAQ,UACRnD,MAAO,eACPC,SAAU,KACVg2B,YAAa,mBACb/1B,KAAM,mBACNg2B,iBAAkB,GAClBrB,OAAQ,cACR3uB,YAAa,kBACbS,UAAW,KACXwvB,SAAU,KACVC,SAAU,KACVb,QAAS,uBACTc,mBAAoB,KACpBC,gBAAiB,KACjBC,kBAAmB,KACnB7W,SAAU,KACV8W,UAAW,KACXC,eAAgB,KAChBC,UAAW,qDACXd,cACI,4EACJe,YACI,oFACJd,aACI,mFAER,CACI1yB,OAAQ,UACRnD,MAAO,eACPC,SAAU,KACVg2B,YAAa,mBACb/1B,KAAM,mBACNg2B,iBAAkB,GAClBrB,OAAQ,cACR3uB,YAAa,kBACbS,UAAW,KACXwvB,SAAU,KACVC,SAAU,KACVb,QAAS,uBACTc,mBAAoB,KACpBC,gBAAiB,KACjBC,kBAAmB,KACnB7W,SAAU,KACV8W,UAAW,KACXC,eAAgB,KAChBC,UAAW,qDACXd,cACI,4EACJe,YACI,oFACJd,aACI,mFAER,CACI1yB,OAAQ,UACRnD,MAAO,eACPC,SAAU,KACVg2B,YAAa,mBACb/1B,KAAM,mBACNg2B,iBAAkB,GAClBrB,OAAQ,cACR3uB,YAAa,kBACbS,UAAW,KACXwvB,SAAU,KACVC,SAAU,KACVb,QAAS,uBACTc,mBAAoB,KACpBC,gBAAiB,KACjBC,kBAAmB,KACnB7W,SAAU,KACV8W,UAAW,KACXC,eAAgB,KAChBC,UAAW,qDACXd,cACI,4EACJe,YACI,oFACJd,aACI,mFAER,CACI1yB,OAAQ,UACRnD,MAAO,eACPC,SAAU,KACVg2B,YAAa,mBACb/1B,KAAM,mBACNg2B,iBAAkB,GAClBrB,OAAQ,cACR3uB,YAAa,kBACbS,UAAW,KACXwvB,SAAU,KACVC,SAAU,KACVb,QAAS,uBACTc,mBAAoB,KACpBC,gBAAiB,KACjBC,kBAAmB,KACnB7W,SAAU,KACV8W,UAAW,KACXC,eAAgB,KAChBC,UAAW,qDACXd,cACI,4EACJe,YACI,oFACJd,aACI,qFC/QG,SAASe,KAAuB,IAAD,EACZ35B,mBAAS,IADG,oBACnC45B,EADmC,KAC1BC,EAD0B,OAEV75B,mBAAS,IAFC,oBAEnC85B,EAFmC,KAEzBC,EAFyB,OAGZ/5B,qBAHY,oBAGnC4G,EAHmC,KAG1B8F,EAH0B,OAIhB1M,mBAAS,IAJO,oBAInC2G,EAJmC,KAI5BgG,EAJ4B,OAMlB3M,qBANkB,oBAMnCE,EANmC,KAM7B85B,EAN6B,OAOAh6B,qBAPA,oBAOnCi6B,EAPmC,KAOpBC,EAPoB,OAQFl6B,qBARE,oBAQnCm6B,EARmC,KAQrBC,EARqB,OASEp6B,qBATF,oBASnCq6B,EATmC,KASnBC,EATmB,OAUIt6B,oBAAS,GAVb,oBAUnCu6B,EAVmC,KAUlBC,EAVkB,OAWJx6B,qBAXI,oBAWnCy6B,EAXmC,KAWtBC,EAXsB,OAmBtCruB,KAnBsC,oBAatCoB,EAbsC,gBAelC/G,KAAgBi0B,EAfkB,EAe1BruB,OAAgCsuB,EAfN,EAeHpuB,QACtBquB,EAhByB,EAgBlCj0B,QACOk0B,EAjB2B,EAiBlCn0B,MAiER,OA1CAnJ,qBAAU,WACN,OAAIs9B,GACA35B,QAAQC,IAAI,gCACZD,QAAQC,IAAI05B,QACZnuB,GAAS,SAAAhG,GAAK,6BAAQA,GAAR,CAAem0B,QAG7BD,GAAkBF,GAIlBd,GAAW,SAAAD,GAAO,6BAAQA,GAAR,CAAiBe,YACnCH,GAAmB,KAGnBI,GAAmBC,GAAmBN,OAA1C,GAOIR,GAAY,SAAAD,GAAQ,6BAAQA,GAAR,CAAkBc,OACtCjuB,GAAS,SAAAhG,GAAK,6BAAQA,GAAR,CAAe,UAC7B6zB,GAAmB,QAEfH,EAAiB,EAAII,GAErBhtB,EACIvN,EACAi6B,EAAaE,EAAiB,GAC9BJ,GAEJK,GAAkB,SAAA/xB,GAAK,OAAIA,EAAQ,MAC5B8xB,EAAiB,GAAKI,GAE7B/tB,GAAW,OAIpB,CAACiuB,EAAeC,EAAgBC,EAAgBC,IAE5C,CA7DyB,SAAC56B,EAAM66B,GAAqC,IAA3Bd,EAA0B,wDAGvED,EAAQ95B,GACRg6B,EAAiBD,GAGjBvtB,GAAW,GAEX4tB,EAAkB,GAElBI,EAAeK,EAASx2B,QAExB61B,EAAgBW,GAGhBttB,EAAmBvN,EAAM66B,EAAS,GAAId,IA+CtC,CAAEvzB,KAAM,CAAEkzB,UAASE,YAAYlzB,UAASD,UC7EhD,I,MAsEeq0B,GAjES,WACpB,IAAMxtB,EANS/R,6CAOEyE,EAAS3C,cAAlB4C,QAFkB,EAGe0B,KAAjC9C,EAHkB,EAGlBA,gBAAiB0B,EAHC,EAGDA,YAHC,EAOtBk5B,KAPsB,oBAKtBsB,EALsB,YAMpBv0B,EANoB,EAMpBA,KAAME,EANc,EAMdA,QAASD,EANK,EAMLA,MAGfzF,EAAsB8M,uBAAY,SAAC9N,EAAMhB,GAE3C,GAAIgB,EACA,OAAO,IAAIA,EAAKc,IAAIC,SAAS/B,KAElC,IAgDH,MAAO,CA9CkB8O,uBAAY,WACjC,IAAMlN,EAAwBI,EAAoBhB,EAAMO,GAElDy6B,EAA0B,CAC5B7sB,KAAMb,EACNc,GAAIvP,EACJ2H,KAAM5F,EAAsByN,QAAtB,UAA2CC,YACjDqiB,IA3BM,KA4BNpiB,SA3BM,KA8BJ0sB,EAA2BC,GAAUt1B,KAAI,SAAAxG,GAC3C,MAAO,CACH+O,KAAMb,EACNc,GAAIvP,EACJ2H,KAAM5F,EAAsByN,QAAtB,aACFxJ,GAAUzF,IACZkP,YACFqiB,IAtCE,KAuCFpiB,SAtCE,QA0CJ4sB,EAAyBjD,GAAUtyB,KAAI,SAAAhD,GACzC,MAAO,CACHuL,KAAMb,EACNc,GAAIvP,EACJ2H,KAAM5F,EAAsByN,QAAtB,WACFxJ,GAAUjC,EAAKoD,SACjBsI,YACFqiB,IAlDE,KAmDFpiB,SAlDE,QAsDVwsB,EACI/6B,EADmB,CAGfg7B,GAHe,oBAIZC,GAJY,aAKZE,KAEP,KAEL,CAACn7B,IAEsB,CAAEwG,OAAME,UAASD,WCxCzC+H,GAAYC,cAAW,SAAA9U,GAAK,MAAK,CACnC+W,KAAM,CACFS,QAAS,QAEbiqB,OAAQ,CACJviB,OAAQlf,EAAMkf,OAAOwiB,OAAS,EAC9BzsB,OAAQjV,EAAMkB,QAAQ,IAAK,GAC3BoW,WAAYtX,EAAM2hC,YAAYzzB,OAAO,CAAC,QAAS,UAAW,CACtD0zB,OAAQ5hC,EAAM2hC,YAAYC,OAAOC,MACjCxa,SAAUrnB,EAAM2hC,YAAYta,SAASya,iBAG7CC,YAAa,CACTnlB,WAfY,IAgBZ9E,MAAM,eAAD,OAhBO,IAgBP,OACLR,WAAYtX,EAAM2hC,YAAYzzB,OAAO,CAAC,QAAS,UAAW,CACtD0zB,OAAQ5hC,EAAM2hC,YAAYC,OAAOC,MACjCxa,SAAUrnB,EAAM2hC,YAAYta,SAAS2a,kBAG7CC,WAAY,CACRnmB,YAAa,IAEjBomB,KAAM,CACF1qB,QAAS,QAEbkqB,OAAQ,CACJ5pB,MA7BY,IA8BZqqB,WAAY,EACZ/mB,WAAY,UAEhBgnB,WAAY,CACRtqB,MAlCY,IAmCZR,WAAYtX,EAAM2hC,YAAYzzB,OAAO,QAAS,CAC1C0zB,OAAQ5hC,EAAM2hC,YAAYC,OAAOC,MACjCxa,SAAUrnB,EAAM2hC,YAAYta,SAAS2a,iBAEzC/sB,OAAQjV,EAAMkB,QAAQ,IAAK,IAE/BmhC,YAAa,CACT/qB,WAAYtX,EAAM2hC,YAAYzzB,OAAO,QAAS,CAC1C0zB,OAAQ5hC,EAAM2hC,YAAYC,OAAOC,MACjCxa,SAAUrnB,EAAM2hC,YAAYta,SAASya,gBAEzCpgC,UAAW,SACXoW,MAAO9X,EAAMkB,QAAQ,KAIrB+T,OAAQjV,EAAMkB,QAAQ,IAAK,GAC3B,6BAA8B,CAC1B4a,YAAa9b,EAAMkB,QAAQ,KAGnCE,QAAQ,cACJoW,QAAS,OACTmC,WAAY,SACZjC,eAAgB,WAChBP,QAASnX,EAAMkB,QAAQ,EAAG,IAEvBlB,EAAMmB,OAAOC,SAEpBkhC,SAAU,CACN,+BAAgC,CAC5BxmB,YAAa9b,EAAMkB,QAAQ,GAC3BsqB,SAAUxrB,EAAMkB,QAAQ,OAGhC6f,QAAS,CACL/J,SAAU,EACVG,QAASnX,EAAMkB,QAAQ,QAIzB2yB,GAAY,SAAAxrB,GAAK,OAAI,kBAACiQ,GAAA,EAAD,iBAAWjQ,EAAX,CAAkBkQ,UAAU,WA6LxCgqB,GA3LG,WAAO,IAAD,IACdjhB,EAAUzM,KACV7U,EAAQ+uB,eAFM,EAQhB/mB,KAJAzB,EAJgB,EAIhBA,UACAE,EALgB,EAKhBA,iBACAe,EANgB,EAMhBA,SAGI9B,GATY,EAOhBuB,sBAEckG,KAAVzH,OATY,EAUqB8G,KAAjChH,EAVY,EAUZA,MAAgBg9B,EAVJ,EAULx1B,QAVK,EAkBhBm0B,KAlBgB,oBAYhBsB,EAZgB,YAcNC,EAdM,EAcZ71B,KAdY,KAeZE,QAfY,EAgBZD,MAGgB3G,oBAAS,IAnBb,oBAmBb4S,EAnBa,KAmBP4pB,EAnBO,OAoBoBx8B,oBAAS,GApB7B,oBAoBby8B,EApBa,KAoBCC,EApBD,OAqBkB18B,mBAAS,IArB3B,oBAqBb28B,EArBa,KAqBAC,EArBA,KAuBdC,EAAgBj+B,GAAOkH,KAAI,SAAAtE,GAAC,MAAK,CACnCE,MAAOF,EAAE5F,KACT8f,MAAOla,EAAE3C,gBAGbrB,qBAAU,WACN6+B,MACD,CAACE,IAuBJ,OACI,kBAAC,GAAD,CAAUjtB,UAAW6L,EAAQvK,MACzB,kBAAC2H,GAAA,EAAD,CACI1J,SAAS,QACTS,UAAW+J,aAAK8B,EAAQmgB,OAAT,gBACVngB,EAAQygB,YAAchpB,KAG3B,kBAACkqB,GAAA,EAAD,KACI,kBAAC1pB,GAAA,EAAD,CACIhE,MAAM,UACNiE,aAAW,cACXX,QAjCK,WACrB8pB,GAAQ,IAiCQO,KAAK,QACLztB,UAAW+J,aAAK8B,EAAQ2gB,WAAT,gBACV3gB,EAAQ4gB,KAAOnpB,KAGpB,kBAAC,KAAD,OAEJ,kBAACpD,GAAA,EAAD,CAAYC,QAAQ,KAAK8M,QAAM,GAA/B,0BAKR,kBAACygB,GAAA,EAAD,CACIvtB,QAAQ,YACRH,UAAW+J,aAAK8B,EAAQogB,QAAT,oBACVpgB,EAAQ8gB,WAAarpB,GADX,eAEVuI,EAAQ+gB,aAAetpB,GAFb,IAIfuI,QAAS,CACL8hB,MAAO5jB,cAAI,oBACN8B,EAAQ8gB,WAAarpB,GADf,eAENuI,EAAQ+gB,aAAetpB,GAFjB,MAMf,yBAAKtD,UAAW6L,EAAQlgB,SACpB,kBAACmY,GAAA,EAAD,CAAYV,QAxDF,WACtB8pB,GAAQ,KAwD6B,QAApB3iC,EAAMuY,UACH,kBAAC,KAAD,MAEA,kBAAC,KAAD,QAIZ,kBAAC8qB,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACI9tB,UAAW6L,EAAQghB,SACnBkB,QAAM,EACNv4B,IAAI,oBAEJ,kBAACw4B,GAAA,EAAD,CAAc5qB,QA5DH,WAC3BkqB,EAAe,gDACfF,GAAgB,GAChBJ,MA0DoB,kBAAC,KAAD,OAEJ,kBAACiB,GAAA,EAAD,CAAc7iC,QAAQ,yBAIlC,0BAAM4U,UAAW6L,EAAQP,SACrB,yBAAKtL,UAAW6L,EAAQlgB,UACxB,kBAACuX,GAAA,EAAD,CAAMe,WAAS,EAACxY,QAAS,GACrB,kBAACyX,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,GACX,kBAAC7L,GAAA,EAAD,CAAYC,QAAQ,MAAMnP,IAE9B,kBAACkS,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,GACX,kBAAC7I,GAAA,EAAD,CACIe,WAAS,EACT+G,QAAQ,WACR9G,WAAW,SACXzY,QAAS,GAET,kBAACyX,GAAA,EAAD,CAAMC,MAAI,GACN,kBAACjD,GAAA,EAAD,CAAYC,QAAQ,MAApB,kBAIJ,kBAAC+C,GAAA,EAAD,CAAMC,MAAI,GACN,kBAAC,GAAD,CACI7W,KAAK,QACL8f,MAAM,QACNha,MAAOtB,EACPgnB,QAASyV,EACTnR,SAAU,SAAAC,GAAC,OAAItqB,EAASsqB,EAAElS,OAAO/X,aAKjD,kBAAC8Q,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,GACX,kBAAC7L,GAAA,EAAD,CAAYC,QAAQ,MAApB,oBACA,kBAAC,GAAD,CACIpQ,MACIA,GAASE,EACHF,EAAMyG,KAAI,SAAA03B,GACN,IAAI16B,EAAOvD,EAAM8E,QACb,SAAAgD,GAAC,OAAIA,EAAEzG,SAAW48B,EAAEr3B,MACtB,GACF,MAAO,CACHA,GAAIq3B,EAAEr3B,GACN4xB,QAASyF,EAAEzF,QACX9pB,OAAQnL,EAAOA,EAAKqD,GAAK,SAGjC,QAIlB,kBAACqM,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,GACX,kBAAC7L,GAAA,EAAD,CAAYC,QAAQ,MAApB,SACA,kBAAC,GAAD,CAAYlQ,MAAOA,KAEvB,kBAACiT,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,IACX,kBAAC7L,GAAA,EAAD,CAAYC,QAAQ,MAApB,gBACA,kBAAC,GAAD,CAAUwoB,IAAKsE,EAAqBzC,cAIhD,kBAACpK,GAAA,EAAD,CACI9c,KAAM6pB,EACN9M,aAAc,CAAEC,SAAU,SAAUC,WAAY,SAChD9c,oBAAqB2a,GACrBoC,mBAAoB,IACpBC,iBAAkB,IAClBld,QA1IgB,SAACmd,EAAOC,GACjB,cAAXA,GAGJyM,GAAgB,IAuIR53B,IAAK,eAEL,kBAACorB,GAAA,EAAD,CAAOC,SAAU,QAASwM,M,+DCzRpCjuB,GAAYC,cAAW,SAAA9U,GAAK,MAAK,CACnC48B,MAAO,CACHpR,SAAU,KAEdT,MAAO,CACHxV,MAAOvV,EAAME,QAAQW,QAAQT,UAI/By8B,GAAkBC,cAAW,SAAA98B,GAAK,MAAK,CACzC+8B,KAAM,CACFt7B,gBAAiBzB,EAAME,QAAQC,UAAUG,KACzCiV,MAAOvV,EAAME,QAAQ88B,OAAOp9B,OAEhC4B,KAAM,CACF+Z,SAAU,OANMuhB,CAQpBG,MAEEC,GAAiBJ,cAAW,SAAA98B,GAAK,MAAK,CACxC+W,KAAM,CACF,qBAAsB,CAClBtV,gBAAiBzB,EAAME,QAAQgK,OAAOizB,WAH3BL,CAMnBM,MA0EWwG,GAxEG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACXviB,EAAUzM,KAEhB,OAAOgvB,EACH,kBAACvG,GAAA,EAAD,CAAgBxN,UAAW9P,MACvB,kBAACud,GAAA,EAAD,CAAOC,cAAY,EAAChkB,aAAW,cAC3B,kBAACikB,GAAA,EAAD,KACI,kBAACL,GAAA,EAAD,KACI,kBAAC,GAAD,CAAiBM,MAAM,UAAvB,YAGA,kBAAC,GAAD,CAAiBA,MAAM,UAAvB,WAGA,kBAAC,GAAD,CAAiBA,MAAM,UAAvB,UACA,kBAAC,GAAD,CAAiBA,MAAM,UAAvB,aAKR,kBAACC,GAAA,EAAD,KACa,MAARkG,EACG,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIjG,WAAW,KACXC,MAAM,MACNC,QAAQ,IACRJ,MAAM,QAJV,oBASHmG,EAAKn5B,OAYNm5B,EAAK53B,KAAI,SAAA63B,GAAG,OACR,kBAAC,GAAD,CAAgB74B,IAAK64B,EAAIx3B,IACrB,kBAAC,GAAD,CAAiBoxB,MAAM,UAClBoG,EAAIx3B,IAET,kBAAC,GAAD,CAAiBoxB,MAAM,UAClBoG,EAAI1vB,QAET,kBAAC,GAAD,CAAiBspB,MAAM,UAClBoG,EAAI/F,QAET,kBAAC,GAAD,CAAiBL,MAAM,UACnB,kBAAC,GAAD,CACI1Q,IAAK,IAAInhB,KAAKi4B,EAAIn4B,SAClB8J,UAAW6L,EAAQyJ,aAzBnC,kBAAC,GAAD,KACI,kBAAC,GAAD,CACI6S,WAAW,KACXC,MAAM,MACNC,QAAQ,IACRJ,MAAM,UAJV,eAkCpB,sCC/FF7oB,GAAYC,aAAW,CACzB8nB,MAAO,CACHpR,SAAU,KAEdwS,eAAgB,CACZzoB,MAAO,UACP9T,gBAAiB,UAInBo7B,GAAkBC,cAAW,SAAA98B,GAAK,MAAK,CACzC+8B,KAAM,CACFt7B,gBAAiBzB,EAAME,QAAQC,UAAUG,KACzCiV,MAAOvV,EAAME,QAAQ88B,OAAOp9B,OAEhC4B,KAAM,CACF+Z,SAAU,OANMuhB,CAQpBG,MAEEC,GAAiBJ,cAAW,SAAA98B,GAAK,MAAK,CACxC+W,KAAM,CACF,qBAAsB,CAClBtV,gBAAiBzB,EAAME,QAAQgK,OAAOizB,WAH3BL,CAMnBM,MAsFWC,GApFI,SAAC,GAAe,IAAb33B,EAAY,EAAZA,MACZ4b,EAAUzM,KAEhB,OAAOnP,EACH,kBAAC43B,GAAA,EAAD,CAAgBxN,UAAW9P,MACvB,kBAACud,GAAA,EAAD,CAAOC,cAAY,EAAChkB,aAAW,eAC3B,kBAACikB,GAAA,EAAD,KACI,kBAACL,GAAA,EAAD,KACI,kBAAC,GAAD,CAAiBM,MAAM,UAAvB,WAGA,kBAAC,GAAD,CAAiBA,MAAM,UAAvB,UACA,kBAAC,GAAD,CAAiBA,MAAM,UAAvB,YAGA,kBAAC,GAAD,CAAiBA,MAAM,UAAvB,iBAKR,kBAACC,GAAA,EAAD,KACc,MAATj4B,EACG,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIk4B,WAAW,KACXC,MAAM,MACNC,QAAQ,IACRJ,MAAM,QAJV,oBASHh4B,EAAMgF,OAYPhF,EAAMuG,KAAI,SAAAhD,GAAI,OACV,kBAAC,GAAD,CAAgBgC,IAAKhC,EAAKqD,IACtB,kBAAC,GAAD,CACIwjB,UAAU,KACV+N,MAAM,MACNH,MAAM,UAELz0B,EAAKqD,IAEV,kBAAC,GAAD,CAAiBoxB,MAAM,UAClBz0B,EAAK80B,QAEV,kBAAC,GAAD,CAAiBL,MAAM,UAClBz0B,EAAK0C,QACA,IAAIE,KACA5C,EAAK0C,SACPolB,qBACF,MAEV,kBAAC,GAAD,CAAiB2M,MAAM,UAClBz0B,EAAKlC,OAASkC,EAAKlC,OAAS,UA/BzC,kBAAC,GAAD,KACI,kBAAC,GAAD,CACI62B,WAAW,KACXC,MAAM,MACNC,QAAQ,IACRJ,MAAM,UAJV,aAmCR,kBAAC,GAAD,CAAgBzyB,IAAI,oBAChB,kBAAC,GAAD,CAAiBwK,UAAW6L,EAAQ0c,gBAApC,sBACoB,IAAInyB,KAChBA,KAAKilB,OACPC,2BAOtB,sCCzHK0F,GAAe,CACxBC,YAAantB,OAAO,gBACpBotB,UAAWptB,OAAO,aAClBw6B,SAAUx6B,OAAO,YACjBqtB,SAAUrtB,OAAO,YACjBy6B,SAAUz6B,OAAO,YACjBstB,UAAWttB,OAAO,cAYhBM,IAAa,sBACd4sB,GAAaC,YAAc,eADb,gBAEdD,GAAaE,UAAY,aAFX,gBAGdF,GAAasN,SAAW,YAHV,gBAIdtN,GAAaG,SAAW,YAJV,gBAKdH,GAAauN,SAAW,YALV,gBAMdvN,GAAaI,UAAY,aANX,IAUH,sBACXJ,GAAaC,YAAc,GADhB,gBAEXD,GAAaE,UAAY,GAFd,gBAGXF,GAAasN,SAAW,GAHb,gBAIXtN,GAAaG,SAAW,GAJb,gBAKXH,GAAauN,SAAW,GALb,gBAMXvN,GAAaI,UAAY,GAOvB,SAAS/sB,GAAgBzH,GAC5B,OAAOwH,GAAcxH,GCxBzB,IA+We4hC,GA/WI,SAAC59B,EAAMsN,EAASuwB,EAAWC,EAAW58B,GAAS,IAAD,EACVS,KAA3C9C,EADqD,EACrDA,gBAAiB+B,EADoC,EACpCA,sBADoC,EAE/Bd,oBAAS,GAFsB,oBAEtDi+B,EAFsD,KAE7CC,EAF6C,OCflD,WAAkC,IAAD,EACdl+B,mBAAS,IADK,oBACrC45B,EADqC,KAC5BC,EAD4B,OAEZ75B,mBAAS,IAFG,oBAErC85B,EAFqC,KAE3BC,EAF2B,KAGtCnzB,EAAUiV,kBAAO,GAHqB,EAIlB7b,mBAAS,IAJS,oBAIrC2G,EAJqC,KAI9BgG,EAJ8B,OAMV3M,mBAAS,IANC,oBAMrCm+B,EANqC,KAM1BC,EAN0B,OAOAp+B,mBAAS,IAPT,oBAOrCq+B,EAPqC,KAOrBC,EAPqB,OAQJt+B,mBAAS,IARL,oBAQrCm6B,EARqC,KAQvBC,EARuB,KAStCC,EAAiBxe,iBAAO,MATc,EAUE7b,oBAAS,GAVX,oBAUrCu6B,EAVqC,KAUpBC,EAVoB,KAWtCC,EAAc5e,iBAAO,GAXiB,EAoBxCxP,KApBwC,oBAcxCoB,EAdwC,gBAgBpC/G,KAAgBi0B,EAhBoB,EAgB5BruB,OAAgCsuB,EAhBJ,EAgBLpuB,QACtBquB,EAjB2B,EAiBpCj0B,QACOk0B,EAlB6B,EAkBpCn0B,MA+GR,OA/DAnJ,qBAAU,WACN,OAAIs9B,GACA35B,QAAQC,IAAI05B,QACZnuB,GAAS,SAAAhG,GAAK,6BAAQA,GAAR,CAAem0B,QAG7BD,GAAkBF,GAWlBd,GAAW,SAAAD,GAAO,6BAAQA,GAAR,CAAiBe,YACnCH,GAAmB,KAGnBI,GAAmBC,GAAmBN,OAA1C,GAUIR,GAAY,SAAAD,GAAQ,6BAAQA,GAAR,CAAkBc,OACtCjuB,GAAS,SAAAhG,GAAK,6BAAQA,GAAR,CAAe,eAEzB0zB,EAAepe,QAAUwe,EAAYxe,SACrCue,GAAmB,GAKnB/sB,EACI0wB,EAAU9D,EAAepe,SACzBke,EAAaE,EAAepe,SAC5BoiB,EAAehE,EAAepe,UAElCoe,EAAepe,WACRoe,EAAepe,SAAWwe,EAAYxe,UAK7CrV,EAAQqV,SAAU,OAI3B,CACC0e,EACAC,EACAC,EACAC,EACAX,IAGG,CA3GkB,SAACj6B,EAAMq+B,GAAoC,IAA3BtE,EAA0B,wDAa1DrzB,EAAQqV,UACqB,MAA1Boe,EAAepe,UACfoe,EAAepe,QAAU,GAG7BrV,EAAQqV,SAAU,EAClBue,GAAmB,GAEnB/sB,EAAmBvN,EAAMq+B,EAAStE,GAClCI,EAAepe,WAGnBmiB,GAAa,SAAAD,GAAS,6BAAQA,GAAR,CAAmBj+B,OACzCk6B,GAAgB,SAAAW,GAAQ,6BAAQA,GAAR,CAAkBwD,OAC1CD,GAAkB,SAAAD,GAAc,6BAAQA,GAAR,CAAwBpE,OACxDQ,EAAYxe,WAGH,WACT4d,EAAW,IACXE,EAAY,IACZnzB,EAAQqV,SAAU,EAClBtP,EAAS,IACT0tB,EAAepe,QAAU,KACzBwe,EAAYxe,QAAU,EACtBmiB,EAAa,IACbhE,EAAgB,IAChBkE,EAAkB,IAClB9D,GAAmB,IAqEnB,CAAE9zB,KAAM,CAAEkzB,UAASE,YAAYlzB,QAASA,EAAQqV,QAAStV,UDlHZ63B,GAHY,oBAGtDC,EAHsD,KAGpCC,EAHoC,KAGzBC,EAHyB,KAIvDC,EAAgB/iB,iBAAO,IAAIjU,KAC3Bi3B,EAAgBhjB,iBAAO,IAAIjU,KAEjC,SAASk3B,EAAU5+B,EAAM6+B,EAAU9wB,EAAQoE,GAOvC,MAAO,CACHpE,SACAojB,QAAStC,WAAU,sBAAC,sBAAAtxB,EAAA,sDAChBghC,EAAiBv+B,EAAM6+B,GAAU,GADjB,2CAMjB1sB,GACH7M,QAASE,KAAKilB,MAAQtY,EACtBzF,GAAI,CACAlG,KAAM,CACFwG,KAAM,KACNV,QAAS,MAEb5F,SAAS,EACTD,MAAO,OA6BnB,IAAMq4B,EAAoB,uCAAG,WAAgB/wB,EAAQrN,GAAxB,uBAAAnD,EAAA,0DACrBwQ,IAAUrN,EADW,iCAGKE,EAAsByN,QAAtB,QACtBxJ,GAAUkJ,IACZgxB,OALmB,gBAGbz5B,EAHa,EAGbA,QAIF05B,EAA0B,IAAV15B,EAUtBpE,EAAI,GAAD,OExFe,gBFwFf,yBACmC6M,EADnC,iCACkErN,EADlE,sCACsG,IAAI8E,KACrGw5B,GACFtU,qBAHH,8BAG6C,IAAIllB,KAC5CA,KAAKilB,OACPC,sBACF,QAKAgU,EAAc3iB,QAAQkjB,IAAIlxB,IAC1B2wB,EAAc3iB,QAAQmjB,OAAOnxB,GAE3BoxB,EAAyB,CAC3BhxB,KAAMb,EACNc,GAAIvP,EACJ2H,KAAM5F,EAAsByN,QAAtB,eACFxJ,GAAUkJ,IACZO,YACFqiB,IAAKkN,EACLtvB,SAAUuvB,GAEdsB,EAAeR,EACX5+B,EACAm/B,EACApxB,EACAixB,EAAgBx5B,KAAKilB,OAEzBiU,EAAc3iB,QAAQtU,IAAI23B,EAAarxB,OAAQqxB,GA9C1B,4DAAH,wDAsD1B,SAASC,EAAoB3+B,EAAQqN,GAC7BA,GAAUrN,IAIVQ,EAAI,GAAD,OEjIc,eFiId,yBACkC6M,EADlC,6BAC6DrN,GAC5D,QAEAg+B,EAAc3iB,QAAQkjB,IAAIlxB,KAG1BqjB,aAAasN,EAAc3iB,QAAQrT,IAAIqF,GAAQojB,SAC/CuN,EAAc3iB,QAAQmjB,OAAOnxB,KAOzC,SAASuxB,EAAoB5+B,EAAQqN,GACjC,GAAIA,GAAUrN,EAAQ,CAIdg+B,EAAc3iB,QAAQkjB,IAAIlxB,KAE1BqjB,aAAasN,EAAc3iB,QAAQrT,IAAIqF,GAAQojB,SAC/CuN,EAAc3iB,QAAQmjB,OAAOnxB,IAMjC,IAAMoxB,EAAyB,CAC3BhxB,KAAMb,EACNc,GAAIvP,EACJ2H,KAAM5F,EAAsByN,QAAtB,eACFxJ,GAAUkJ,IACZO,YACFqiB,IAAKkN,EACLtvB,SAAUuvB,GAQdS,EAAiBv+B,EAAMm/B,GAAwB,IAMvD,SAASI,EAAT,GAAyC,IAAXxxB,EAAU,EAAVA,OACtBA,GAEI2wB,EAAc3iB,QAAQkjB,IAAIlxB,IAG1B2wB,EAAc3iB,QAAQmjB,OAAOnxB,GA9KoB,SA2L9CyxB,IA3L8C,2EA2L7D,sBAAAjiC,EAAA,sDAGIqD,EAAsB2xB,OAAtB,eAA8C,IAAI,SAAC9rB,EAAOqpB,GACjD6O,EAAc5iB,QAAQrT,IAAIonB,EAAM7pB,MACjC04B,EAAc5iB,QAAQtU,IAAIqoB,EAAM7pB,IAAI,GACdw5B,qBAAU3P,EAAM4P,aAAah/B,YAG3DE,EAAsB2xB,OAAtB,YAA2C,IAAI,SAAC9rB,EAAOqpB,GAC9C6O,EAAc5iB,QAAQrT,IAAIonB,EAAM7pB,MACjC04B,EAAc5iB,QAAQtU,IAAIqoB,EAAM7pB,IAAI,GACjBw5B,qBAAU3P,EAAM4P,aAAah/B,YAGxDE,EAAsB2xB,OAAtB,YAA2C,IAAI,SAAC9rB,EAAOqpB,GAC9C6O,EAAc5iB,QAAQrT,IAAIonB,EAAM7pB,MACjC04B,EAAc5iB,QAAQtU,IAAIqoB,EAAM7pB,IAAI,GACjBw5B,qBAAU3P,EAAM4P,aAAa3xB,YAGxDnN,EAAsB2xB,OAAtB,cACI,GADJ,uCAEI,WAAO9rB,EAAOqpB,GAAd,mBAAAvyB,EAAA,yDACSohC,EAAc5iB,QAAQrT,IAAIonB,EAAM7pB,IADzC,uBAEQ04B,EAAc5iB,QAAQtU,IAAIqoB,EAAM7pB,IAAI,GAF5C,EAGmC6pB,EAAM4P,aAAzB3xB,EAHhB,EAGgBA,OAAQrN,EAHxB,EAGwBA,OAHxB,SAIco+B,EACFW,qBAAU1xB,GACV0xB,qBAAU/+B,IANtB,2CAFJ,yDAaAE,EAAsB2xB,OAAtB,aAA4C,IAAI,SAAC9rB,EAAOqpB,GAC/C6O,EAAc5iB,QAAQrT,IAAIonB,EAAM7pB,MACjC04B,EAAc5iB,QAAQtU,IAAIqoB,EAAM7pB,IAAI,GACpCo5B,EACII,qBAAU3P,EAAM4P,aAAah/B,QAC7B++B,qBAAU3P,EAAM4P,aAAa3xB,aAIzCnN,EAAsB2xB,OAAtB,aAA4C,IAAI,SAAC9rB,EAAOqpB,GAC/C6O,EAAc5iB,QAAQrT,IAAIonB,EAAM7pB,MACjC04B,EAAc5iB,QAAQtU,IAAIqoB,EAAM7pB,IAAI,GACpCq5B,EACIG,qBAAU3P,EAAM4P,aAAah/B,QAC7B++B,qBAAU3P,EAAM4P,aAAa3xB,aAIzCnN,EAAsB2xB,OAAtB,YAA2C,IAAI,SAAC9rB,EAAOqpB,GAC9C6O,EAAc5iB,QAAQrT,IAAIonB,EAAM7pB,MACjC04B,EAAc5iB,QAAQtU,IAAIqoB,EAAM7pB,IAAI,GACpCs5B,EAAmBE,qBAAU3P,EAAM4P,aAAa3xB,aAGxDnN,EAAsB2xB,OAAtB,gBAA+C,IAAI,SAAC9rB,EAAOqpB,GAClD6O,EAAc5iB,QAAQrT,IAAIonB,EAAM7pB,MACjC04B,EAAc5iB,QAAQtU,IAAIqoB,EAAM7pB,IAAI,GAEhCw5B,qBAAU3P,EAAM4P,aAAah/B,QAC7B++B,qBAAU3P,EAAM4P,aAAa3xB,YA/D7C,4CA3L6D,+BAuQ9C4xB,EAvQ8C,8EAuQ7D,WAA2BtgC,GAA3B,eAAA9B,EAAA,uDAEUqiC,EAAgBvgC,EAAM8E,QACxB,SAAAgD,GAAC,OACGA,EAAEuwB,SAAWj0B,GAAgB2sB,GAAasN,WAC1Cv2B,EAAEuwB,SAAWj0B,GAAgB2sB,GAAauN,WAC1Cx2B,EAAEuwB,SAAWj0B,GAAgB2sB,GAAaE,eAKhCjsB,QAEdu7B,EAAct7B,SAAQ,SAAA1B,GAClB,IAAM6nB,EAAM,IAAIjlB,KACVD,EAAY,IAAIC,KAAoB,IAAf5C,EAAK0C,SAU1B65B,EAAyB,CAC3BhxB,KAAMb,EACNc,GAAIvP,EACJ2H,KAAM5F,EAAsByN,QAAtB,eACFxJ,GAAUjC,EAAKqD,KACjBqI,YACFqiB,IAAKkN,EACLtvB,SAAUuvB,GAGd,GAAIv4B,EAAYklB,EAAK,CAEjB,IAAI2U,EAAeR,EACf5+B,EACAm/B,EACAv8B,EAAKqD,GACLV,EAAYklB,GAIhBiU,EAAc3iB,QAAQtU,IAAI23B,EAAarxB,OAAQqxB,QAO/Cb,EAAiBv+B,EAAMm/B,GAAwB,MApD/D,4CAvQ6D,sBAsW7D,MAAO,CACHzY,MAvCO,uCAAG,WAAMrnB,GAAN,SAAA9B,EAAA,6DAEVygC,GAAW,GAGXwB,IALU,SAQJG,EAAYtgC,GARR,2CAAH,sDAwCPwgC,KA1BS,WAGT7B,GAAW,GAGE,aAAOU,EAAc3iB,SACxBzX,SAAQ,YAAa,IAAD,oBAAP6kB,GAAO,WAC1BloB,QAAQC,IAAIioB,GACZiI,aAAajI,EAAEgI,YAGnBuN,EAAc3iB,QAAU,IAAIrU,IAC5Bi3B,EAAc5iB,QAAU,IAAIrU,IAG5B82B,IAIAx+B,EAAKc,IAAIg/B,sBAOT/B,UACAW,cAAeA,EAAc3iB,QAC7B0iB,cGpRO3D,GAzFS,SAAA55B,GACpB,IAAMoM,EARS/R,6CASEyE,EAAS3C,cAAlB4C,QAFmB,EAGmC0B,KAAtD9C,EAHmB,EAGnBA,gBAAiB+B,EAHE,EAGFA,sBAAuBV,EAHrB,EAGqBA,UAHrB,EAIsBu5B,KAJtB,oBAIpBsB,EAJoB,KAIKgF,EAJL,OAWvBnC,GAAW59B,EAAMsN,EAjBP,KACA,IAgBsCpM,GALhDwlB,EANuB,EAMvBA,MACAmZ,EAPuB,EAOvBA,KACA9B,EARuB,EAQvBA,QACAW,EATuB,EASvBA,cACWsB,EAVY,EAUvBvB,UAOErC,EAAmBtuB,uBAAY,WAKjC,IAAMktB,EAA0B,CAC5B7sB,KAAMb,EACNc,GAAIvP,EACJ2H,KAAM5F,EAAsByN,QAAtB,UAA2CC,YACjDqiB,IAhCM,KAiCNpiB,SAhCM,KAmCJ0sB,EAA2BC,GAAUt1B,KAAI,SAAAxG,GAC3C,MAAO,CACH+O,KAAMb,EACNc,GAAIvP,EACJ2H,KAAM5F,EAAsByN,QAAtB,aACFxJ,GAAUzF,IACZkP,YACFqiB,IA3CE,KA4CFpiB,SA3CE,QA+CJ4sB,EAAyBjD,GAAUtyB,KAAI,SAAAhD,GACzC,MAAO,CACHuL,KAAMb,EACNc,GAAIvP,EACJ2H,KAAM5F,EAAsByN,QAAtB,WACFxJ,GAAUjC,EAAKoD,QVuNF,IUrNfsI,YACFqiB,IAxDE,KAyDFpiB,SAxDE,QA4DVwsB,EACI/6B,EADmB,CAGfg7B,GAHe,oBAIZC,GAJY,aAKZE,KAEP,KAEL,CAACn7B,EAAMY,EAAuBV,IAEjC,MAAO,CACH+/B,aAtDiB,SAAA5gC,GAAK,OAAIqnB,EAAMrnB,IAuDhC6gC,YArDgB,kBAAML,KAsDtBM,eAAgBpC,EAChBP,KAAMkB,EACND,UAAW,CACPj4B,KAAM,CACFkzB,QAAQ,GAAD,oBACAsG,EAAiBx5B,KAAKkzB,SADtB,aAEAqG,EAAcv5B,KAAKkzB,UAE1BE,SAAS,GAAD,oBACDoG,EAAiBx5B,KAAKozB,UADrB,aAEDmG,EAAcv5B,KAAKozB,YAG9BnzB,MAAM,GAAD,oBAAMu5B,EAAiBv5B,OAAvB,aAAiCs5B,EAAct5B,SAExD21B,mBACAgE,wBAAyBL,EAAcr5B,UCxD/C,SAASspB,GAAMhuB,GACX,OAAO,kBAAC,KAAD,eAAUsW,UAAW,EAAG/I,QAAQ,UAAavN,IAGxD,IAAMwM,GAAYC,cAAW,SAAA9U,GAAK,MAAK,CACnC+W,KAAM,CACFS,QAAS,QAEbiqB,OAAQ,CACJviB,OAAQlf,EAAMkf,OAAOwiB,OAAS,EAC9BzsB,OAAQjV,EAAMkB,QAAQ,IAAK,GAC3BoW,WAAYtX,EAAM2hC,YAAYzzB,OAAO,CAAC,QAAS,UAAW,CACtD0zB,OAAQ5hC,EAAM2hC,YAAYC,OAAOC,MACjCxa,SAAUrnB,EAAM2hC,YAAYta,SAASya,iBAG7CC,YAAa,CACTnlB,WAnBY,IAoBZ9E,MAAM,eAAD,OApBO,IAoBP,OACLR,WAAYtX,EAAM2hC,YAAYzzB,OAAO,CAAC,QAAS,UAAW,CACtD0zB,OAAQ5hC,EAAM2hC,YAAYC,OAAOC,MACjCxa,SAAUrnB,EAAM2hC,YAAYta,SAAS2a,kBAG7CC,WAAY,CACRnmB,YAAa,IAEjBomB,KAAM,CACF1qB,QAAS,QAEbkqB,OAAQ,CACJ5pB,MAjCY,IAkCZqqB,WAAY,EACZ/mB,WAAY,UAEhBgnB,WAAY,CACRtqB,MAtCY,IAuCZR,WAAYtX,EAAM2hC,YAAYzzB,OAAO,QAAS,CAC1C0zB,OAAQ5hC,EAAM2hC,YAAYC,OAAOC,MACjCxa,SAAUrnB,EAAM2hC,YAAYta,SAAS2a,iBAEzC/sB,OAAQjV,EAAMkB,QAAQ,IAAK,IAE/BmhC,YAAa,CACT/qB,WAAYtX,EAAM2hC,YAAYzzB,OAAO,QAAS,CAC1C0zB,OAAQ5hC,EAAM2hC,YAAYC,OAAOC,MACjCxa,SAAUrnB,EAAM2hC,YAAYta,SAASya,gBAEzCpgC,UAAW,SACXoW,MAAO9X,EAAMkB,QAAQ,KAIrB+T,OAAQjV,EAAMkB,QAAQ,IAAK,GAC3B,6BAA8B,CAC1B4a,YAAa9b,EAAMkB,QAAQ,KAGnCE,QAAQ,cACJoW,QAAS,OACTmC,WAAY,SACZjC,eAAgB,WAChBP,QAASnX,EAAMkB,QAAQ,EAAG,IAEvBlB,EAAMmB,OAAOC,SAEpBkhC,SAAU,CACN,+BAAgC,CAC5BxmB,YAAa9b,EAAMkB,QAAQ,GAC3BsqB,SAAUxrB,EAAMkB,QAAQ,OAGhC6f,QAAS,CACL/J,SAAU,EACVG,QAASnX,EAAMkB,QAAQ,QA8XhBwlC,GAzXC,WAAO,IAAD,IACZplB,EAAUzM,KACV7U,EAAQ+uB,eAFI,EAGM5oB,oBAAS,GAHf,oBAGX4S,EAHW,KAGL4pB,EAHK,OAIsBx8B,oBAAS,GAJ/B,oBAIXy8B,EAJW,KAIGC,EAJH,OAKoB18B,mBAAS,IAL7B,oBAKX28B,EALW,KAKEC,EALF,OAM8B58B,mBAAS,WANvC,oBAMXwgC,EANW,KAMOC,EANP,OAO8BzgC,mBAAS,MAPvC,oBAOX0gC,EAPW,KAOOC,EAPP,KAQZC,EAAW/kB,kBAAO,GARN,EAedha,KAJAzB,EAXc,EAWdA,UACAE,EAZc,EAYdA,iBACAe,EAbc,EAadA,SACAP,EAdc,EAcdA,sBAdc,EAgBuBkG,KAAjCzH,EAhBU,EAgBVA,MAhBU,KAgBHsH,QAC0BR,MAAjChH,EAjBU,EAiBVA,MAAgBwhC,EAjBN,EAiBHh6B,QAEf,SAASi6B,EAAmB/oB,EAAKoY,GAA6B,IAAnB4Q,EAAkB,uDAAP,IAClDN,EAAoBtQ,GACpByM,EAAe7kB,GACf4oB,EAAoBI,GAtBN,MAiCd/F,GAAgB8F,GAPhBX,EA1Bc,EA0BdA,aACAC,EA3Bc,EA2BdA,YACAC,EA5Bc,EA4BdA,eACA3C,EA7Bc,EA6BdA,KACAiB,EA9Bc,EA8BdA,UACArC,EA/Bc,EA+BdA,iBACAgE,EAhCc,EAgCdA,wBAGEzD,EAAgBj+B,GAAOkH,KAAI,SAAAtE,GAAC,MAAK,CACnCE,MAAOF,EAAE5F,KACT8f,MAAOla,EAAE3C,gBAGbrB,qBAAU,WACFi/B,GACAC,GAAgB,GAEA,KAAhBC,GACAD,GAAgB,KAErB,CAACC,IAEJn/B,qBAAU,WACD8iC,GAA4BM,EAAS3kB,QAMtC2kB,EAAS3kB,SAAU,EALnB6kB,EACI,0CACA,aAKT,CAACR,IAEJ9iC,qBAAU,WACN2D,QAAQC,IAAI,oBACZy/B,MACD,CAACthC,IAEJ,IAQMyhC,EAAsB,SAAChR,EAAOC,GACjB,cAAXA,GAGJyM,GAAgB,IAQpB,SAASuE,EAAOlpB,GAAuB,IAAlBgpB,EAAiB,uDAAN,IAC5BnE,EAAe7kB,GACf0oB,EAAoB,QACpBE,EAAoBI,GAGxB,OACI,kBAAC,GAAD,CAAUzxB,UAAW6L,EAAQvK,MACzB,kBAAC2H,GAAA,EAAD,CACI1J,SAAS,QACTS,UAAW+J,aAAK8B,EAAQmgB,OAAT,gBACVngB,EAAQygB,YAAchpB,KAG3B,kBAACkqB,GAAA,EAAD,KACI,kBAAC1pB,GAAA,EAAD,CACIhE,MAAM,UACNiE,aAAW,cACXX,QAtCK,WACrB8pB,GAAQ,IAsCQO,KAAK,QACLztB,UAAW+J,aAAK8B,EAAQ2gB,WAAT,gBACV3gB,EAAQ4gB,KAAOnpB,KAGpB,kBAAC,KAAD,OAEJ,kBAACpD,GAAA,EAAD,CAAYC,QAAQ,KAAK8M,QAAM,GAA/B,0BAKR,kBAACygB,GAAA,EAAD,CACIvtB,QAAQ,YACRH,UAAW+J,aAAK8B,EAAQogB,QAAT,oBACVpgB,EAAQ8gB,WAAarpB,GADX,eAEVuI,EAAQ+gB,aAAetpB,GAFb,IAIfuI,QAAS,CACL8hB,MAAO5jB,cAAI,oBACN8B,EAAQ8gB,WAAarpB,GADf,eAENuI,EAAQ+gB,aAAetpB,GAFjB,MAMf,yBAAKtD,UAAW6L,EAAQlgB,SACpB,kBAACmY,GAAA,EAAD,CAAYV,QA7DF,WACtB8pB,GAAQ,KA6D6B,QAApB3iC,EAAMuY,UACH,kBAAC,KAAD,MAEA,kBAAC,KAAD,QAIZ,kBAAC8qB,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACI9tB,UAAW6L,EAAQghB,SACnBkB,QAAM,EACNv4B,IAAI,eACJklB,UACKlpB,GACDu/B,GACAC,GAGJ,kBAAChD,GAAA,EAAD,CACI5qB,QAAS,WACLuuB,EACI,yEAEJ,IACId,EAAa5gC,GACbuhC,EACI,+BACA,WAEN,MAAOn6B,GACLm6B,EACI,uBACA,SAEJ3/B,QAAQC,IAAIuF,MAIpB,kBAAC,KAAD,OAEJ,kBAAC42B,GAAA,EAAD,CAAc7iC,QAAQ,mBAE1B,kBAAC0iC,GAAA,EAAD,CACI9tB,UAAW6L,EAAQghB,SACnBkB,QAAM,EACNv4B,IAAI,cACJklB,UAAWqW,GAAkBC,GAE7B,kBAAChD,GAAA,EAAD,CACI5qB,QAAS,WACLuuB,EAAO,oCACP,IACIb,IACAU,EACI,+BACA,WAEN,MAAOn6B,GACLm6B,EACI,sBACA,SAEJ3/B,QAAQC,IAAIuF,MAIpB,kBAAC,KAAD,OAEJ,kBAAC42B,GAAA,EAAD,CAAc7iC,QAAQ,kBAE1B,kBAAC0iC,GAAA,EAAD,CACI9tB,UAAW6L,EAAQghB,SACnBkB,QAAM,EACNv4B,IAAI,kBACJklB,UACKlpB,GACDu/B,GACAC,GAGJ,kBAAChD,GAAA,EAAD,CACI5qB,QAAS,WACLuuB,EACI,mIAEJ,IACI3E,IACF,MAAO31B,GACLm6B,EACI,2BACA,SAEJ3/B,QAAQC,IAAIuF,MAIpB,kBAAC,KAAD,OAEJ,kBAAC42B,GAAA,EAAD,CAAc7iC,QAAQ,wBAIlC,0BAAM4U,UAAW6L,EAAQP,SACrB,kBAACpI,GAAA,EAAD,CAAMe,WAAS,EAACxY,QAAS,GACrB,kBAACyX,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,GACX,kBAAC7L,GAAA,EAAD,CAAYC,QAAQ,MAAMnP,IAE9B,kBAACkS,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,GACX,kBAAC7I,GAAA,EAAD,CACIe,WAAS,EACT+G,QAAQ,WACR9G,WAAW,SACXzY,QAAS,GAET,kBAACyX,GAAA,EAAD,CAAMC,MAAI,GACN,kBAACjD,GAAA,EAAD,CAAYC,QAAQ,MAApB,kBAIJ,kBAAC+C,GAAA,EAAD,CAAMC,MAAI,GACN,kBAAC,GAAD,CACI7W,KAAK,QACL8f,MAAM,QACNha,MAAOtB,EACPgnB,QAASyV,EACTnR,SAAU,SAAAC,GAAC,OAAItqB,EAASsqB,EAAElS,OAAO/X,aAKjD,kBAAC8Q,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,GACX,kBAAC7I,GAAA,EAAD,CAAMe,WAAS,EAAC+G,QAAQ,gBAAgBvf,QAAS,GAC7C,kBAACyX,GAAA,EAAD,CAAMC,MAAI,GACN,kBAACjD,GAAA,EAAD,CAAYC,QAAQ,MAApB,aAEJ,kBAAC+C,GAAA,EAAD,CAAMC,MAAI,GACN,kBAACqY,GAAA,EAAD,CACIhV,KACIuqB,EACI,kBAAC,KAAD,MAEA,kBAAC,KAAD,MAGR3kB,MAAO2kB,EAAiB,KAAO,MAC/BjxB,MACIixB,EAAiB,UAAY,YAEjCvmB,MAAO,CAAE3E,aAAc,YAInC,kBAAC,GAAD,CACIuoB,KAAM,aAAIA,GAAM53B,KAAI,YAAa,IAAD,oBAAPujB,GAAO,WAC5B,MAAO,CACHljB,GAAIkjB,EAAEgI,QACNpjB,OAAQob,EAAEpb,OACVzI,QAAS6jB,EAAE7jB,QACXoyB,OACIvO,EAAE7jB,QAAUE,KAAKilB,MACX,UACA,mBAK1B,kBAACnY,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,IACf,kBAAC7I,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,GACX,kBAAC7L,GAAA,EAAD,CAAYC,QAAQ,MAApB,oBACA,kBAAC,GAAD,CACIpQ,MACIA,GAASE,EACHF,EAAMyG,KAAI,SAAA03B,GACN,IAAIvvB,EAAS1O,EAAM8E,QACf,SAAAgD,GAAC,OACGA,EAAE65B,UACF75B,EAAE65B,SAAS/6B,KAAOq3B,EAAEr3B,IACpBkB,EAAEuwB,StBvY3Cl0B,GsByYiD4sB,GAAaG,aAG7B,MAAO,CACHtqB,GAAIq3B,EAAEr3B,GACN4xB,SAAUyF,EAAE2D,UACZlzB,OAAQA,EAAO,GACTA,EAAO,GAAG9H,GACV,SAGd,QAIlB,kBAACqM,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,GACX,kBAAC7L,GAAA,EAAD,CAAYC,QAAQ,MAApB,SACA,kBAAC,GAAD,CACIlQ,MACIA,EACMA,EAAMuG,KAAI,SAAAuB,GACN,MAAO,CACHlB,GAAIkB,EAAElB,GACNyxB,OAAQvwB,EAAEuwB,OACVh3B,OAAQyG,EAAE65B,SACJ75B,EAAE65B,SAAS/6B,GACX,KACNX,QAAqB,IAAZ6B,EAAE7B,YAGnB,QAIlB,kBAACgN,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,IACX,kBAAC7L,GAAA,EAAD,CAAYC,QAAQ,MAApB,gBACA,kBAAC,GAAD,CACIwoB,IAAK0G,EAAUj4B,KAAOi4B,EAAUj4B,KAAKozB,SAAW,QAOhE,kBAACpK,GAAA,EAAD,CACIC,aAAc,CACVC,SAAU,SACVC,WAAY,SAEhBjd,KAAM6pB,EACN5pB,QAASmuB,EACTI,SA1RiB,WACzBxE,EAAe,IACfF,GAAgB,IAyRR3M,iBAAkB2Q,EAClB5mB,MAAO,CAAE/E,SAAU,UAEnB,kBAAC,GAAD,CACIlC,QAASmuB,EACT7Q,SAAUqQ,GAET7D,M,qBCvefjuB,GAAYC,cAAW,SAAA9U,GAAK,MAAK,CACnC+W,KAAM,CACFtV,gBAAiBzB,EAAME,QAAQU,WAAWb,MAC1CwV,MAAO,QAEXiyB,cAAe,CACX7vB,OAAQ,YAiBD8vB,GAbI,SAAC,GAA6B,IAA3BhyB,EAA0B,EAA1BA,UAAWpS,EAAe,EAAfA,SAAe,EACZwR,KAAxBkC,EADoC,EACpCA,KAAMywB,EAD8B,EAC9BA,cAEd,OACI,yBAAK/xB,UAAWsB,GACZ,kBAAC6H,GAAA,EAAD,CAAW1D,SAAS,MAChB,kBAACuE,GAAA,EAAD,CAAKhK,UAAW+J,aAAK/J,EAAW+xB,IAAiBnkC,IAErD,kBAACkc,GAAD,QCTN1K,GAAYC,cAAW,SAAA9U,GAAK,MAAK,CACnC+W,KAAM,CACFmD,OAAQ,sBACR,OAAQ,CACJoB,aAActb,EAAMkB,QAAQ,KAGpCi5B,OAAQ,CACJ,0BAA2B,CACvB5kB,MAAO,SAGfiuB,OAAQ,CACJjuB,MAAO,YAITse,GAAY,SAAAxrB,GAAK,OAAI,kBAACiQ,GAAA,EAAD,iBAAWjQ,EAAX,CAAkBkQ,UAAU,WA0KxCmvB,GAxKA,WAAO,IAAD,EACgB7yB,KAAzBkC,EADS,EACTA,KAAMojB,EADG,EACHA,OAAQqJ,EADL,EACKA,OAChBmE,EAAUC,eACRpiC,EAAUgH,KAAVhH,MAHS,EAIuBW,mBAAS,IAJhC,oBAIV0hC,EAJU,KAIIC,EAJJ,OAKuB3hC,qBALvB,oBAKV4hC,EALU,KAKIC,EALJ,OAMyB7hC,mBAAS,IANlC,oBAMV8hC,EANU,KAMKC,EANL,OAOuB/hC,oBAAS,GAPhC,oBAOVy8B,EAPU,KAOIC,EAPJ,KAWXG,EAAgBj+B,GAAOkH,KAAI,SAAAtE,GAAC,MAAK,CACnCE,MAAOF,EAAE5F,KACT8f,MAAOla,EAAE3C,gBAgCb,OAbArB,qBAAU,WACF6B,IACAwiC,EAAgBxiC,EAAMyG,KAAI,SAAA03B,GAAC,MAAK,CAAE97B,MAAO87B,EAAEr3B,GAAIuV,MAAO8hB,EAAEr3B,QACxDw7B,EAAgBtiC,EAAM,GAAG8G,OAE9B,CAAC9G,IAEJ7B,qBAAU,WACFoB,IACAmjC,EAAiBnjC,GAAO,GAAGhD,QAEhC,CAACgD,KAGA,kBAAC,GAAD,KACI,kBAAC4T,GAAA,EAAD,CACIe,WAAS,EACT+G,QAAQ,aACRhJ,aAAa,SACbkC,WAAW,SACXzY,QAAS,EACTuU,UAAWsB,GAEX,kBAAC4B,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,IACX,kBAAC7L,GAAA,EAAD,CAAYC,QAAQ,MAApB,6CAGA,kBAACD,GAAA,EAAD,CAAYC,QAAQ,MAApB,QACU,IACN,2BACI,yCACC,IAJT,mDAQJ,kBAAC+C,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,IACX,kBAAC7I,GAAA,EAAD,CAAMe,WAAS,EAACxY,QAAS,GACpB8hC,EACG,kBAACrqB,GAAA,EAAD,CAAMC,MAAI,GACN,kBAACD,GAAA,EAAD,CAAMe,WAAS,EAACC,WAAW,SAASzY,QAAS,GACzC,kBAACyX,GAAA,EAAD,CAAMC,MAAI,GACN,kBAACjD,GAAA,EAAD,CAAYC,QAAQ,MAApB,UAIJ,kBAAC+C,GAAA,EAAD,CAAMC,MAAI,GACN,kBAAC,GAAD,CACI7W,KAAK,QACL8f,MAAM,QACNha,MAAOogC,EACP1a,QAASyV,EACTvtB,UAAW0kB,EACXtI,SAAU,SAAAC,GAAC,OACPoW,EAAiBpW,EAAElS,OAAO/X,aAM9C,KACHkgC,EACG,kBAACpvB,GAAA,EAAD,CAAMC,MAAI,GACN,kBAACD,GAAA,EAAD,CAAMe,WAAS,EAACC,WAAW,SAASzY,QAAS,GACzC,kBAACyX,GAAA,EAAD,CAAMC,MAAI,GACN,kBAACjD,GAAA,EAAD,CAAYC,QAAQ,MAApB,SAIJ,kBAAC+C,GAAA,EAAD,CAAMC,MAAI,GACN,kBAAC,GAAD,CACI7W,KAAK,OACL8f,MAAM,OACNha,MAAOggC,EACPta,QAASwa,EACTtyB,UAAW0kB,EACXtI,SAAU,SAAAC,GAAC,OACPgW,EAAgBhW,EAAElS,OAAO/X,aAM7C,OAGZ,kBAAC8Q,GAAA,EAAD,CAAMC,MAAI,EAAC4I,GAAI,IACX,kBAAC7I,GAAA,EAAD,CAAMe,WAAS,EAACxY,QAAS,GACrB,kBAACyX,GAAA,EAAD,CAAMC,MAAI,GACN,kBAACmF,GAAA,EAAD,CACInI,QAAQ,WACRH,UAAW+tB,EACX3qB,QA3GH,WACrB,IAAI7N,EAAeH,GAAY8L,OAAOwxB,SAASC,OARnC,SAQqD,CAC7D,CAAEn9B,IAAK,SAAUpD,MAAOggC,GACxB,CAAE58B,IAAK,QAASpD,MAAOogC,KAE3BI,UAAUC,UAAUC,UAAUv9B,GAC9B63B,GAAgB,KAuGQ,kBAAC,KAAD,MALJ,eAQJ,kBAAClqB,GAAA,EAAD,CAAMC,MAAI,GACN,kBAACmF,GAAA,EAAD,CACInI,QAAQ,WACRH,UAAW+tB,EACX3qB,QAAS,kBACL8uB,EAAQ3L,KACJnxB,GA7HpB,SA6HyC,CACjB,CACII,IAAK,SACLpD,MAAOggC,GAEX,CACI58B,IAAK,QACLpD,MAAOogC,QAZ3B,cAwBhB,kBAACpS,GAAA,EAAD,CACI9c,KAAM6pB,EACN9M,aAAc,CAAEC,SAAU,SAAUC,WAAY,SAChD9c,oBAAqB2a,GACrBoC,mBAAoB,IACpBC,iBAAkB,IAClBld,QAtIgB,SAACmd,EAAOC,GACjB,cAAXA,GAGJyM,GAAgB,IAmIR53B,IAAK,eAEL,kBAACorB,GAAA,EAAD,CAAOC,SAAU,QA1JT,uCCSTkS,OAzCf,WAAmB,IAGXC,EAAeC,EAEnB,OAJsB1gC,KAAdzB,WAMJ,KAAKxB,GAAO,GAAGhD,KACX0mC,EAAgB3U,GAChB4U,EAAiBnG,GACjB,MAGJ,KAAKx9B,GAAO,GAAGhD,KACX0mC,EAAgBrR,GAChBsR,EAAiBhC,GACjB,MAGJ,KAAK3hC,GAAO,GAAGhD,KACX0mC,EAAgBxM,GAChByM,EAAiBhC,GACjB,MAGJ,QACI+B,EAAgB3U,GAIxB,OACI,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAU6U,OAAK,EAACn0B,KAAK,IAAIC,GAAG,YAC5B,kBAAC,KAAD,CAAOhF,KAAK,UAAUqgB,UAAW4X,KACjC,kBAAC,KAAD,CAAOj4B,KAAK,QAAQqgB,UAAW2Y,IAE/B,kBAAC,KAAD,CAAOh5B,KAAK,SAASqgB,UAAW4Y,MClC5C,SAASE,GAAWC,GAChB,OAAO,IAAIC,IAAKD,GA8BLE,OAzBf,WACI,OACI,kBAAC,WAAD,CAAUC,SAAS,WACf,kBAAC,IAAD,CAAmBJ,WAAYA,IAC3B,kBAAC,EAAD,KACI,kBAAC1iC,GAAD,KAGI,kBAAC,GAAD,KACI,kBAAC+iC,EAAA,EAAD,CAAejpC,MAAOA,GAClB,kBAACkpC,EAAA,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,GAAD,cCnBhBC,QACW,cAA7BxyB,OAAOwxB,SAASiB,UAEe,UAA7BzyB,OAAOwxB,SAASiB,UAEhBzyB,OAAOwxB,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBpB,WACrBA,UAAUqB,cAAcC,MACrBt3B,MAAK,SAAAu3B,GACJA,EAAaC,gBAEdtzB,OAAM,SAAAzJ,GACLxF,QAAQwF,MAAMA,EAAMiQ,c","file":"static/js/main.22a082c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Homepage.7e0db706.svg\";","module.exports = __webpack_public_path__ + \"static/media/roboto-100.66209ae0.ttf\";","module.exports = __webpack_public_path__ + \"static/media/roboto-v20-latin-300.b00849e0.woff\";","module.exports = __webpack_public_path__ + \"static/media/roboto-v20-latin-300.ef7c6637.woff2\";","module.exports = __webpack_public_path__ + \"static/media/roboto-v20-latin-500.87284894.woff\";","module.exports = __webpack_public_path__ + \"static/media/roboto-v20-latin-500.020c97dc.woff2\";","module.exports = __webpack_public_path__ + \"static/media/roboto-v20-latin-700.adcde98f.woff\";","module.exports = __webpack_public_path__ + \"static/media/roboto-v20-latin-700.2735a3a6.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Logo.11008d2b.svg\";","module.exports = __webpack_public_path__ + \"static/media/MetamaskLogo.92a73d44.png\";","module.exports = __webpack_public_path__ + \"static/media/DownloadMetamask.885082cf.png\";","module.exports = __webpack_public_path__ + \"static/media/NoThumbnail.c9f7f48d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/NoVideo.594c1aea.png\";","import { createMuiTheme } from '@material-ui/core/styles'\n\nimport {\n    roboto100ttf,\n    roboto300Woff,\n    roboto300Woff2,\n    roboto500Woff,\n    roboto500Woff2,\n    roboto700Woff,\n    roboto700Woff2,\n} from './assets/fonts'\n\nconst roboto100 = {\n    fontFamily: 'Roboto',\n    fontStyle: 'normal',\n    fontWeight: 100,\n    src: `\n    url(https://fonts.gstatic.com/s/roboto/v30/KFOkCnqEu92Fr1MmgVxIIzI.woff2) format('woff2'),\n    url(${roboto100ttf}) format('ttf')`,\n}\n\nconst roboto300 = {\n    fontFamily: 'Roboto',\n    fontStyle: 'normal',\n    fontWeight: 300,\n    src: `\n    local('Roboto Light'),\n    local('Roboto-Light'),\n    url(${roboto300Woff2}) format('woff2'),\n    url(${roboto300Woff}) format('woff')\n  `,\n}\n\nconst roboto400 = {\n    fontFamily: 'Roboto',\n    fontStyle: 'normal',\n    fontWeight: 400,\n    src: `\n    url(https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu92Fr1Mu4mxK.woff2) format('woff2')\n  `,\n}\n\nconst roboto500 = {\n    fontFamily: 'Roboto',\n    fontStyle: 'normal',\n    fontWeight: 500,\n    src: `\n    local('Roboto Medium'),\n    local('Roboto-Medium'),\n    url(${roboto500Woff2}) format('woff2'),\n    url(${roboto500Woff}) format('woff')\n  `,\n}\n\nconst roboto700 = {\n    fontFamily: 'Roboto',\n    fontStyle: 'normal',\n    fontWeight: 700,\n    src: `\n    local('Roboto Bold'),\n    local('Roboto-Bold'),\n    url(${roboto700Woff2}) format('woff2'),\n    url(${roboto700Woff}) format('woff')\n  `,\n}\n\nconst white = {\n    0: '#fff',\n    100: '#FBF6F6',\n    300: '#f3f4f6',\n}\n\nconst grey = {\n    300: '#D8DBE4',\n    400: '#ACB0B3',\n    500: '#333333',\n    900: '#474955',\n}\n\nconst purple = {\n    500: '#6E3759',\n}\n\nconst green = {\n    300: '#69C96C',\n    500: '#389b3c',\n}\n\nconst theme = createMuiTheme({\n    palette: {\n        secondary: {\n            main: grey[500],\n        },\n        text: {\n            dark: grey[900],\n            main: grey[500],\n            light: white[100],\n            secondary: grey[400],\n        },\n        chips: {\n            low: '#30957B',\n            medium: '#80BD3E',\n            high: '#F3254D',\n        },\n        background: {\n            primary: white[100],\n            secondary: white[300],\n            green: green[300],\n        },\n        translateButton: purple[500],\n        info: {\n            main: purple[500],\n        },\n        success: {\n            main: green[300],\n            dark: green[500],\n        },\n    },\n    typography: {\n        fontFamily: ['Roboto', 'Arial', 'serif'],\n    },\n    spacing: 16,\n    mixins: {\n        toolbar: {\n            minHeight: '90px',\n        },\n    },\n    overrides: {\n        MuiCssBaseline: {\n            '@global': {\n                '@font-face': [\n                    roboto100,\n                    roboto300,\n                    roboto400,\n                    roboto500,\n                    roboto700,\n                ],\n                body: { backgroundColor: white[0], overflowX: 'hidden' },\n            },\n        },\n    },\n})\n\nexport default theme\n","// TODO: Set rpc urls as private env variables.\nconst RPC_URLS = {\n    mainnet: 'INFURA_MAINNET_URL',\n    rinkeby: process.env.REACT_APP_INFURA_ENDPOINT,\n    goerli: process.env.REACT_APP_INFURA_ENDPOINT,\n}\n\nconst INSTANCE = process.env.REACT_APP_TASK_ALLOCATION_INSTANCE\n\n// Staging configuration\nconst STAGING_ROUND_ROBIN = '0xd46B303B2276c8E6999e977B32816a7fC50B55Af'\nconst STAGING_CHAIN_ID = 4\nconst STAGING_CONNECTOR_TYPE = 'thegraph'\n\n// Network data taken from https://github.com/ethereum-lists/chains/tree/master/_data/chains\nconst networks = {\n    1: {\n        name: 'Mainnet',\n        chain: 'ETH',\n        network: 'mainnet',\n        rpc: [`https://mainnet.infura.io/v3/${RPC_URLS.mainnet}`],\n        faucets: [],\n        nativeCurrency: {\n            name: 'Ether',\n            symbol: 'ETH',\n            decimals: 18,\n        },\n        infoURL: 'https://ethereum.org',\n        shortName: 'eth',\n        chainId: 1,\n        networkId: 1,\n        slip44: 60,\n        ens: {\n            registry: '0x314159265dd8dbb310642f98f50c066173c1259b',\n        },\n    },\n    4: {\n        name: 'Rinkeby',\n        chain: 'ETH',\n        network: 'rinkeby',\n        rpc: [RPC_URLS.rinkeby],\n        faucets: ['https://faucet.rinkeby.io'],\n        nativeCurrency: {\n            name: 'Rinkeby Ether',\n            symbol: 'RIN',\n            decimals: 18,\n        },\n        infoURL: 'https://www.rinkeby.io',\n        shortName: 'rin',\n        chainId: 4,\n        networkId: 4,\n        ens: {\n            registry: '0xe7410170f87102df0055eb195163a03b7f2bff4a',\n        },\n        // org: getRinkebyOrgData(INSTANCE),\n    },\n    5: {\n        name: 'Goerli',\n        network: 'goerli',\n        rpc: [RPC_URLS.goerli],\n        faucets: ['https://faucet.goerli.io'],\n        nativeCurrency: {\n            name: 'Goerli Ether',\n            decimals: 18,\n        },\n        infoURL: 'https://goerli.net/',\n        chainId: 5,\n        networkId: 5,\n    },\n}\n\nfunction getDefaultChainId(instance) {\n    if (instance === 'staging') return STAGING_CHAIN_ID\n}\n\n// function getRinkebyOrgData(instance) {\n//   if (instance === 'staging')\n//     return {\n//       address: STAGING_ROUND_ROBIN,\n//       connectorType: STAGING_CONNECTOR_TYPE,\n//     }\n// }\n\nexport function getNetwork(chainId = getDefaultChainId(INSTANCE)) {\n    return networks[chainId]\n}\n","import React, { useEffect } from 'react'\nimport { Connectors } from 'web3-react'\nimport { getNetwork } from '../networks'\nimport { useWeb3React } from '@web3-react/core'\n\nconst ConnectProvider = ({ networkOnlyConnector = false, children }) => {\n    const { InjectedConnector, NetworkOnlyConnector } = Connectors\n    const { chainId } = getNetwork()\n    const web3React = useWeb3React()\n\n    useEffect(() => {\n        const connect = async () => {\n            let connector = networkOnlyConnector\n                ? new NetworkOnlyConnector({\n                      providerURL: process.env.REACT_APP_INFURA_ENDPOINT,\n                  })\n                : new InjectedConnector({\n                      supportedChainIds: [chainId],\n                  })\n\n            // console.log('The connector is')\n            // console.log(connector)\n            const result = await web3React.activate(connector)\n            // console.log('Activating:')\n            // console.log(result)\n        }\n        connect()\n\n        return web3React.deactivate()\n    }, [])\n\n    return <>{children}</>\n}\n\nexport { ConnectProvider }\n","import { gql } from '@apollo/client'\n\n/**\n * Get all users\n *\n * @param  {Int!} $first\n * @param  {Int!} $skip\n */\nexport const FCFS_USERS = gql`\n    query Users($first: Int!, $skip: Int!) {\n        users(first: $first, skip: $skip) {\n            id\n            hasTask\n        }\n    }\n`\n\n/**\n * Get user by id\n *\n * @param  {String!} $id\n */\nexport const FCFS_USER = gql`\n    query FCFSUser($id: String!) {\n        users(id: $id) {\n            id\n            hasTask\n        }\n    }\n`\n\n/**\n * Get all tasks\n *\n * @param  {Int!} $first\n * @param  {Int!} $skip\n */\nexport const FCFS_TASKS = gql`\n    query Tasks($first: Int!, $skip: Int!) {\n        tasks(first: $first, skip: $skip) {\n            id\n            status\n            userId\n        }\n    }\n`\n/**\n * Get all available tasks\n *\n * @param  {Int!} $first\n * @param  {Int!} $skip\n */\nexport const FCFS_TASKS_AVAILABLE = gql`\n    query Tasks($first: Int!, $skip: Int!) {\n        tasks(where: { status: Available }, first: $first, skip: $skip) {\n            id\n            status\n            userId\n        }\n    }\n`\n/**\n * Get tasks accepted by the user, currently only one\n * task at a time can be accepted\n *\n * @param  {ID!} $userId\n * @param  {Int!} $first\n * @param  {Int!} $skip\n */\nexport const FCFS_USER_TASKS_ACCEPTED = gql`\n    query Tasks($userId: ID!, $first: Int!, $skip: Int!) {\n        tasks(\n            where: { status: Accepted, userId: $userId }\n            first: $first\n            skip: $skip\n        ) {\n            id\n            status\n            userId\n        }\n    }\n`\n\n/**\n * Get all users\n *\n * @param  {Int!} $first\n * @param  {Int!} $skip\n */\nexport const RR_USERS = gql`\n    query Users($first: Int!, $skip: Int!) {\n        users(first: $first, skip: $skip) {\n            id\n            benefits\n            available\n            # rejectedTasks {\n            #     id\n            # }\n        }\n    }\n`\n/**\n * Get user by id\n *\n * @param  {String!} $id\n */\nexport const RR_USER = gql`\n    query RRUser($id: String!) {\n        user(id: $id) {\n            id\n            benefits\n            available\n            # rejectedTasks {\n            #     id\n            # }\n        }\n    }\n`\n\n/**\n * Get user calendar ranges\n *\n * @param  {String!} $id\n */\nexport const RR_CAL_USER = gql`\n    query RRCalUser($id: String!) {\n        user(id: $id) {\n            id\n            benefits\n            available\n            calendarRangesStart\n            calendarRangesEnd\n        }\n    }\n`\n\n/**\n * Get all tasks\n *\n * @param  {Int!} $first\n * @param  {Int!} $skip\n */\nexport const RR_TASKS = gql`\n    query Tasks($first: Int!, $skip: Int!) {\n        tasks(first: $first, skip: $skip) {\n            id\n            endDate\n            reallocationTime\n            status\n            assignee {\n                id\n            }\n        }\n    }\n`\n/**\n * Get all tasks assigned to a user\n *\n * @param  {ID!} $userId\n * @param  {Int!} $first\n * @param  {Int!} $skip\n */\nexport const RR_USER_TASKS_ASSIGNED = gql`\n    query Tasks($userId: ID!, $first: Int!, $skip: Int!) {\n        tasks(\n            where: { status: Assigned, assignee: $userId }\n            first: $first\n            skip: $skip\n        ) {\n            id\n            endDate\n            reallocationTime\n            status\n            assignee {\n                id\n            }\n        }\n    }\n`\n/**\n * Get all tasks accepted by the user, currently only one\n * task at a time can be accepted\n *\n * @param  {ID!} $userId\n * @param  {Int!} $first\n * @param  {Int!} $skip\n */\nexport const RR_USER_TASKS_ACCEPTED = gql`\n    query Tasks($userId: ID!, $first: Int!, $skip: Int!) {\n        tasks(\n            where: { status: Accepted, assignee: $userId }\n            first: $first\n            skip: $skip\n        ) {\n            id\n            endDate\n            reallocationTime\n            status\n            assignee {\n                id\n            }\n        }\n    }\n`\n\n// // Legacy\n// export const USER = gql`\n//     query User($id: String!) {\n//         user(id: $id) {\n//             id\n//             benefits\n//             available\n//         }\n//     }\n// `\n// // Legacy\n// export const USER_REJECTED_TASKS = gql`\n//     query User($id: String!) {\n//         user(id: $id) {\n//             rejectedTasks {\n//                 task {\n//                     id\n//                     endDate\n//                     reallocationTime\n//                     status\n//                 }\n//             }\n//         }\n//     }\n// `\n","import FCFS_CONTRACT from '../assets/abis/FCFSTAA'\nimport RR_CONTRACT_ABI from '../assets/abis/RoundRobinTAA'\nimport RR_CAL_CONTRACT_ABI from '../assets/abis/RoundRobinCalTAA'\nimport {\n    FCFS_USERS,\n    FCFS_USER,\n    FCFS_TASKS,\n    FCFS_TASKS_AVAILABLE,\n    FCFS_USER_TASKS_ACCEPTED,\n    RR_USERS,\n    RR_USER,\n    RR_TASKS,\n    RR_USER_TASKS_ASSIGNED,\n    RR_USER_TASKS_ACCEPTED,\n    RR_CAL_USER,\n} from '../queries/queries'\n\nconst models = [\n    {\n        name: 'fcfs',\n        displayName: 'First come first serve',\n        description:\n            'We are currently piloting a new way of distributing the tasks and therefore the value within our platform. Thank you for your collaboration! This model allocates the task to the first person to claim for it. Is the current model used in the oficial platform so it should be familiar. We use it as the reference to see the performance of the other models.',\n        contractAddress: process.env.REACT_APP_GOERLI_FCFS_CONTRACT_ADDRESS,\n        contractAbi: FCFS_CONTRACT.abi,\n        endpoint: process.env.REACT_APP_FCFS_SUBGRAPH_ENDPOINT,\n        requests: {\n            users: FCFS_USERS,\n            user: FCFS_USER,\n            tasks: FCFS_TASKS,\n            tasksAvailable: FCFS_TASKS_AVAILABLE,\n            tasksAccepted: FCFS_USER_TASKS_ACCEPTED,\n        },\n    },\n    {\n        name: 'rr',\n        displayName: 'Round robin',\n        description:\n            'We are currently piloting a new way of distributing the tasks and therefore the value within our platform. Thank you for your collaboration! This model gets each incoming task and assigns it to the first user in a list. The user then is moved to the end of the list. The user can accept or reject the task. Then they will need to wait until a new task is assigned to they.',\n        contractAddress: process.env.REACT_APP_GOERLI_RR_CONTRACT_ADDRESS,\n        contractAbi: RR_CONTRACT_ABI,\n        endpoint: process.env.REACT_APP_RR_SUBGRAPH_ENDPOINT,\n        requests: {\n            users: RR_USERS,\n            user: RR_USER,\n            tasks: RR_TASKS,\n            tasksAssigned: RR_USER_TASKS_ASSIGNED,\n            tasksAccepted: RR_USER_TASKS_ACCEPTED,\n        },\n    },\n    {\n        name: 'rr-cal',\n        displayName: 'Round robin with calendar',\n        description:\n            'We are currently piloting a new way of distributing the tasks and therefore the value within our platform. Thank you for your collaboration! This model gets each incoming task and assigns it to the first user in a list based in the users availability. The user then is moved to the end of the list. The user can accept or reject the task. Then they will need to wait until a new task is assigned to they.',\n        contractAddress: process.env.REACT_APP_GOERLI_RR_CAL_CONTRACT_ADDRESS,\n        contractAbi: RR_CAL_CONTRACT_ABI,\n        endpoint: process.env.REACT_APP_RR_CAL_SUBGRAPH_ENDPOINT,\n        requests: {\n            users: RR_USERS,\n            user: RR_CAL_USER,\n            tasks: RR_TASKS,\n            tasksAssigned: RR_USER_TASKS_ASSIGNED,\n            tasksAccepted: RR_USER_TASKS_ACCEPTED,\n        },\n    },\n]\n\nexport default models\n","// TODO: Build up app state\nimport React, {\n    createContext,\n    useState,\n    useEffect,\n    useMemo,\n    useContext,\n} from 'react'\nimport models from '../types/models'\nimport { useWeb3React } from '@web3-react/core'\n\n// import useUser from '../hooks/useUser'\n\nconst APP_NAME = process.env.REACT_APP_TASK_ALLOCATION_APP_NAME\n\n// Set Round Robin as default model\nconst DEFAULT_MODEL_INDEX = 1\n\nconst AppStateContext = createContext()\n\nexport function AppStateProvider({ children }) {\n    const [appName, setAppName] = useState(APP_NAME)\n    const { library: web3 } = useWeb3React()\n    const [modelName, setModelName] = useState(models[DEFAULT_MODEL_INDEX].name)\n    const [modelDisplayName, setModelDisplayName] = useState(\n        models[DEFAULT_MODEL_INDEX].displayName\n    )\n    const [contractAddress, setContractAddress] = useState(\n        models[DEFAULT_MODEL_INDEX].contractAddress\n    )\n    const [contractABI, setContractABI] = useState(\n        models[DEFAULT_MODEL_INDEX].contractAbi\n    )\n    const [endpoint, setEndpoint] = useState(\n        models[DEFAULT_MODEL_INDEX].endpoint\n    )\n    const [userId, setUserId] = useState()\n    const [modelContractInstance, setModelContractInstance] = useState()\n\n    const getContractInstance = (web3, abi, contractAddress) => {\n        if (web3 && abi) {\n            return new web3.eth.Contract(abi, contractAddress)\n        }\n    }\n\n    useEffect(() => {\n        if (web3 && contractABI && contractAddress) {\n            const instance = getContractInstance(\n                web3,\n                contractABI,\n                contractAddress\n            )\n            setModelContractInstance(instance)\n            console.log('[AppStateContext] Setting contract instance')\n            console.log(instance)\n        }\n    }, [web3, contractABI, contractAddress])\n\n    const setModel = name => {\n        let model = models.find(m => m.name === name)\n        if (model) {\n            console.log('Setting model')\n            console.log(model.contractAddress)\n            setModelName(model.name)\n            setModelDisplayName(model.displayName)\n            setContractAddress(model.contractAddress)\n            setContractABI(model.contractAbi)\n            setEndpoint(model.endpoint)\n        }\n    }\n\n    const setUser = userId => {\n        setUserId(userId)\n    }\n\n    const value = useMemo(() => {\n        return {\n            appName,\n            modelName,\n            modelDisplayName,\n            modelContractInstance,\n            contractAddress,\n            contractABI,\n            endpoint,\n            setModel,\n            userId,\n            setUser,\n        }\n    }, [modelContractInstance, contractAddress, endpoint, modelName])\n\n    return (\n        <AppStateContext.Provider value={value}>\n            {children}\n        </AppStateContext.Provider>\n    )\n}\n\nexport function useAppState() {\n    const context = useContext(AppStateContext)\n\n    if (!context) {\n        throw new Error('useAppState must be used within an AppStateProvider')\n    }\n\n    return context\n}\n","import React, { useEffect, useState } from 'react'\nimport {\n    ApolloClient,\n    createHttpLink,\n    InMemoryCache,\n    ApolloProvider,\n} from '@apollo/client'\nimport { useAppState } from './AppState'\n\nexport function BackendProvider(props) {\n    const { children } = props\n    const { endpoint } = useAppState()\n\n    const createClient = endpoint => {\n        const httpLink = createHttpLink({\n            uri: endpoint,\n        })\n\n        const client = new ApolloClient({\n            link: httpLink,\n            cache: new InMemoryCache(),\n        })\n\n        return client\n    }\n\n    return (\n        <ApolloProvider client={createClient(endpoint)}>\n            {children}\n        </ApolloProvider>\n    )\n}\n","export const ADMIN_ADDRESS = '0x27E9727FD9b8CdDdd0854F56712AD9DF647FaB74'\n// export const ADMIN_ADDRESS = '0xb4124cEB3451635DAcedd11767f004d8a28c6eE7'\n\nexport function getEditorLink(task) {\n  return `https://staging.amara.org/en/subtitles/editor/${task.video}/${task.language}/?team=${task.team}`\n}\n\nexport function getPriority(reallocationTime) {\n  switch (reallocationTime) {\n    case reallocationTime <= 5:\n      return 'high'\n    case reallocationTime > 5 <= 30:\n      return 'medium'\n    case reallocationTime > 30:\n      return 'low'\n    default:\n      return 'low'\n  }\n}\n","export const Actions = {\n    Restart: Symbol('RESTART_ACTION'),\n    RegisterUser: Symbol('REGISTER_USER_ACTION'),\n    CreateTask: Symbol('CREATE_TASK_ACTION'),\n    AcceptTask: Symbol('ACCEPT_TASK_ACTION'),\n    RejectTask: Symbol('REJECT_TASK_ACTION'),\n    SetUserCalendarRanges: Symbol('SET_USER_CALENDAR_RANGES_ACTION'),\n}\n\nconst symbolMapping = {\n    Restart: Actions.Restart,\n    RegisterUser: Actions.RegisterUser,\n    CreateTask: Actions.CreateTask,\n    Accept: Actions.AcceptTask,\n    Reject: Actions.RejectTask,\n    SetCalendarRanges: Actions.SetUserCalendarRanges,\n}\n\nconst stringMapping = {\n    [Actions.Restart]: 'restart',\n    [Actions.RegisterUser]: 'registerUser',\n    [Actions.CreateTask]: 'createTask',\n    [Actions.AcceptTask]: 'acceptTask',\n    [Actions.RejectTask]: 'rejectTask',\n    [Actions.SetUserCalendarRanges]: 'setUserCalendarRanges',\n}\n\nexport function convertFromString(str) {\n    return symbolMapping[str]\n}\n\nexport function convertToString(symbol) {\n    return stringMapping[symbol]\n}\n","import { Actions } from '../types/actions'\n\nconst { AcceptTask, RejectTask } = Actions\n\n// export function getTxStatus(type, allocatedTasks) {\nexport function getTxStatus(type) {\n    switch (type) {\n        case 'error':\n            return 'The transaction failed.'\n        case 'success':\n            // if (allocatedTasks > 0) {\n            //   return 'The transaction succeeded. Tasks assigned to you were reassigned to other users during the transaction.'\n            // } else {\n            //   return 'The transaction succeeded.'\n            // }\n            return 'The transaction succeeded.'\n        default:\n            return \"The transaction was sent. Wait until it's accepted. \"\n    }\n}\n\nexport function getTxAction(action) {\n    switch (action) {\n        case AcceptTask:\n            return 'Assignment Accepted'\n        case RejectTask:\n            return 'Assignment Rejected'\n        default:\n            return 'Assignment Processed'\n    }\n}\n","export function getResourceFromPathname(pathname, resourceName) {\n    const resources = pathname.split('/').filter(p => p.length)\n    const params = resources[resources.length-1].split('&').filter(p => p.length)\n\n    let value\n    params.forEach(p => {\n        if(p.includes(resourceName))\n            value = p.split('=')[1]\n    })\n\n    return value\n}\n\nexport function generateUrl(url, params) {\n    // If the url doesn't finish with / add it\n    let generatedUrl = url[url.length - 1] === '/' ? url : url + '/'\n    // Find each parameter and add if it doesn't exist or update it\n    params.forEach(p => {\n        if (p.key && p.value)\n            if (generatedUrl[generatedUrl.length - 1] === '/')\n                generatedUrl += p.key + '=' + p.value\n            else generatedUrl += '&' + p.key + '=' + p.value\n    })\n    return generatedUrl\n}\n","import { toChecksumAddress, toHex } from 'web3-utils'\n\nconst PRIVATE_KEY = process.env.REACT_APP_AMARA_PRIVATE_KEY\n\n/**\n * Creates a stateles transaction\n *\n * @param  {} web3\n * @param  {} tx\n * @param  {} handlers\n * @param  {} usePrivateKey=false\n */\nexport async function sendTransaction(\n    web3,\n    tx,\n    handlers,\n    usePrivateKey = false\n) {\n    try {\n        console.log('[sendTransaction] Tx')\n        let txObj\n        if (usePrivateKey) {\n            const { rawTransaction } = await web3.eth.accounts.signTransaction(\n                tx,\n                PRIVATE_KEY\n            )\n            console.log('[sendTransaction] Signed tx, sending...')\n            txObj = web3.eth.sendSignedTransaction(rawTransaction)\n        } else {\n            txObj = web3.eth.sendTransaction(tx)\n        }\n        txObj.on('transactionHash', hash => handlers.onTransactionHash(hash))\n        txObj.on('receipt', receipt => handlers.onReceipt(receipt))\n        txObj.on('error', err => handlers.onError(err))\n        return txObj\n    } catch (e) {\n        console.log(e)\n    }\n}\n\n// Every byte consists of two hex values hence 32 * 2 = 64.\n// And 0x + 64 = 66 values\nexport function toBytes32(text, totalLength = 66) {\n    const hexText = toHex(text)\n    const paddingSize = totalLength - hexText.length\n\n    if (paddingSize <= 0) return hexText\n\n    return hexText + Array(paddingSize).fill(0).join('')\n}\n\n/**\n * Shorten an Ethereum address. `charsLength` allows to change the number of\n * characters on both sides of the ellipsis.\n *\n * Examples:\n *   shortenAddress('0x19731977931271')    // 0x1973…1271\n *   shortenAddress('0x19731977931271', 2) // 0x19…71\n *   shortenAddress('0x197319')            // 0x197319 (already short enough)\n *\n * @param {string} address The address to shorten\n * @param {number} [charsLength=4] The number of characters to change on both sides of the ellipsis\n * @returns {string} The shortened address\n */\nexport function shortenAddress(address, charsLength = 4) {\n    const prefixLength = 2 // \"0x\"\n    if (!address) {\n        return ''\n    }\n    if (address.length < charsLength * 2 + prefixLength) {\n        return address\n    }\n    return (\n        address.slice(0, charsLength + prefixLength) +\n        '…' +\n        address.slice(-charsLength)\n    )\n}\n\n// Check address equality with checksums\nexport function addressesEqual(first, second) {\n    first = first && toChecksumAddress(first)\n    second = second && toChecksumAddress(second)\n    return first === second\n}\n\nexport function timestampToDate(timestamp) {\n    return new Date(timestamp * 1000)\n}\n\nexport { toHex, hexToUtf8, hexToAscii } from 'web3-utils'\n","import { hexToUtf8, timestampToDate } from './web3-helpers'\n\nexport function transformConfigData(config) {\n    return {\n        ...config,\n    }\n}\n\nexport function generateUserId(hexUserId, appAddress) {\n    return `appAddress:${appAddress}-userId:${hexUserId}`\n}\n\nexport function transformUserData(contractUser) {\n    if (contractUser.allocatedTasks && contractUser.acceptedTasks) {\n        const transformedAllocatedTasks = contractUser.allocatedTasks.map(t =>\n            transformTaskData(t)\n        )\n        const transformedAcceptedTasks = contractUser.acceptedTasks.map(t =>\n            transformTaskData(t)\n        )\n        return {\n            ...contractUser,\n            allocatedTasks: transformedAllocatedTasks,\n            acceptedTasks: transformedAcceptedTasks,\n        }\n    } else {\n        return {\n            ...contractUser,\n        }\n    }\n}\n\nexport function transformTaskData(task) {\n    if (task.endDate) {\n        return {\n            ...task,\n            endDate: timestampToDate(task.endDate),\n        }\n    }\n\n    return {\n        ...task,\n    }\n}\n\nexport function mergeUserData(contractUser, amaraUser) {\n    const { id: entityId, available, benefits } = contractUser\n    return {\n        ...amaraUser,\n        id: amaraUser.username,\n        entityId,\n        available,\n        benefits,\n    }\n}\n\nexport function mergeTaskData(contractTasks, amaraTasks) {\n    return contractTasks.map(cT => {\n        const amaraTask = amaraTasks.find(aT => aT.job_id === cT.id)\n\n        return {\n            contractData: { ...cT },\n            ...amaraTask,\n        }\n    })\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport {\n    transformTaskData,\n    generateUserId,\n} from '../helpers/data-transform-helpers'\nimport { useAppState } from '../contexts/AppState'\nimport { toBytes32 } from '../helpers/web3-helpers'\nimport { useQuery } from '@apollo/client'\nimport models from '../types/models'\n\nconst POLL_INTERVAL = 2000\n\nexport function useUsersQuery({ first, skip } = { first: 50, skip: 0 }) {\n    const { modelName } = useAppState()\n    const model = models.find(m => m.name === modelName)\n    const { data, loading, error, refetch } = useQuery(model.requests.users, {\n        variables: {\n            first,\n            skip,\n        },\n    })\n\n    if (error) console.log(error)\n\n    return { users: data ? data.users : null, refetch }\n}\n\nexport function useUserQuery(userId) {\n    const { modelName } = useAppState()\n    const model = models.find(m => m.name === modelName)\n    const { data, loading, error } = useQuery(model.requests.user, {\n        variables: {\n            id: userId,\n        },\n    })\n\n    if (error) console.log(error)\n\n    return data ? data.user : undefined\n}\n\nexport function useTasksQueryPolling({ first, skip } = { first: 50, skip: 0 }) {\n    const { modelName } = useAppState()\n    const model = models.find(m => m.name === modelName)\n    const { data, loading, error, refetch, stopPolling } = useQuery(\n        model.requests.tasks,\n        {\n            variables: {\n                first,\n                skip,\n            },\n            pollInterval: POLL_INTERVAL,\n            fetchPolicy: 'network-only',\n        }\n    )\n\n    if (error) {\n        stopPolling()\n        console.log(error)\n    }\n\n    return { tasks: data ? data.tasks : undefined, refetch }\n}\n\nexport function useAvailableTasksQueryPolling(\n    userId,\n    { first, skip } = { first: 50, skip: 0 }\n) {\n    const { modelName } = useAppState()\n    const model = models.find(m => m.name === modelName)\n    const { data, loading, error, stopPolling } = useQuery(\n        model.requests.tasksAvailable,\n        {\n            variables: {\n                userId,\n                first,\n                skip,\n            },\n            pollInterval: POLL_INTERVAL,\n            fetchPolicy: 'network-only',\n        }\n    )\n\n    if (error) {\n        stopPolling()\n        console.log(error)\n    }\n\n    return { contractTasks: data ? data.tasks : undefined, stopPolling }\n}\n\nexport function useAssignedTasksQueryPolling(\n    userId,\n    { first, skip } = { first: 50, skip: 0 }\n) {\n    const { modelName } = useAppState()\n    const model = models.find(m => m.name === modelName)\n    const { data, loading, error, stopPolling } = useQuery(\n        model.requests.tasksAssigned,\n        {\n            variables: {\n                userId,\n                first,\n                skip,\n            },\n            pollInterval: POLL_INTERVAL,\n            fetchPolicy: 'network-only',\n        }\n    )\n\n    if (error) {\n        stopPolling()\n        console.log(error)\n    }\n\n    return data ? data.tasks : undefined\n}\n\nexport function useTasksAcceptedByUserQueryPolling(\n    userId,\n    { first, skip } = { first: 50, skip: 0 }\n) {\n    // We had to change the logic from a fake subscription (aragon does this)\n    // to a query that uses polling\n    const { modelName } = useAppState()\n    const model = models.find(m => m.name === modelName)\n    const { data, loading, error, stopPolling } = useQuery(\n        model.requests.tasksAccepted,\n        {\n            variables: {\n                userId: userId,\n                first,\n                skip,\n            },\n            pollInterval: POLL_INTERVAL,\n        }\n    )\n\n    if (error) {\n        stopPolling()\n        console.log(error)\n    }\n\n    // If accepted tasks exist stop polling since it won't update\n    if (data && data.tasks.length > 0) {\n        stopPolling()\n    }\n\n    return data ? data.tasks.map(t => transformTaskData(t)) : undefined\n}\n","export function capitalizeFirstLetter(word) {\n  if (typeof word === 'string')\n    return word.charAt(0).toUpperCase() + word.slice(1)\n  else return ''\n}\n\nexport function getRandomElement(elements) {\n  return elements[Math.floor(Math.random() * elements.length)]\n}\n\nexport function buildMapById(elements, idField = 'id') {\n  return elements.reduce((map, currElement) => {\n    const id = currElement[idField]\n    map.set(id, currElement)\n    return map\n  }, new Map())\n}\n","/**\n * HTTP client\n */\n\nimport axios from 'axios'\n\nconst { REACT_APP_AMARA_STAGING_API } = process.env\n\nconst headers = { 'X-api-key': '' }\nconst ROOT = 'api'\nconst baseURL = `${REACT_APP_AMARA_STAGING_API}${ROOT}`\n\nconst instance = axios.create({\n  baseURL,\n  headers,\n})\n\nfunction getApiKeyHeader() {\n  return instance.defaults.headers['X-api-key']\n}\n\nfunction setApiKeyHeader(apiKey) {\n  instance.defaults.headers['X-api-key'] = apiKey\n}\n\nexport { instance, setApiKeyHeader, getApiKeyHeader }\n","import { instance } from './client'\n\nfunction flatQueryParams(queryParams) {\n  if (queryParams)\n    return Object.keys(queryParams).reduce((prevQueries, queryKey, index) => {\n      return `${prevQueries}${index > 0 ? '&' : ''}${queryKey}=${\n        queryParams[queryKey]\n      }`\n    }, '?')\n  return ''\n}\n\nfunction createBasicCRUDEndpoints(name) {\n  const endpoints = {}\n\n  endpoints.getAll = query => {\n    const formattedQuery = flatQueryParams(query)\n    return instance.get(`/${name}${formattedQuery}`)\n  }\n\n  endpoints.getOne = (id, query) => {\n    const formattedQuery = flatQueryParams(query)\n    return instance.get(`/${name}/${id}${formattedQuery}`)\n  }\n\n  endpoints.update = (id, modifiedEntity) =>\n    instance.post(`/${name}/${id}`, modifiedEntity)\n\n  endpoints.create = entity => instance.post(`/${name}`, entity)\n\n  return endpoints\n}\n\nconst AVAILALBLE_SUBTITLE_REQUESTS_QUERY = { work_status: 'needs-subtitler' }\nexport {\n  createBasicCRUDEndpoints,\n  flatQueryParams,\n  AVAILALBLE_SUBTITLE_REQUESTS_QUERY,\n}\n","import { instance } from './client/index'\nimport {\n  createBasicCRUDEndpoints,\n  flatQueryParams,\n  AVAILALBLE_SUBTITLE_REQUESTS_QUERY,\n} from './api-helper'\n\nconst RESOURCE = 'teams'\n\nconst Teams = {\n  ...createBasicCRUDEndpoints(RESOURCE),\n  getTeamTasks: team => instance.get(`/${RESOURCE}/${team}/tasks`),\n  getTeamSubtitleRequest: (team, subReqId, queryParams) => {\n    const path = `/${RESOURCE}/${team}/subtitle-requests/${subReqId}${flatQueryParams(\n      queryParams\n    )}`\n    return instance.get(path)\n  },\n  getAvailableTeamSubtitleRequests: (team, queryParams) => {\n    const path = `/${RESOURCE}/${team}/subtitle-requests/${flatQueryParams({\n      ...AVAILALBLE_SUBTITLE_REQUESTS_QUERY,\n      ...queryParams,\n    })}`\n    return instance.get(path)\n  },\n  updateSubtitleRequest: (team, jobId, subtitler) => {\n    const path = `/${RESOURCE}/${team}/subtitle-requests/${jobId}`\n    return instance.put(path, { subtitler })\n  },\n}\n\nexport default Teams\n","import { setApiKeyHeader, getApiKeyHeader } from './client'\nimport Teams from './Teams'\nimport Users from './Users'\nimport Videos from './Videos'\nimport Ratings from './Ratings'\n\nconst Api = {\n  teams: Teams,\n  users: Users,\n  videos: Videos,\n  ratings: Ratings,\n  setApiKeyHeader,\n  getApiKeyHeader,\n}\n\nexport default Api\n","import { instance } from './client/index'\nimport { createBasicCRUDEndpoints } from './api-helper'\n\nconst RESOURCE = 'users'\n\nconst Users = {\n  ...createBasicCRUDEndpoints(RESOURCE),\n\n  getDemoUsers: () => instance.get(`/${RESOURCE}/default`),\n\n  getUserTeams: username => instance.get(`/${RESOURCE}/${username}/teams`),\n}\n\nexport default Users\n","import { createBasicCRUDEndpoints } from './api-helper'\n\nconst RESOURCE = 'videos'\n\nconst Videos = {\n  ...createBasicCRUDEndpoints(RESOURCE),\n}\n\nexport default Videos\n","import { createBasicCRUDEndpoints } from './api-helper'\n\nconst RESOURCE = 'ratings'\n\nconst Ratings = {\n  ...createBasicCRUDEndpoints(RESOURCE),\n}\n\nexport default Ratings\n","import { useState, useEffect } from 'react'\nimport {\n    useUserQuery,\n    useAvailableTasksQueryPolling,\n    useTasksAcceptedByUserQueryPolling,\n} from './useRequests'\nimport { buildMapById } from '../helpers/general-helpers'\nimport AmaraApi from '../amara-api'\nimport { mergeTaskData } from '../helpers/data-transform-helpers'\n\nasync function getTasks(tasks, user) {\n    const { teams, apiKey } = user\n\n    if (teams && teams.length && tasks && tasks.length) {\n        const { name: teamName } = teams[0]\n\n        AmaraApi.setApiKeyHeader(apiKey)\n\n        const tasksRequests = tasks.map(({ id }) => {\n            return AmaraApi.teams.getTeamSubtitleRequest(teamName, id)\n        })\n\n        const responses = await Promise.all([...tasksRequests])\n        const amaraTasks = responses.map(({ data }) => data)\n        const transformedTasks = mergeTaskData(tasks, amaraTasks)\n\n        return transformedTasks\n    }\n\n    return []\n}\n\nfunction useUserLogicFCFS(userId) {\n    const contractUser = useUserQuery(userId)\n    const {\n        contractTasks,\n        stopPolling: stopTasksPolling,\n    } = useAvailableTasksQueryPolling()\n    const contractAcceptedTasks = useTasksAcceptedByUserQueryPolling(userId)\n    const [user, setUser] = useState()\n    const [tasks, setTasks] = useState()\n    const [acceptedTask, setAcceptedTask] = useState()\n    const [videosRegistry, setVideosRegistry] = useState(new Map())\n\n    // Fetch Amara user data\n    useEffect(() => {\n        let isMounted = true\n        async function buildUser(userId) {\n            try {\n                const amaraUserRes = await AmaraApi.users.getOne(userId)\n                const amaraUser = { ...amaraUserRes.data }\n                const user = { ...contractUser, ...amaraUser }\n                if (isMounted) setUser(user)\n            } catch (err) {\n                console.log(err)\n            }\n        }\n        buildUser(userId)\n        return () => {\n            isMounted = false\n        }\n    }, [userId, contractUser])\n\n    // Fetch team videos\n    useEffect(() => {\n        async function getTeamVideos(amaraUser) {\n            const { teams } = amaraUser\n            const {\n                data: { objects: videos },\n            } = await AmaraApi.videos.getAll({ team: teams[0].name })\n            const videosMap = buildMapById(videos)\n\n            setVideosRegistry(videosMap)\n        }\n        if (!user || !user.teams || !user.teams.length) {\n            return\n        }\n\n        getTeamVideos(user)\n\n        return () => {}\n    }, [user])\n\n    // Fetch tasks\n    useEffect(() => {\n        if (!user || !contractTasks) {\n            return\n        }\n        getTasks(contractTasks, user).then(mergedTasks => {\n            setTasks(mergedTasks)\n        })\n\n        return () => {}\n    }, [user, contractTasks])\n\n    // Fetch accepted task\n    useEffect(() => {\n        if (!user || !contractAcceptedTasks) {\n            return\n        }\n        if (\n            !acceptedTask ||\n            acceptedTask.contractData.id !== contractAcceptedTasks[0].id\n        ) {\n            getTasks(contractAcceptedTasks, user).then(mergedTasks => {\n                setAcceptedTask(mergedTasks[0] ? mergedTasks[0] : null)\n            })\n            stopTasksPolling()\n        }\n\n        return () => {}\n    }, [user, contractAcceptedTasks])\n\n    const loadingData =\n        !user || !videosRegistry || !tasks || acceptedTask === undefined\n\n    return {\n        user,\n        tasks,\n        acceptedTask: acceptedTask ? acceptedTask : null,\n        videosRegistry,\n        loading: loadingData,\n    }\n}\n\nexport default useUserLogicFCFS\n","import { useState } from 'react'\nconst PRIVATE_KEY = process.env.REACT_APP_AMARA_PRIVATE_KEY\n\nconst useTransaction = () => {\n    const [txHash, setTxHash] = useState()\n    const [receipt, setReceipt] = useState()\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState()\n\n    async function processTransaction(web3, tx, usePrivateKey = false) {\n        // console.log('Sending transaction!')\n        // console.log(tx)\n        if (usePrivateKey) {\n            const { rawTransaction } = await web3.eth.accounts.signTransaction(\n                tx,\n                PRIVATE_KEY\n            )\n            web3.eth\n                .sendSignedTransaction(rawTransaction)\n                .on('transactionHash', hash => {\n                    setTxHash(hash)\n                    setLoading(true)\n                })\n                .on('receipt', r => {\n                    setReceipt(r)\n                    setLoading(false)\n                })\n                .on('error', err => {\n                    setError(err)\n                    setLoading(false)\n                })\n        } else {\n            web3.eth\n                .sendTransaction(tx)\n                .on('transactionHash', hash => {\n                    setTxHash(hash)\n                    setLoading(true)\n                })\n                .on('receipt', r => {\n                    setReceipt(r)\n                    setLoading(false)\n                })\n                .on('error', err => {\n                    setError(err)\n                    setLoading(false)\n                })\n        }\n    }\n\n    return [\n        processTransaction,\n        {\n            data: {\n                txHash,\n                receipt,\n            },\n            loading,\n            error,\n        },\n    ]\n}\n\nexport default useTransaction\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppState } from '../contexts/AppState'\nimport { Actions } from '../types/actions'\nimport { toBytes32 } from '../helpers/web3-helpers'\nimport useTransaction from './useTransaction'\n\n// const GAS_LIMIT = 450000\nconst GAS_PRICE = 2000000000 // 2Gwei\nconst { AcceptTask } = Actions\n\nfunction useActions(onReportStatus) {\n    const { account, library: web3 } = useWeb3React()\n    const { contractAddress, modelContractInstance } = useAppState()\n    const [\n        processTransaction,\n        {\n            data: { txHash, receipt: txReceipt },\n            loading: txLoading,\n            error: txError,\n        },\n    ] = useTransaction()\n    const [currentAction, setCurrentAction] = useState()\n\n    useEffect(() => {\n        if (txHash && !txLoading && !txReceipt && !txError) {\n            onReportStatus('info', currentAction)\n        } else if (txHash && txLoading && !txError) {\n        } else if (txHash && !txLoading && txReceipt && !txError) {\n            onReportStatus('success', currentAction)\n            setCurrentAction(null)\n        } else if (txError) {\n            console.error(txError)\n            onReportStatus('error', currentAction)\n        }\n    }, [txHash, txReceipt, txLoading, txError])\n\n    /**\n     * Function that is triggered when a user\n     * confirms a transaction to acept a task\n     */\n    const acceptTask = useCallback(\n        (userId, taskId) => {\n            const hexUserId = toBytes32(userId)\n            const hexTaskId = toBytes32(taskId)\n\n            // console.log('[AcceptTask] params:')\n            // console.log(hexUserId)\n            // console.log(hexTaskId)\n\n            const acceptTaskTxParams = {\n                from: account,\n                to: contractAddress,\n                data: modelContractInstance.methods['acceptTask'](\n                    hexUserId,\n                    hexTaskId\n                ).encodeABI(),\n                // gas: GAS_LIMIT,\n                gasPrice: GAS_PRICE,\n            }\n\n            try {\n                processTransaction(web3, acceptTaskTxParams, false)\n                setCurrentAction(AcceptTask)\n            } catch (err) {\n                console.error('Could not create tx:', err)\n                onReportStatus('error', AcceptTask)\n            }\n        },\n        [web3, account, onReportStatus]\n    )\n\n    return {\n        acceptTask,\n    }\n}\n\nexport default useActions\n","import React from 'react'\nimport AmaraLogo from '../assets/Logo.svg'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  logoWrapper: {\n    position: 'relative',\n    margin: `${theme.spacing(1)}px 0`,\n    cursor: 'default',\n    userSelect: 'none',\n  },\n  subtitle: {\n    position: 'absolute',\n    top: theme.spacing(2.5),\n    left: theme.spacing(5.25),\n    color: theme.palette.secondary.light,\n  },\n}))\n\nconst Logo = () => {\n  const { logoWrapper, subtitle } = useStyles()\n  return (\n    <div>\n      <div className={logoWrapper}>\n        <img src={AmaraLogo} />\n        <Typography className={subtitle} variant=\"body1\">\n          assignments\n        </Typography>\n      </div>\n    </div>\n  )\n}\n\nexport default Logo\n","import { UnsupportedChainIdError } from '@web3-react/core'\nimport {\n    InjectedConnector,\n    NoEthereumProviderError,\n    UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector'\nimport MetamaskLogo from './assets/MetamaskLogo.png'\n\nexport const injected = new InjectedConnector({\n    supportedChainIds: [1, 4, 5],\n})\n\nexport const connectorsByName = {\n    Injected: {\n        name: 'Metamask',\n        logo: MetamaskLogo,\n        connector: injected,\n    },\n}\n\nexport function transformError(error) {\n    const err = { type: 'error' }\n    if (error instanceof NoEthereumProviderError) {\n        err.title = 'No Ethereum Provider'\n        err.msg =\n            'No Ethereum browser extension detected, install MetaMask on browser.'\n        err.displayComponent = 'modal'\n    } else if (error instanceof UnsupportedChainIdError) {\n        err.title = 'Wrong Network'\n        err.msg = \"You're connected to an unsupported network.\"\n        err.displayComponent = 'modal'\n    } else if (error instanceof UserRejectedRequestErrorInjected) {\n        err.msg =\n            'Please authorize this website to access your Ethereum account.'\n        err.displayComponent = 'snackbar'\n    } else {\n        console.error(error)\n        err.title = 'Unknown Error'\n        err.msg =\n            'An unknown error occurred. Check the console for more details.'\n        err.displayComponent = 'modal'\n    }\n    return err\n}\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { injected } from '../wallet-providers'\n\nfunction useEagerConnect() {\n    const { activate, active } = useWeb3React()\n\n    const [tried, setTried] = useState(false)\n\n    useEffect(() => {\n        console.log('[useEagerConnect] Trying to connect')\n        injected.isAuthorized().then(isAuthorized => {\n            if (isAuthorized) {\n                activate(injected, undefined, true).catch(() => {\n                    setTried(true)\n                })\n            } else {\n                setTried(true)\n            }\n        })\n    }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n        if (!tried && active) {\n            setTried(true)\n        }\n    }, [tried, active])\n\n    return [tried]\n}\n\nexport default useEagerConnect\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { injected } from '../wallet-providers'\n\nfunction useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect(() => {\n    const { ethereum } = window\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = chainId => {\n        console.log('chainChanged', chainId)\n        activate(injected)\n      }\n\n      const handleAccountsChanged = accounts => {\n        console.log('accountsChanged', accounts)\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n\n      // const handleNetworkChanged = networkId => {\n      //   console.log('networkChanged', networkId)\n      //   activate(injected)\n      // }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      // ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          // ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n\n    return () => {}\n  }, [active, error, suppress, activate])\n}\n\nexport default useInactiveListener\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n  Grid,\n  CircularProgress,\n  Dialog,\n  DialogContent,\n  IconButton,\n  DialogTitle,\n  Slide,\n  Typography,\n} from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\n\nimport { connectorsByName } from '../../wallet-providers'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  providerItem: {\n    cursor: ({ activating }) => (activating ? '' : 'pointer'),\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    opacity: ({ activating }) => (activating ? '0.5' : ''),\n    '&:hover': {\n      backgroundColor: ({ activating }) => (activating ? '' : '#F6F5F5'),\n      transition: 'background-color 0.3s',\n    },\n  },\n  dialogContent: {\n    display: 'flex',\n    alignContent: 'center',\n    justifyContent: 'center',\n    border: '1px solid yelllow',\n  },\n  providerTitle: {},\n  providerLogo: {\n    width: '30%',\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  activatingProgress: {\n    position: 'absolute',\n    top: '50%',\n    left: '45%',\n  },\n}))\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide {...props} direction=\"down\" timeout={500} ref={ref} />\n})\n\nconst ProvidersModal = ({ open, activating, onSelect, onClose }) => {\n  const { closeButton, activatingProgress } = useStyles()\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        // fullWidth={true}\n        // maxWidth=\"md\"\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={onClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">\n          <strong>Select an account provider</strong>\n          {onClose ? (\n            <IconButton\n              aria-label=\"close\"\n              className={closeButton}\n              onClick={onClose}\n            >\n              <CloseIcon />\n            </IconButton>\n          ) : null}\n        </DialogTitle>\n        <DialogContent>\n          <Grid container alignItems=\"center\" alignContent=\"center\">\n            {Object.keys(connectorsByName).map(key => {\n              const { name, logo, connector } = connectorsByName[key]\n              return (\n                <div key={key}>\n                  <ProviderItem\n                    name={name}\n                    logo={logo}\n                    activating={activating}\n                    onSelect={() => onSelect(connector)}\n                  />\n                  {activating && (\n                    <CircularProgress className={activatingProgress} />\n                  )}\n                </div>\n              )\n            })}\n          </Grid>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n\nconst ProviderItem = ({ logo, name, activating, onSelect }) => {\n  const { providerItem, providerLogo } = useStyles({ activating })\n\n  return (\n    <Grid item className={providerItem} onClick={onSelect}>\n      <img className={providerLogo} src={logo} />\n      <Typography color=\"primary\" variant=\"h5\">\n        {name}\n      </Typography>\n      Connect with your {name} account.\n    </Grid>\n  )\n}\n\nexport default ProvidersModal\n","import React from 'react'\nimport Blockies from 'react-blockies'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst PX_RATIO = typeof devicePixelRatio === 'undefined' ? 2 : devicePixelRatio\nconst BLOCKIES_SQUARES = 8 // commonly used to represent Ethereum addresses\nconst BASE_SCALE = 3\n\nconst useStyles = makeStyles(theme => ({\n  main: {\n    display: 'inline-flex',\n    verticalAlign: 'middle',\n    overflow: 'hidden',\n    width: ({ mainSize }) => mainSize,\n    height: ({ mainSize }) => mainSize,\n    borderRadius: ({ radius }) => radius,\n  },\n  blockiesOpacity: {\n    opacity: ({ soften }) => 1 - soften,\n  },\n  blockiesScaling: {\n    display: 'flex',\n    width: ({ scalingSize }) => scalingSize,\n    height: ({ scalingSize }) => scalingSize,\n    background: '#fff',\n  },\n}))\n\nconst Identicon = ({\n  address = '0xb4124cEB3451635DAcedd11767f004d8a28c6eE7',\n  scale = 1,\n  radius = 0,\n  soften = 0.3,\n}) => {\n  const blockiesScale = scale * BASE_SCALE\n  const { main, blockiesOpacity, blockiesScaling } = useStyles({\n    mainSize: BLOCKIES_SQUARES * blockiesScale,\n    scalingSize: BLOCKIES_SQUARES * blockiesScale * PX_RATIO,\n    radius,\n    soften,\n  })\n  return (\n    <div className={main}>\n      <div className={blockiesScaling}>\n        <div className={blockiesOpacity}>\n          <Blockies\n            seed={address.toLowerCase()}\n            size={BLOCKIES_SQUARES}\n            scale={blockiesScale * PX_RATIO}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Identicon\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { shortenAddress } from '../../helpers/web3-helpers'\nimport { capitalizeFirstLetter } from '../../helpers/general-helpers'\n\nimport { Typography } from '@material-ui/core'\nimport DoneIcon from '@material-ui/icons/Done'\n\nimport Identicon from '../Identicon'\n\nconst RADIUS = 4\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        overflow: 'hidden',\n        display: 'flex',\n        alignItems: 'center',\n        textAlign: 'left',\n        padding: theme.spacing(1),\n        // paddingLeft: ({ icon }) => (icon ? 0 : 1.5) * theme.spacing(1),\n        // paddingRight: ({ icon }) => (icon ? 0 : 1.5) * theme.spacing(1),\n        borderRadius: ({ radius }) => radius,\n    },\n    addressWrapper: {\n        overflow: 'hidden',\n        maxWidth: theme.spacing(8) * 2,\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        letterSpacing: 1,\n        marginBottom: 0,\n        '& p': {\n            fontSize: '16px',\n            lineHeight: '16px',\n        },\n    },\n    rightSection: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        maxHeight: '32px', // Identicon height\n        paddingLeft: theme.spacing(1),\n    },\n    connectionMessage: {\n        display: 'flex',\n        alignItems: 'center',\n        color: theme.palette.success.main,\n        '& span': {\n            fontSize: '12px',\n            lineHeight: '12px',\n        },\n        '& svg': {\n            fontSize: '1rem',\n            marginRight: '.1rem',\n        },\n    },\n}))\n\nconst IdentityBadge = ({ entity, network }) => {\n    const {\n        wrapper,\n        rightSection,\n        addressWrapper,\n        connectionMessage,\n    } = useStyles({\n        icon: true,\n        radius: RADIUS,\n    })\n    // TODO: Check if entity is a valid address\n    const shortAddress = shortenAddress(entity)\n    return (\n        <div className={wrapper}>\n            <div\n                css={`\n                    position: relative;\n                `}\n            >\n                <Identicon scale={1.3} radius={RADIUS} />\n            </div>\n            <div className={rightSection}>\n                <div className={addressWrapper}>\n                    <Typography variant=\"body1\">{shortAddress}</Typography>\n                </div>\n                <div className={connectionMessage}>\n                    <DoneIcon />\n                    <Typography variant=\"caption\">\n                        {/* {hasNetworkMismatch ? 'Wrong network' : connectionMessage} */}\n                        Connected to {capitalizeFirstLetter(network)}\n                    </Typography>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default IdentityBadge\n","import React from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport ErrorOutline from '@material-ui/icons/ErrorOutline'\nimport InfoOutlined from '@material-ui/icons/InfoOutlined'\nimport WarningOutlined from '@material-ui/icons/WarningOutlined'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  titleWrapper: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  modalTitle: {\n    marginLeft: theme.spacing(1),\n    color: ({ type }) =>\n      type === 'error'\n        ? theme.palette.secondary.light\n        : theme.palette.primary.light,\n  },\n}))\n\nfunction getIconType(messageType) {\n  switch (messageType.toLowerCase()) {\n    case 'error':\n      return <ErrorOutline color=\"secondary\" fontSize=\"large\" />\n    case 'warning':\n      return <WarningOutlined fontSize=\"large\" />\n    case 'info':\n      return <InfoOutlined color=\"primary\" fontSize=\"large\" />\n    default:\n      return null\n  }\n}\n\nconst MessageModal = ({\n  type,\n  title,\n  message,\n  showIcon = true,\n  open,\n  onClose,\n}) => {\n  const { titleWrapper, modalTitle, closeButton } = useStyles({ type })\n  const messageIcon = getIconType(type)\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <DialogTitle>\n        <div className={titleWrapper}>\n          {showIcon && messageIcon}\n          <span className={modalTitle}>{title}</span>\n        </div>\n        <IconButton\n          aria-label=\"close\"\n          className={closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText>{message}</DialogContentText>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default MessageModal\n","import React, { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport useEagerConnect from '../../hooks/useEagerConnect'\nimport useInactiveListener from '../../hooks/useInactiveListener'\nimport { getNetwork } from '../../networks'\nimport { transformError } from '../../wallet-providers'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Button } from '@material-ui/core'\n\n// import ExitToApp from '@material-ui/icons/ExitToApp'\n\nimport ProvidersModal from '../Modals/ProvidersModal'\nimport IdentityBadge from './IdentityBadge'\nimport MessageModal from '../Modals/MessageModal'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    disconnectButton: {\n        marginLeft: theme.spacing(1),\n    },\n}))\n\nconst AccountModule = () => {\n    const { wrapper, disconnectButton } = useStyles()\n    const web3React = useWeb3React()\n    const {\n        library,\n        connector,\n        account,\n        chainId,\n        activate,\n        deactivate,\n    } = web3React\n    const [activatingConnector, setActivatingConnector] = useState()\n    const [openModal, setOpenModal] = useState(false)\n    const [error, setError] = useState(undefined)\n    const networkName = !isNaN(chainId) ? getNetwork(chainId).name : ''\n    // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n    const [triedEager] = useEagerConnect()\n    // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n    useInactiveListener(!triedEager || !!activatingConnector)\n\n    const handleSelectProvider = currentConnector => {\n        if (!activatingConnector) {\n            setActivatingConnector(currentConnector)\n            /* Third function argument allows us to emit a promise\n      so we can catch it and close modal in case everything\n      went right */\n            activate(currentConnector, null, true).then(\n                () => {\n                    console.log('Connector has been activated')\n                    setOpenModal(false)\n                },\n                err => {\n                    console.log(err)\n                    setError(transformError(err))\n                    setActivatingConnector(undefined)\n                    setOpenModal(false)\n                }\n            )\n        }\n    }\n\n    useEffect(() => {\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    return (\n        <div className={wrapper}>\n            {account ? (\n                <React.Fragment>\n                    <IdentityBadge entity={account} network={networkName} />\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        size=\"small\"\n                        className={disconnectButton}\n                        onClick={() => deactivate()}\n                    >\n                        Disconnect\n                    </Button>\n                </React.Fragment>\n            ) : (\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => setOpenModal(true)}\n                >\n                    Connect Account\n                </Button>\n            )}\n\n            <ProvidersModal\n                open={openModal}\n                activating={!!activatingConnector}\n                onSelect={handleSelectProvider}\n                onClose={() => setOpenModal(false)}\n            />\n            <MessageModal\n                open={!!error}\n                type={error ? error.type : ''}\n                title={error ? error.title : ''}\n                message={error ? error.msg : ''}\n                onClose={() => setError(undefined)}\n            />\n        </div>\n    )\n}\n\nexport default AccountModule\n","import React from 'react'\nimport { AppBar,\n         Container\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport Logo from './Logo'\n\nimport AccountModule from '../components/AccountModule/AccountModule'\n\nconst useStyles = makeStyles(theme => ({\n  navBar: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  }\n}))\n\nconst NavBar = () => {\n  const { navBar, buttonWrapper } = useStyles()\n  return (\n    <AppBar color=\"default\" elevation={3}>\n      <Container maxWidth=\"xl\" className={navBar}>\n        <Logo />\n        <div>\n          <AccountModule />\n        </div>\n      </Container>\n    </AppBar>\n  )\n}\n\nexport default NavBar\n","import React from 'react'\nimport clsx from 'clsx'\nimport Link from '@material-ui/core/Link'\nimport { Box, Typography, makeStyles, Container } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n    flexRow: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    flexRowPT: {\n        display: 'flex',\n        flexDirection: 'row',\n        paddingTop: '1rem',\n    },\n    flexCol: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    footer: {\n        padding: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n        color: theme.palette.text.light,\n        position: 'relative',\n        zIndex: 1200\n    },\n    footerContent: {\n        justifyContent: 'space-between',\n        height: '100px',\n        '& p': {\n            fontSize: '14px',\n            fontWeight: 600\n        },\n    },\n    logos: {\n        maxWidth: '480px',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        '& img': {\n            padding: '0.1rem',\n            height: '100%',\n            width: 'auto',\n            marginRight: '1rem',\n        },\n    },\n    info: {\n        justifyContent: 'flex-end',\n        color: theme.palette.text.light,\n        textAlign: 'right',\n        '& div': {\n            padding: '1rem 0.5rem',\n        },\n        '& a': {\n            color: theme.palette.text.light,\n            textDecoration: 'underline',\n        },\n    },\n    githubIcon: {\n        '& img': {\n            width: theme.spacing(2),\n            height: theme.spacing(2),\n        }\n    },\n}))\n\nexport default function Footer() {\n    const {\n        flexRow,\n        flexRowPT,\n        flexCol,\n        footer,\n        footerContent,\n        logos,\n        info,\n        githubIcon,\n    } = useStyles()\n\n    return (\n        <div className={footer}>\n            <Container maxWidth=\"xl\" className={clsx(flexRow, footerContent)}>\n                <div className={flexCol}>\n                    <Typography>Experiment created by:</Typography>\n                    <div className={logos}>\n                        <img id=\"p2pmod\" src=\"./assets/p2p-logo.svg\" />\n                        <img id=\"amara\" src=\"./assets/Logo.svg\" />\n                    </div>\n                </div>\n                <Box className={clsx(flexRowPT, info)}>\n                    <Box className={flexCol}>\n                        <Link\n                            href=\"https://github.com/p2pmodels\"\n                            target=\"_blank\"\n                        >\n                            <i className={githubIcon}>\n                                <img src=\"./assets/ico-github.svg\" />\n                            </i>       \n                        </Link>\n                    </Box>\n                    <Box className={flexCol}>\n                        <span>Copyleft with credits</span>\n                    </Box>\n                </Box>\n            </Container>\n        </div>\n    )\n}\n","import React from 'react'\nimport { Grid, Paper, Typography, Fade, Box } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { ErrorOutline } from '@material-ui/icons'\n\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    padding: theme.spacing(3),\n  },\n  titleWrapper: {\n    color: theme.palette.error.light,\n  },\n}))\n\nconst ErrorPanel = ({ title, children }) => {\n  const { wrapper, titleWrapper } = useStyles()\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n      <Fade in={true}>\n        <Paper elevation={3} className={wrapper}>\n          <Grid container direction=\"column\">\n            <Grid\n              className={titleWrapper}\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              alignContent=\"center\"\n            >\n              <ErrorOutline style={{ fontSize: 50, marginRight: 5 }} />\n              <Typography variant=\"h4\">{title}</Typography>\n            </Grid>\n            {children}\n          </Grid>\n        </Paper>\n      </Fade>\n    </Box>\n  )\n}\n\nexport default ErrorPanel\n","import React from 'react'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ErrorPanel from './ErrorPanel'\nimport DownloadMetamask from '../../assets/DownloadMetamask.png'\n\nconst useStyles = makeStyles(theme => ({\n  imageWrapper: {\n    width: '25%',\n    height: '25%',\n  },\n  downloadImage: {\n    width: '100%',\n    height: '100%',\n    objectFit: 'contain',\n  },\n  link: {\n    color: 'inherit',\n  },\n}))\n\nconst NoMetamaskDetected = () => {\n  const { link, imageWrapper, downloadImage } = useStyles()\n  const metamaskLinkDescription = 'What is Metamask and why do I need it?'\n  const metamaskHelpGuideLink = 'https://decrypt.co/resources/metamask'\n  const metamaskDownloadLink = 'https://metamask.io/download.html'\n  return (\n    <ErrorPanel title=\"No Metamask plugin detected\">\n      <Grid item>\n        <Box mt={3} ml={1}>\n          <Typography variant=\"body1\">\n            You need to install <strong>Metamask</strong> on your browser before\n            using the prototype. Once you install it refresh the page.\n          </Typography>\n\n          <Typography variant=\"body1\">\n            <a\n              className={link}\n              href={metamaskHelpGuideLink}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {metamaskLinkDescription}\n            </a>\n          </Typography>\n        </Box>\n      </Grid>\n      <Grid container direction=\"row\" justify=\"flex-end\">\n        <Box className={imageWrapper} mt={2}>\n          <a\n            href={metamaskDownloadLink}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img\n              src={DownloadMetamask}\n              alt=\"Download metamask\"\n              className={downloadImage}\n            />\n          </a>\n        </Box>\n      </Grid>\n    </ErrorPanel>\n  )\n}\n\nexport default NoMetamaskDetected\n","import React from 'react'\nimport { Box, Container } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport NavBar from './NavBar'\nimport Footer from './Footer'\nimport NoMetamaskDetected from './ErrorPanels/NoMetamaskDetected'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        border: 'none',\n        marginTop: theme.mixins.toolbar.minHeight,\n        marginBottom: theme.spacing(4),\n        minHeight: 'calc(100vh - 286px)',\n    },\n}))\n\nconst MainView = ({ children }) => {\n    const { root } = useStyles()\n    const hasMetamask = window.ethereum\n\n    return (\n        <div>\n            <NavBar />\n            <Container maxWidth=\"xl\">\n                <Box className={root}>\n                    {hasMetamask ? children : <NoMetamaskDetected />}\n                </Box>\n            </Container>\n            <Footer />\n        </div>\n    )\n}\n\nexport default MainView\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Grid, Typography, Box, Fade } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        backgroundColor: theme.palette.background.secondary,\n        padding: theme.spacing(2, 0),\n        position: 'relative',\n        '&:before': {\n            content: \"''\",\n            display: 'block',\n            width: '200vw',\n            height: '100%',\n            position: 'absolute',\n            top: '0',\n            left: '-100vw',\n            backgroundColor: theme.palette.background.secondary,\n            zIndex: '-1',\n        },\n    },\n    title: {\n        fontSize: '24px',\n        lineHeight: '1.75rem',\n        fontWeight: 300,\n    },\n    description: {\n        fontSize: '14px',\n        lineHeight: '1.25rem',\n        fontWeight: 400,\n    },\n    textImgWrapper: {\n        position: 'relative',\n        height: '100%',\n        overflow: 'visible',\n        '& img': {\n            height: '140px',\n            width: 'auto',\n            // objectFit: 'cover',\n            position: 'absolute',\n            bottom: theme.spacing(-2),\n            left: '75%',\n        },\n    },\n    h100: {\n        height: '100%',\n    },\n}))\n\nexport default function Banner({ title, description, img, cta }) {\n    const classes = useStyles()\n\n    return (\n        <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            className={classes.root}\n        >\n            <Fade in={true} style={{ transitionDelay: '300ms' }}>\n                <Grid item lg={8} xl={6} className={classes.textImgWrapper}>\n                    <Grid container direction=\"row\" spacing={2}>\n                        <Grid item lg={8} xl={9}>\n                            <Grid\n                                container\n                                direction=\"column\"\n                                justify=\"flex-start\"\n                                className={classes.h100}\n                            >\n                                <Grid item mb={1}>\n                                    <Typography\n                                        variant=\"h2\"\n                                        className={classes.title}\n                                    >\n                                        {title}\n                                    </Typography>\n                                </Grid>\n                                <Grid item>\n                                    <Typography\n                                        variant=\"h5\"\n                                        className={classes.description}\n                                    >\n                                        {description}\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item lg={4} xl={3}>\n                            <img src={img} alt=\"Model description image\" />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Fade>\n            {cta ? (\n                <Fade in={true} style={{ transitionDelay: '500ms' }}>\n                    <Grid item lg={4} xl={6}>\n                        <Grid\n                            container\n                            direction=\"row\"\n                            justify=\"center\"\n                            alignItems=\"center\"\n                            className={classes.h100}\n                        >\n                            {cta}\n                        </Grid>\n                    </Grid>\n                </Fade>\n            ) : (\n                <></>\n            )}\n        </Grid>\n    )\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Box, Typography, Tooltip } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  videoTag: {\n    cursor: 'default',\n    overflow: 'hidden',\n    backgroundColor: 'black',\n    color: 'white',\n    opacity: 0.6,\n    padding: theme.spacing(0.7),\n    fontWeight: 'bold',\n  },\n}))\n\nfunction isEllipsisActivated(element) {\n  return (\n    element.offsetHeight < element.scrollHeight ||\n    element.offsetWidth < element.scrollWidth\n  )\n}\n\nconst VideoTag = ({ label, boxProps = {} }) => {\n  const { videoTag } = useStyles()\n  const typographyEl = useRef(null)\n  const [ellipsisActivated, setEllipsisActivated] = useState(false)\n\n  useEffect(() => {\n    if (isEllipsisActivated(typographyEl.current)) setEllipsisActivated(true)\n    return () => {}\n  }, [])\n\n  const innerComponent = (\n    <Box position=\"absolute\" {...boxProps}>\n      <Typography\n        ref={typographyEl}\n        className={videoTag}\n        variant=\"subtitle2\"\n        noWrap\n      >\n        {label}\n      </Typography>\n    </Box>\n  )\n  return ellipsisActivated ? (\n    <Tooltip arrow title={<Typography variant=\"subtitle2\">{label}</Typography>}>\n      {innerComponent}\n    </Tooltip>\n  ) : (\n    innerComponent\n  )\n}\n\nexport default VideoTag\n","export default {\n  af: 'Afrikaans',\n  'af-za': 'Afrikaans - South Africa',\n  ar: 'Arabic',\n  'ar-ae': 'Arabic - United Arab Emirates',\n  'ar-bh': 'Arabic - Bahrain',\n  'ar-dz': 'Arabic - Algeria',\n  'ar-eg': 'Arabic - Egypt',\n  'ar-iq': 'Arabic - Iraq',\n  'ar-jo': 'Arabic - Jordan',\n  'ar-kw': 'Arabic - Kuwait',\n  'ar-lb': 'Arabic - Lebanon',\n  'ar-ly': 'Arabic - Libya',\n  'ar-ma': 'Arabic - Morocco',\n  'ar-om': 'Arabic - Oman',\n  'ar-qa': 'Arabic - Qatar',\n  'ar-sa': 'Arabic - Saudi Arabia',\n  'ar-sy': 'Arabic - Syria',\n  'ar-tn': 'Arabic - Tunisia',\n  'ar-ye': 'Arabic - Yemen',\n  az: 'Azeri',\n  'az-az': 'Cyrl Azeri (Cyrillic) - Azerbaijan',\n  'az-az-latn': 'Azeri (Latin) - Azerbaijan',\n  be: 'Belarusian',\n  'be-by': 'Belarusian - Belarus',\n  bg: 'Bulgarian',\n  'bg-bg': 'Bulgarian - Bulgaria',\n  ca: 'Catalan',\n  'ca-es': 'Catalan - Catalan',\n  cs: 'Czech',\n  'cs-cz': 'Czech - Czech Republic',\n  da: 'Danish',\n  'da-dk': 'Danish - Denmark',\n  de: 'German',\n  'de-at': 'German - Austria',\n  'de-ch': 'German - Switzerland',\n  'de-de': 'German - Germany',\n  'de-li': 'German - Liechtenstein',\n  'de-lu': 'German - Luxembourg',\n  div: 'Dhivehi',\n  'div-mv': 'Dhivehi - Maldives',\n  el: 'Greek',\n  'el-gr': 'Greek - Greece',\n  en: 'English',\n  'en-au': 'English - Australia',\n  'en-bz': 'English - Belize',\n  'en-ca': 'English - Canada',\n  'en-cb': 'English - Caribbean',\n  'en-gb': 'English - United Kingdom',\n  'en-ie': 'English - Ireland',\n  'en-jm': 'English - Jamaica',\n  'en-nz': 'English - New Zealand',\n  'en-ph': 'English - Philippines',\n  'en-tt': 'English - Trinidad and Tobago',\n  'en-us': 'English - United States',\n  'en-za': '` English - South Africa',\n  'en-zw': 'English - Zimbabwe',\n  es: 'Spanish',\n  'es-ar': 'Spanish - Argentina',\n  'es-bo': 'Spanish - Bolivia',\n  'es-cle': 'Spanish - Chile',\n  'es-co': 'Spanish - Colombia',\n  'es-cr': 'Spanish - Costa Rica',\n  'es-do': 'Spanish - Dominican Republic',\n  'es-ec': 'Spanish - Ecuador',\n  'es-es': 'Spanish - Spain',\n  'es-gt': 'Spanish - Guatemala',\n  'es-hn': 'Spanish - Honduras',\n  'es-mx': 'Spanish - Mexico',\n  'es-ni': 'Spanish Spanish - Nicaragua',\n  'es-pa': 'Spanish - Panama',\n  'es-pe': 'Spanish - Peru',\n  'es-pr': 'Spanish - Puerto Rico',\n  'es-py': 'Spanish - Paraguay',\n  'es-sv': 'Spanish - El Salvador',\n  'es-uy': 'Spanish - Uruguay',\n  'es-ve': 'Spanish - Venezuela',\n  'es-419': 'Spanish - Latin America',\n  et: 'Estonian',\n  'et-ee': 'Estonian - Estonia',\n  eu: 'Basque',\n  'eu-es': 'Basque - Basque',\n  fa: 'Farsi',\n  'fa-ir': 'Farsi - Iran',\n  fi: 'Finnish',\n  'fi-fi': 'Finnish - Finland',\n  fo: 'Faroese',\n  'fo-fo': 'Faroese - Faroe Islands',\n  fr: 'French',\n  'fr-be': 'French - Belgium',\n  'fr-ca': 'French - Canada',\n  'fr-ch': 'French - Switzerland',\n  'fr-fr': 'French - France',\n  'fr-lu': 'French - Luxembourg',\n  'fr-mc': 'French - Monaco',\n  gl: 'Galician',\n  'gl-es': 'Galician - Galician',\n  gu: 'Gujarati',\n  'gu-in': 'Gujarati - India',\n  he: 'Hebrew',\n  'he-il': 'Hebrew - Israel',\n  hi: 'Hindi',\n  'hi-in': 'Hindi - India',\n  hr: 'Croatian',\n  'hr-hr': 'Croatian - Croatia',\n  hu: 'Hungarian',\n  'hu-hu': 'Hungarian - Hungary',\n  hy: 'Armenian',\n  'hy-am': 'Armenian - Armenia',\n  id: 'Indonesian',\n  'id-id': 'Indonesian - Indonesia',\n  is: 'Icelandic',\n  'is-is': 'Icelandic - Iceland',\n  it: 'Italian',\n  'it-ch': 'Italian Italian - Switzerland',\n  'it-it': 'Italian - Italy',\n  ja: 'Japanese',\n  'ja-jp': 'Japanese - Japan',\n  ka: 'Georgian',\n  'ka-ge': 'Georgian - Georgia',\n  kk: 'Kazakh',\n  'kk-kz': 'Kazakh - Kazakhstan',\n  kn: 'Kannada',\n  'kn-in': 'Kannada - India',\n  ko: 'Korean',\n  kok: 'Konkani',\n  'kok-in': 'Konkani - India',\n  'ko-kr': 'Korean - Korea',\n  ky: 'Kyrgyz',\n  'ky-kg': 'Kyrgyz - Kyrgyzstan',\n  lt: 'Lithuanian',\n  'lt-lt': 'Lithuanian - Lithuania',\n  lv: 'Latvian',\n  'lv-lv': 'Latvian - Latvia',\n  mk: 'Macedonian',\n  'mk-mk': 'Macedonian - Former Yugoslav Republic of',\n  '': 'Macedonia',\n  mn: 'Mongolian',\n  'mn-mn': 'Mongolian - Mongolia',\n  mr: 'Marathi',\n  'mr-in': 'Marathi - India',\n  ms: 'Malay',\n  'ms-bn': 'Malay - Brunei',\n  'ms-my': 'Malay - Malaysia',\n  'nb-no': 'Norwegian (Bokm?l) - Norway',\n  nl: 'Dutch',\n  'nl-be': 'Dutch - Belgium',\n  'nl-nl': 'Dutch - The Netherlands',\n  'nn-no': 'Norwegian (Nynorsk) - Norway',\n  no: 'Norwegian',\n  pa: 'Punjabi',\n  'pa-in': 'Punjabi - India',\n  pl: 'Polish',\n  'pl-pl': 'Polish - Poland',\n  pt: 'Portuguese',\n  'pt-br': 'Portuguese - Brazil',\n  'pt-pt': 'Portuguese - Portugal',\n  ro: 'Romanian',\n  'ro-ro': 'Romanian - Romania',\n  ru: 'Russian',\n  'ru-ru': 'Russian - Russia',\n  sa: 'Sanskrit',\n  'sa-in': 'Sanskrit - India',\n  sk: 'Slovak',\n  'sk-sk': 'Slovak - Slovakia',\n  sl: 'Slovenian',\n  'sl-si': 'Slovenian - Slovenia',\n  sq: 'Albanian',\n  'sq-al': 'Albanian - Albania',\n  'sr-sp-cyrl': 'Serbian (Cyrillic) - Serbia',\n  'sr-sp-latn': 'Serbian (Latin) - Serbia',\n  sv: 'Swedish',\n  'sv-fi': 'Swedish - Finland',\n  'sv-se': 'Swedish - Sweden',\n  sw: 'Swahili',\n  'sw-ke': 'Swahili - Kenya',\n  syr: 'Syriac',\n  'syr-sy': 'Syriac - Syria',\n  ta: 'Tamil',\n  'ta-in': 'Tamil - India',\n  te: 'Telugu',\n  'te-in': 'Telugu - India',\n  th: 'Thai',\n  'th-th': 'Thai - Thailand',\n  tr: 'Turkish',\n  'tr-tr': 'Turkish - Turkey',\n  tt: 'Tatar',\n  'tt-ru': 'Tatar - Russia',\n  uk: 'Ukrainian',\n  'uk-ua': 'Ukrainian - Ukraine',\n  ur: 'Urdu',\n  'ur-pk': 'Urdu - Pakistan',\n  uz: 'Uzbek',\n  'uz-uz-cyrl': 'Uzbek (Cyrillic) - Uzbekistan',\n  'uz-uz-latn': 'Uzbek (Latin) - Uzbekistan',\n  vi: 'Vietnamese',\n  'zh-cht': 'Chinese (Traditional)',\n  'zh-chs': 'Chinese (Simplified)',\n  'zh-cn': 'Chinese - China',\n  'zh-hk': 'Chinese - Hong Kong SAR',\n  'zh-mo': 'Chinese - Macao SAR',\n  'zh-sg': 'Chinese - Singapore',\n  'zh-tw': 'Chinese - Taiwan',\n}\n","import React from 'react'\nimport { Box, CardMedia } from '@material-ui/core'\nimport PlayArrow from '@material-ui/icons/PlayArrow'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { green } from '@material-ui/core/colors'\n\nimport VideoTag from './VideoTag'\nimport NoThumbnail from '../../../../assets/NoThumbnail.jpg'\nimport NoVideo from '../../../../assets/NoVideo.png'\n\nimport languageCodes from '../../../../language-codes'\n\nconst useStyles = makeStyles(theme => ({\n    imageWrapper: {\n        width: '150px',\n        height: '150px',\n    },\n    media: {\n        height: 0,\n        paddingTop: '56.25%', // 16:9\n    },\n    playButton: {\n        position: 'absolute',\n        cursor: 'pointer',\n        top: '50%',\n        left: '50%',\n        fontSize: 80,\n        color: green.A700,\n        transition: 'transform 0.2s',\n        transform: 'translate(-50%, -50%)',\n        '&:hover': {\n            transform: 'scale(1.1) translate(-50%, -50%)',\n        },\n    },\n}))\n\nconst Thumbnail = ({ video = {}, targetLanguage, onClickHandler }) => {\n    const { media, playButton } = useStyles()\n    const { thumbnail, duration, title, all_urls: allUrls } = video\n\n    const minutes = Math.floor(duration / 60)\n    const seconds = duration % 60\n    const timeDuration = `${minutes}:${seconds < 10 ? `0${seconds}` : seconds}`\n\n    return (\n        <Box position=\"relative\" onClick={onClickHandler}>\n            {Object.keys(video).length > 0 ? (\n                <React.Fragment>\n                    <VideoTag\n                        label={languageCodes[targetLanguage]}\n                        boxProps={{ top: 0, left: 0, maxWidth: 1 / 2 }}\n                    />\n                    <VideoTag\n                        label={timeDuration}\n                        boxProps={{ top: 0, right: 0 }}\n                    />\n                    <CardMedia\n                        className={media}\n                        image={thumbnail || NoThumbnail}\n                    >\n                        <a\n                            href={allUrls ? allUrls[0] : '#'}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <PlayArrow className={playButton} />\n                        </a>\n                    </CardMedia>\n                    {/* maxWidth = 1 so noWrap works */}\n                    <VideoTag\n                        label={title}\n                        boxProps={{ left: 0, bottom: 0, maxWidth: 1 }}\n                    />\n                </React.Fragment>\n            ) : (\n                <CardMedia className={media} image={NoVideo} />\n            )}\n        </Box>\n    )\n}\n\nexport default Thumbnail\n","import React from 'react'\nimport dayjs from 'dayjs'\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport { Box, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport languageCodes from '../../../language-codes'\n\ndayjs.extend(relativeTime)\n\nconst useStyles = makeStyles(theme => ({\n  detailText: {\n    fontSize: 12,\n    marginBottom: theme.spacing(.5)\n  },\n  detailWrapper: {\n    fontSize: 13,\n    display: '-webkit-box',\n    WebkitLineClamp: 2,\n    WebkitBoxOrient: 'vertical',\n    overflow: 'hidden',\n  },\n}))\n\nconst Details = ({ task, video = {} }) => {\n  const { detailText } = useStyles()\n  const { due_date } = task\n  const {\n    title,\n    languages,\n    team,\n    primary_audio_language_code: audioLanguageCode,\n  } = video\n  const subLanguages = languages\n    ? languages\n        .filter(({ published }) => published)\n        .map(({ name }) => name.replace(',', ' -'))\n    : null\n  const formattedSubLanguages =\n    !subLanguages || subLanguages.length === 0\n      ? `No subtitles published`\n      : subLanguages.length === 1\n      ? `${subLanguages[0]}`\n      : `${subLanguages.slice(0, -1).join(', ')} and ${subLanguages.slice(-1)}`\n  const dueDate = dayjs(due_date).isValid()\n    ? `${dayjs(due_date).format('YYYY-MM-DD HH:mm')} \n    (${dayjs().to(due_date)})`\n    : `No due date`\n\n  return (\n    <Box>\n      <Typography className={detailText} variant=\"body1\" color=\"textSecondary\" gutterBottom>\n        DETAILS\n      </Typography>\n      <Detail name=\"Team\" value={team} />\n      <Detail name=\"Source team\" value={team} />\n      <Detail name=\"Video\" value={title} />\n      <Detail\n        name=\"Video language\"\n        value={audioLanguageCode && languageCodes[audioLanguageCode]}\n      />\n      <Detail name=\"Subtitle language\" value={formattedSubLanguages} />\n      <Detail name=\"Request due date\" value={dueDate} />\n      {/* <Detail name=\"Guidelines\" /> */}\n    </Box>\n  )\n}\n\nconst Detail = ({ name, value }) => {\n  const { detailWrapper } = useStyles()\n  return (\n    <Box>\n      <Typography className={detailWrapper} variant=\"body2\" gutterBottom>\n        <strong>{name}: </strong>\n        {value || 'No Available'}\n      </Typography>\n    </Box>\n  )\n}\n\nexport default Details\n","import { useEffect, useCallback, useRef } from 'react'\n\nconst useAnimationFrame = (interval = 1000, callback) => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const requestRef = useRef()\n  const previousTimeRef = useRef()\n  const accumulatedTime = useRef()\n  const stopSignalRef = useRef(false)\n\n  const animate = useCallback(\n    time => {\n      if(stopSignalRef.current) return\n      if (previousTimeRef.current !== undefined) {\n        const deltaTime = time - previousTimeRef.current\n\n        accumulatedTime.current += deltaTime\n        if (accumulatedTime.current > interval) {\n          callback(accumulatedTime.current)\n          accumulatedTime.current = 0\n          \n        }\n      } else accumulatedTime.current = 0\n      previousTimeRef.current = time\n      requestRef.current = requestAnimationFrame(animate)\n    },\n    [callback, interval]\n  )\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate)\n  }, [animate]) // Make sure the effect runs only once\n\n  const cancelAnimation = () => {\n    cancelAnimationFrame(requestRef.current)\n    stopSignalRef.current = true\n  }\n  return cancelAnimation\n}\n\nexport default useAnimationFrame\n","import dayjs from 'dayjs'\n\nconst UNITS = [\n    ['years', 'year'],\n    ['months', 'month'],\n    ['days', 'day'],\n    ['hours', 'hour'],\n    ['minutes', 'minute'],\n    ['seconds', 'second'],\n]\n\nconst DEFAULT_UNITS = ['years', 'months', 'days', 'hours', 'minutes', 'seconds']\n\n// Return the difference between two dates, per unit.\n// Set `units` to get specific units only, e.g. ['minutes', 'seconds']\n// If `units` is not set, all the units are enabled.\nexport const difference = (date1, date2, options = {}) => {\n    const units = options.units || DEFAULT_UNITS\n    const maxUnits = options.maxUnits || -1\n    const keepLeadingZeros =\n        (maxUnits === -1 && options.keepLeadingZeros) || false\n\n    const start = date2 > date1 ? date1 : date2\n\n    const getRightMostUnitIndex = () =>\n        [...UNITS].reverse().find(([unit]) => units.includes(unit))[0]\n\n    return UNITS.reduce(\n        (result, [name, unitName], index) => {\n            result[name] = null\n\n            // fill the current unit, subtract the difference from the remaining\n            if (\n                (maxUnits === -1 || result.remainingUnits > 0) &&\n                units.includes(name)\n            ) {\n                result[name] = result.remaining.diff(start, unitName)\n                result.remaining = result.remaining.subtract(\n                    result[name],\n                    unitName\n                )\n            }\n\n            // remove leading zeros\n            if (!keepLeadingZeros && !result.seenNonZero) {\n                if (result[name] === 0) {\n                    result[name] = null\n                } else {\n                    result.seenNonZero = true\n                }\n            }\n\n            // enforce the maxUnits option\n            if (result.remainingUnits > 0 && result.seenNonZero) {\n                result.remainingUnits -= 1\n            }\n\n            // last iteration\n            if (index === UNITS.length - 1) {\n                delete result.remaining\n                delete result.remainingUnits\n                delete result.seenNonZero\n\n                // include at least one 0\n                if (Object.values(result).every(val => val === null)) {\n                    result[getRightMostUnitIndex()] = 0\n                }\n            }\n\n            return result\n        },\n        {\n            remaining: dayjs(start === date1 ? date2 : date1),\n            remainingUnits: maxUnits,\n            seenNonZero: false,\n        }\n    )\n}\n\nexport const formatHtmlDatetime = date => dayjs(date).toISOString()\n","export const unselectable = () => ({\n  WebkitTouchCallout: 'none',\n  WebkitUserSelect: 'none',\n  MozUserSelect: 'none',\n  msUserSelect: 'none',\n  userSelect: 'none',\n})\n\nexport function lightenDarkenColor(col, amt) {\n  let usePound = false\n\n  if (col[0] === '#') {\n    col = col.slice(1)\n    usePound = true\n  }\n\n  const num = parseInt(col, 16)\n  let r = (num >> 16) + amt\n\n  if (r > 255) r = 255\n  else if (r < 0) r = 0\n\n  let b = ((num >> 8) & 0x00ff) + amt\n\n  if (b > 255) b = 255\n  else if (b < 0) b = 0\n\n  let g = (num & 0x0000ff) + amt\n\n  if (g > 255) g = 255\n  else if (g < 0) g = 0\n\n  return (usePound ? '#' : '') + (g | (b << 8) | (r << 16)).toString(16)\n}\n","import React, { useState, useCallback, useMemo, useRef, useEffect } from 'react'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport dayjs from 'dayjs'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport AccessTimeIcon from '@material-ui/icons/AccessTime'\nimport { Box, Typography, Grid } from '@material-ui/core'\nimport useAnimationFrame from '../../../hooks/useAnimationFrame'\nimport { difference, formatHtmlDatetime } from '../../../helpers/date-helpers'\nimport { unselectable } from '../../../helpers/css-helpers'\n\nconst useStyles = makeStyles(theme => ({\n    timer: {\n        whiteSpace: 'nowrap',\n        ...unselectable(),\n    },\n    clockIconWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n        marginTop: theme.spacing(0.1),\n    },\n    timeTextWrapper: {\n        padding: '0 0 0 .25rem',\n    },\n    timeText: {\n        fontSize: 12,\n    },\n    timeUnit: {\n        display: 'inline-flex',\n        alignItems: 'baseline',\n        // justifyContent: 'space-between',\n        minWidth: 31,\n    },\n    separator: {\n        marginTop: 0,\n        marginRight: theme.spacing(0.3),\n        marginLeft: theme.spacing(0.3),\n        fontWeight: 400,\n    },\n}))\n\nconst RENDER_EVERY = 1000\n\nconst formatUnit = v => String(v).padStart(2, '0')\n\nconst formats = {\n    yMdhms: 'yMdhms',\n    yMdhm: 'yMdhm',\n    yMdh: 'yMdh',\n    yMd: 'yMd',\n    yM: 'yM',\n    Mdhms: 'Mdhms',\n    Mdhm: 'Mdhm',\n    Mdh: 'Mdh',\n    Md: 'Md',\n    dhms: 'dhms',\n    dhm: 'dhm',\n    hms: 'hms',\n    hm: 'hm',\n    ms: 'ms',\n    m: 'm',\n    s: 's',\n}\n\nconst unitNames = {\n    y: 'years',\n    M: 'months',\n    d: 'days',\n    h: 'hours',\n    m: 'minutes',\n    s: 'seconds',\n}\n\nconst getFormat = format =>\n    ['y', 'M', 'd', 'h', 'm', 's'].reduce(\n        (units, symbol) =>\n            formats[format].includes(symbol)\n                ? [...units, unitNames[symbol]]\n                : units,\n        []\n    )\n\nfunction getTime(start, end, format, showEmpty, maxUnits) {\n    const date1 = end || new Date()\n    const date2 = end ? new Date() : start\n\n    const totalInSeconds = dayjs(date1).diff(date2, 'seconds')\n\n    const { years, months, days, hours, minutes, seconds } = difference(\n        date1,\n        date2,\n        { keepLeadingZeros: showEmpty, maxUnits, units: format }\n    )\n\n    return {\n        units: [\n            ['Y', years],\n            ['M', months],\n            ['D', days],\n            ['H', hours],\n            ['M', minutes],\n            ['S', seconds],\n        ],\n        totalInSeconds,\n    }\n}\n\nconst Timer = ({\n    start,\n    end,\n    format = formats.hms,\n    showEmpty = false,\n    maxUnits = -1,\n    showIcon = true,\n    onTimeOut = () => {},\n}) => {\n    const {\n        timer,\n        clockIconWrapper,\n        timeUnit,\n        separator,\n        timeTextWrapper,\n        timeText,\n    } = useStyles()\n    const theme = useTheme()\n    // Need to check if component is mounted to update timer\n    const isMountedRef = useRef(false)\n    const computedFormat = useMemo(() => getFormat(format), [format])\n    const [time, setTime] = useState(\n        getTime(start, end, computedFormat, showEmpty, maxUnits)\n    )\n    const { totalInSeconds, units } = time\n    const lastUnitIndex = units.reduce(\n        (lastIndex, unit, index) => (unit[1] === null ? lastIndex : index),\n        0\n    )\n\n    const updateTime = useCallback(() => {\n        const t = getTime(start, end, computedFormat, showEmpty, maxUnits)\n        if (t.totalInSeconds === 0) {\n            onTimeOut()\n        }\n        if (isMountedRef.current) {\n            setTime(t)\n        }\n    }, [start, end, computedFormat, showEmpty, maxUnits, onTimeOut])\n\n    const cancelAnimation = useAnimationFrame(RENDER_EVERY, updateTime)\n    \n    useEffect(() => {\n        isMountedRef.current = true\n        return () => {\n            isMountedRef.current = false\n            cancelAnimation()\n        }\n    }, [])\n\n    if (totalInSeconds < 0 || Object.is(totalInSeconds, -0)) {\n        return <Typography variant=\"body2\">{end ? 'Time out' : '−'}</Typography>\n    }\n\n    return (\n        <time className={timer} dateTime={formatHtmlDatetime(end || start)}>\n            <Grid\n                container\n                direction=\"row\"\n                alignItems=\"center\"\n                justify=\"center\"\n            >\n                <Grid item>\n                    {showIcon && (\n                        <span className={clockIconWrapper}>\n                            <AccessTimeIcon\n                                style={{\n                                    fontSize: 20,\n                                }}\n                            />\n                        </span>\n                    )}\n                </Grid>\n                <Grid item className={timeTextWrapper}>\n                    <Typography variant=\"subtitle1\">\n                        {units.map((unit, index) => {\n                            const isLast = index === lastUnitIndex\n                            const isSeconds = index === units.length - 1\n\n                            // Only time units (hours, minutes and seconds).\n                            // Remember to update if ms gets added one day!\n                            const isTimeUnit = index >= units.length - 3\n\n                            if (unit[1] === null) {\n                                return null\n                            }\n\n                            return (\n                                <React.Fragment key={index}>\n                                    <span\n                                        className={\n                                            isSeconds\n                                                ? clsx(timeText, timeUnit)\n                                                : timeText\n                                        }\n                                    >\n                                        {formatUnit(unit[1])}\n                                        <Box component=\"span\" ml={0.2}>\n                                            {unit[0]}\n                                        </Box>\n                                    </span>\n                                    {!isLast && (\n                                        <span className={separator}>\n                                            {isTimeUnit && ':'}\n                                        </span>\n                                    )}\n                                </React.Fragment>\n                            )\n                        })}\n                    </Typography>\n                </Grid>\n            </Grid>\n        </time>\n    )\n}\n\nTimer.propTypes = {\n    start: PropTypes.instanceOf(Date),\n    end: PropTypes.instanceOf(Date),\n    format: PropTypes.oneOf(Object.keys(formats)),\n    showEmpty: PropTypes.bool,\n    maxUnits: PropTypes.number,\n    showIcon: PropTypes.bool,\n}\n\nexport default Timer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { lightenDarkenColor } from '../../helpers/css-helpers'\n\nconst useStyles = makeStyles(() => ({\n    actionButton: {\n        background: ({ color }) => color,\n        color: 'white',\n        fontWeight: 'bold',\n        borderRadius: 0,\n        '&:hover': {\n            backgroundColor: ({ hoverColor }) => hoverColor,\n        },\n    },\n}))\n\nfunction ActionButton({\n    label,\n    color,\n    variant,\n    fullWidth = false,\n    disabled = false,\n    onClick,\n    ...props\n}) {\n    const { actionButton } = useStyles({\n        color: color,\n        hoverColor: lightenDarkenColor(color, -20),\n    })\n\n    return (\n        <Button\n            variant={variant}\n            className={actionButton}\n            onClick={onClick}\n            fullWidth={fullWidth}\n            disabled={disabled}\n            {...props}\n        >\n            {label}\n        </Button>\n    )\n}\n\nActionButton.propTypes = {\n    label: PropTypes.string,\n    color: PropTypes.string,\n}\n\nexport default ActionButton\n","import React, { useState, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { Box, Card, Grid, Chip, CardContent } from '@material-ui/core'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\n\nimport { getPriority } from '../../../helpers/amara-helpers'\nimport Thumbnail from './Thumbnail/Thumbnail'\nimport Details from './Details'\nimport Timer from './Timer'\nimport ActionButton from '../../Buttons/ActionButton'\nimport { useAppState } from '../../../contexts/AppState'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        minWidth: 280,\n    },\n    chip: {\n        backgroundColor: ({ priorityColor }) => priorityColor,\n    },\n    cardContent: {\n        padding: 0,\n        paddingTop: theme.spacing(2),\n    },\n}))\n\nconst TaskCard = ({\n    task,\n    video,\n    actionButtons = [],\n    onTaskTimeout = () => {},\n}) => {\n    // TODO: Need to set a priority field on contract task struct\n    const { endDate, reallocationTime } = task.contractData\n    const priority = getPriority(reallocationTime)\n    const theme = useTheme()\n    const { palette } = theme\n    const { root, chip, cardContent, timer } = useStyles({\n        priorityColor: palette.chips[priority],\n    })\n    // Show timer only if task has end date and is not already accepted\n    const showTimer =\n        !(\n            actionButtons.length === 1 &&\n            actionButtons[0].label.toLowerCase() === 'translate'\n        ) && task.contractData.endDate\n\n    let nowString = new Date(Date.now() + 1999).toLocaleTimeString()\n    let endTimeString = new Date(task.contractData.endDate * 1000 ).toLocaleTimeString()\n\n    // If timed out dont render, substract 1s to make sure,timer is not reliable\n    if(task.contractData.endDate * 1000 <= Date.now() + 1999) return null\n    \n    return (\n        <Card className={root} elevation={0}>\n            <Box mb={0.5} pt={1}>\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify={!showTimer ? 'flex-end' : 'space-between'}\n                    alignItems=\"center\"\n                >\n                    {!showTimer ? null : (\n                        <Grid item>\n                            <Timer\n                                end={new Date(endDate * 1000)}\n                                onTimeOut={() => {\n                                    console.log(`        ${task.contractData.id} I'm substractiing!`)\n                                    onTaskTimeout()\n                                }}\n                            />\n                        </Grid>\n                    )}\n                    <Grid item>\n                        <Chip\n                            className={chip}\n                            color=\"secondary\"\n                            label={<strong>{priority} priority</strong>}\n                        />\n                    </Grid>\n                </Grid>\n            </Box>\n            <Thumbnail video={video} targetLanguage={task.language} />\n            <CardContent className={cardContent}>\n                <Details task={task} video={video} />\n                <Box\n                    display=\"flex\"\n                    flexDirection=\"row\"\n                    justifyContent=\"space-between\"\n                    alignItems=\"center\"\n                    mt={2}\n                >\n                    {actionButtons.map(\n                        (\n                            {\n                                label,\n                                color,\n                                variant,\n                                actionHandler,\n                                disabled,\n                                ...buttonProps\n                            },\n                            index,\n                            arr\n                        ) => (\n                            <ActionButton\n                                key={label}\n                                label={label}\n                                color={color}\n                                variant={variant}\n                                fullWidth={arr.length === 1}\n                                disabled={disabled}\n                                onClick={() => actionHandler(task)}\n                                {...buttonProps}\n                            />\n                        )\n                    )}\n                </Box>\n            </CardContent>\n        </Card>\n    )\n}\n\nTaskCard.propTypes = {\n    task: PropTypes.object.isRequired,\n    actionButtons: PropTypes.arrayOf(\n        PropTypes.shape({\n            label: PropTypes.string,\n            color: PropTypes.string,\n            variant: PropTypes.string,\n            actionHandler: PropTypes.func,\n        })\n    ),\n}\n\nexport default TaskCard\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Grid, Box } from '@material-ui/core'\nimport { Pagination } from '@material-ui/lab'\n\nimport TaskCard from '../Cards/TaskCard/TaskCard'\n\n// TODO: https://blog.logrocket.com/the-material-ui-grid-system/\nconst FCFSTasksGroup = ({\n    tasks,\n    videoRegistry,\n    totalPages = 1,\n    actionButtons,\n    onChangePage,\n}) => {\n    return (\n        <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems={tasks.length > 1 ? 'center' : 'flex-start'}\n        >\n            <Grid item>\n                <Grid\n                    container\n                    direction=\"row\"\n                    alignItems=\"center\"\n                    justify=\"space-between\"\n                    spacing={5}\n                >\n                    {tasks.map(t => (\n                        <Grid item key={t.job_id}>\n                            <TaskCard\n                                task={t}\n                                video={videoRegistry.get(t.video)}\n                                actionButtons={actionButtons}\n                            />\n                        </Grid>\n                    ))}\n                </Grid>\n            </Grid>\n            {totalPages > 1 && (\n                <Grid item>\n                    <Box mt={5}>\n                        <Pagination\n                            count={totalPages}\n                            shape=\"round\"\n                            color=\"primary\"\n                            onChange={(e, value) => onChangePage(value)}\n                        />\n                    </Box>\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n\nFCFSTasksGroup.propTypes = {\n    tasks: PropTypes.array,\n    totalPages: PropTypes.number,\n    onChangePage: PropTypes.func.isRequired,\n}\n\nexport default FCFSTasksGroup\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Grid, Box } from '@material-ui/core'\nimport { Pagination } from '@material-ui/lab'\n\nimport TaskCard from '../Cards/TaskCard/TaskCard'\n\nconst RRTasksGroup = ({\n    tasks,\n    videoRegistry,\n    totalPages = 1,\n    actionButtons,\n    onChangePage,\n    onTaskTimeout,\n}) => {\n    return (\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n            <Grid item>\n                <Grid\n                    container\n                    direction=\"row\"\n                    alignItems=\"center\"\n                    justify=\"flex-start\"\n                    spacing={5}\n                >\n                    {tasks.map(t => (\n                        <Grid item key={t.job_id}>\n                            <TaskCard\n                                task={t}\n                                video={videoRegistry.get(t.video)}\n                                actionButtons={actionButtons}\n                                onTaskTimeout={onTaskTimeout}\n                            />\n                        </Grid>\n                    ))}\n                </Grid>\n            </Grid>\n            {totalPages > 1 && (\n                <Grid item>\n                    <Box mt={5}>\n                        <Pagination\n                            count={totalPages}\n                            shape=\"round\"\n                            color=\"primary\"\n                            onChange={(e, value) => onChangePage(value)}\n                        />\n                    </Box>\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n\nRRTasksGroup.propTypes = {\n    tasks: PropTypes.array,\n    totalPages: PropTypes.number,\n    onChangePage: PropTypes.func.isRequired,\n}\n\nexport default RRTasksGroup\n","import React, { useState, useRef, useMemo } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\n\nimport models from '../types/models'\nimport { Grid, Typography, Box } from '@material-ui/core'\nimport FCFSTasksGroup from './TasksSection/FCFSTasksGroup'\nimport RRTasksGroup from './TasksSection/RRTasksGroup'\n\nconst TASKS_PER_PAGE = 4\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        fontSize: '50px',\n        lineHeight: '50px',\n        fontWeight: 100,\n    },\n    description: {\n        fontSize: '14px',\n        lineHeight: '1.25rem',\n        fontWeight: 400,\n    },\n}))\n\nfunction computePageTasks(tasks, selectedPage) {\n    if (!tasks) {\n        return []\n    }\n\n    const init = (selectedPage - 1) * TASKS_PER_PAGE\n    const end = init + TASKS_PER_PAGE\n\n    return tasks.slice(init, end)\n}\n\nconst TaskSection = ({\n    model = models[0].name,\n    tasks = [],\n    videoRegistry = new Map(),\n    title,\n    description = '',\n    taskActionButtons = [],\n    onTaskTimeout = () => {},\n}) => {\n    const classes = useStyles()\n    const anchorRef = useRef(null)\n    const [selectedPage, setSelectedPage] = useState(1)\n    const currentTasks = useMemo(() => computePageTasks(tasks, selectedPage), [\n        tasks,\n        selectedPage,\n    ])\n    // const [tasks, setTasks] = useState(mockTasks.slice(0, TASKS_PER_PAGE))\n    const totalPages = !tasks ? 0 : Math.ceil(tasks.length / TASKS_PER_PAGE)\n\n    // TODO: Should call Amara API with limit and offset values.\n    // Pagination on the server side\n    const handleChangePage = selectedPage => {\n        // TODO: Take into account navbar height when scrolling to title element. Scroll some additional pixels up.\n        anchorRef.current.scrollIntoView({\n            inline: 'start',\n            behavior: 'smooth',\n        })\n        const init = (selectedPage - 1) * TASKS_PER_PAGE\n        const end = init + TASKS_PER_PAGE\n        setSelectedPage(selectedPage)\n    }\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid item>\n                <Box mb={1} ref={anchorRef}>\n                    <Typography variant=\"h3\" className={classes.title}>\n                        {title}\n                    </Typography>\n                </Box>\n                <Box>\n                    <Typography variant=\"h5\" className={classes.description}>\n                        {description}\n                    </Typography>\n                </Box>\n            </Grid>\n            {tasks ? (\n                <Grid item>\n                    {model == models[0].name ? (\n                        <FCFSTasksGroup\n                            tasks={currentTasks}\n                            videoRegistry={videoRegistry}\n                            actionButtons={taskActionButtons}\n                            totalPages={totalPages}\n                            totalTasks={tasks.length}\n                            tasksPerPage={TASKS_PER_PAGE}\n                            onChangePage={handleChangePage}\n                        />\n                    ) : (\n                        <RRTasksGroup\n                            tasks={currentTasks}\n                            videoRegistry={videoRegistry}\n                            actionButtons={taskActionButtons}\n                            totalPages={totalPages}\n                            totalTasks={tasks.length}\n                            tasksPerPage={TASKS_PER_PAGE}\n                            onChangePage={handleChangePage}\n                            onTaskTimeout={onTaskTimeout}\n                        />\n                    )}\n                </Grid>\n            ) : null}\n        </Grid>\n    )\n}\n\nTaskSection.propTypes = {\n    task: PropTypes.array,\n    title: PropTypes.string.isRequired,\n    emptyText: PropTypes.string,\n}\n\nexport default TaskSection\n","import React from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport InfoOutlined from '@material-ui/icons/InfoOutlined'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Button, CircularProgress, DialogActions } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  titleWrapper: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  modalTitle: {\n    marginLeft: theme.spacing(1),\n    color: ({ type }) =>\n      type === 'error'\n        ? theme.palette.secondary.light\n        : theme.palette.primary.light,\n  },\n  operationTitle: {\n    fontWeight: 700,\n  },\n  opacityWrapper: {\n    opacity: 0.5,\n  },\n  activatingProgress: {\n    position: 'absolute',\n    top: '45%',\n    left: '45%',\n  },\n  opacityBackground: {\n    backgroundColor: theme.palette.grey,\n    cursor: ({ activating }) => (activating ? '' : 'pointer'),\n  },\n}))\n\nconst TransactionModal = ({\n  modalContent,\n  activating = true,\n  open,\n  onClose,\n}) => {\n  const { title, message, createTransactionHandler } = modalContent || {}\n  const {\n    titleWrapper,\n    operationTitle,\n    modalTitle,\n    closeButton,\n    opacityWrapper,\n    activatingProgress,\n    opacityBackground,\n  } = useStyles(activating)\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <div className={opacityBackground}>\n        <div className={activating ? opacityWrapper : null}>\n          <DialogTitle>\n            <div className={titleWrapper}>\n              <InfoOutlined color=\"primary\" fontSize=\"large\" />\n              <span className={modalTitle}>\n                Perform operation:{' '}\n                <span className={operationTitle}>{title}</span>\n              </span>\n            </div>\n            <IconButton\n              aria-label=\"close\"\n              className={closeButton}\n              onClick={onClose}\n            >\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>{message}</DialogContentText>\n            <DialogActions>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={createTransactionHandler}\n                disabled={activating}\n              >\n                Create Transaction\n              </Button>\n            </DialogActions>\n          </DialogContent>\n        </div>\n      </div>\n      {activating && <CircularProgress className={activatingProgress} />}\n    </Dialog>\n  )\n}\n\nexport default TransactionModal\n","import React from 'react'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport ErrorPanel from './ErrorPanel'\n\nconst NoValidUserEntered = () => {\n  return (\n    <ErrorPanel title=\"Demo user not found\">\n      <Grid item>\n        <Box mt={3} ml={1}>\n          <Typography variant=\"body1\">\n            It seems the link you received isn&apos;t valid. Please ask the\n            research team for a valid one.\n          </Typography>\n        </Box>\n      </Grid>\n    </ErrorPanel>\n  )\n}\n\nexport default NoValidUserEntered\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { getEditorLink } from '../helpers/amara-helpers'\nimport { getTxStatus, getTxAction } from '../helpers/transaction-helpers'\nimport { getResourceFromPathname } from '../helpers/route-helpers'\nimport { Actions, convertToString } from '../types/actions'\nimport useUserLogicFCFS from '../hooks/useUserLogicFCFS'\nimport useActions from '../hooks/useActions'\nimport AmaraApi from '../amara-api'\n\nimport {\n    Grid,\n    Typography,\n    Box,\n    Fade,\n    Snackbar,\n    Slide,\n    CircularProgress,\n    Button,\n} from '@material-ui/core'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport { Alert } from '@material-ui/lab'\nimport CheckIcon from '@material-ui/icons/Check'\n\nimport MainView from '../components/MainView'\nimport Banner from '../components/Banner'\nimport TaskSection from '../components/TaskSection'\nimport MessageModal from '../components/Modals/MessageModal'\nimport TransactionModal from '../components/Modals/TransactionModal'\nimport NoValidUserEntered from '../components/ErrorPanels/NoValidUserEntered'\nimport { useAppState } from '../contexts/AppState'\nimport Homepage from '../assets/Homepage.svg'\nimport models from '../types/models'\n\nconst { AcceptTask } = Actions\nconst SNACKBAR_FIXED_TIME = 700\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    taskSection: {\n        // width: '90%',\n        // border: '1px solid black',\n    },\n    toastMessage: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    iconLoadingState: {\n        color: 'white',\n        marginRight: theme.spacing(1),\n    },\n    disabledModal: {\n        opacity: 0.4,\n    },\n}))\n\nconst MODAL_ACTIONS = {\n    acceptTask: {\n        title: 'Accept Assignment',\n        message:\n            'You need to create and confirm a transaction in order to accept this assignment.',\n    },\n}\n\nconst SlideUp = props => <Slide {...props} direction=\"up\" />\nconst SlideLeft = props => <Slide {...props} direction=\"left\" />\n\nconst HomeFCFS = () => {\n    const theme = useTheme()\n    const {\n        root,\n        taskSection,\n        toastMessage,\n        iconLoadingState,\n        disabledModal,\n    } = useStyles()\n    const web3React = useWeb3React()\n    const { account } = web3React\n    const { pathname } = useLocation()\n    const { modelName, setModel } = useAppState()\n    const userId = getResourceFromPathname(pathname, 'userId')\n    const modelNameParam = getResourceFromPathname(pathname, 'model')\n    const {\n        user,\n        tasks,\n        acceptedTask,\n        videosRegistry,\n        loading,\n    } = useUserLogicFCFS(userId)\n    /* ref to avoid updating component when setting to true.\n   Need it to execute useEffect only once at some point in time */\n    const loadingHandlerExecutedRef = useRef(false)\n    const [openMessageModal, setOpenMessageModal] = useState(false)\n    const [modal, setModal] = useState(null)\n    const [openTxModal, setOpenTxModal] = useState(false)\n    const [activatingTxModal, setActivatingTxModal] = useState(false)\n    const [openLoadingSnackbar, setOpenLoadingSnackbar] = useState(true)\n    const [openTxSnackbar, setOpenTxSnackbar] = useState(false)\n    const [txSnackbar, setTxSnackbar] = useState({})\n    const [processingTx, setProcessingTx] = useState(false)\n    const model = models.find(m => m.name == modelName)\n\n    useEffect(() => {\n        setModel(modelNameParam)\n        return () => {}\n    }, [])\n\n    // Wait half second before hiding loading snackbar. Only for aesthetic purposes\n    useEffect(() => {\n        if (!loadingHandlerExecutedRef.current && !loading) {\n            setTimeout(() => setOpenLoadingSnackbar(false), SNACKBAR_FIXED_TIME)\n            loadingHandlerExecutedRef.current = true\n        }\n        return () => {}\n    }, [loading])\n\n    /**\n     * Handle that is executed every time snakbars need to be open\n     */\n    const handleExecutedTransaction = (type, action) => {\n        if (type === 'success' || type === 'error') {\n            setProcessingTx(false)\n        }\n\n        const snackbar = { type }\n        const txStatus = getTxStatus(type)\n        const txAction = getTxAction(action)\n\n        snackbar.message = <span>{txStatus}</span>\n        setActivatingTxModal(false)\n        setOpenTxModal(false)\n\n        setTxSnackbar(snackbar)\n        setOpenTxSnackbar(true)\n    }\n\n    const actions = useActions(handleExecutedTransaction)\n\n    const handleTxSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return\n        }\n\n        setOpenTxSnackbar(false)\n    }\n\n    /**\n     * Handle that is executed when user accepts to\n     * create a transaction.\n     * @param task: contain information about the task\n     * @param action: contain the action to be executed\n     */\n    const handleCreateTransaction = (task, action) => {\n        const actionStr = convertToString(action)\n        setProcessingTx(true)\n        actions[actionStr](userId, task.contractData.id)\n        setActivatingTxModal(true)\n    }\n\n    /**\n     * Handle that manages task acceptance\n     */\n    const handleAcceptTask = task => {\n        // If the user is not connected with metamask, a modal is displayed\n        // asking the user to check her metamask installation\n        if (!account) setOpenMessageModal(true)\n        else {\n            // If the user is connected to metamask, a modal is displayed\n            // to notify that a transaction is going to be created\n            const content = { ...MODAL_ACTIONS.acceptTask }\n            content.createTransactionHandler = () =>\n                handleCreateTransaction(task, AcceptTask)\n            setModal(content)\n            setOpenTxModal(true)\n        }\n    }\n\n    const handleTranslateTask = task => {\n        console.log('Translating task...')\n        AmaraApi.teams\n            .updateSubtitleRequest(user.teams[0].name, task.job_id, userId)\n            .then(\n                () => {\n                    window.open(getEditorLink(task), '_blank')\n                },\n                err =>\n                    console.error(\n                        'A problem has ocurred trying to update assignment using Amara API',\n                        err\n                    )\n            )\n    }\n\n    const availableTaskActionButtons = [\n        {\n            label: 'Accept',\n            color: theme.palette.success.main,\n            variant: 'contained',\n            actionHandler: handleAcceptTask,\n        },\n    ]\n\n    const disabledTaskActionButtons = availableTaskActionButtons.map(\n        taskButton => {\n            return {\n                ...taskButton,\n                disabled: true,\n            }\n        }\n    )\n\n    const assignedTaskActionButtons = [\n        {\n            label: 'Translate',\n            color: theme.palette.translateButton,\n            variant: 'contained',\n            actionHandler: handleTranslateTask,\n        },\n    ]\n\n    if (user) {\n        if (!Object.keys(user).length) {\n            return <NoValidUserEntered />\n        }\n\n        return (\n            <MainView className={root}>\n                <Grid\n                    container\n                    direction=\"column\"\n                    justify=\"space-evenly\"\n                    alignItems=\"center\"\n                >\n                    <Banner\n                        title={model.displayName}\n                        description={model.description}\n                        img={Homepage}\n                        // cta={<Button>Botón</Button>}\n                    />\n                    {acceptedTask ? (\n                        <Grid container className={taskSection}>\n                            <Grid item>\n                                <Box mt={!tasks ? 0 : 2} width=\"100\">\n                                    <TaskSection\n                                        tasks={[acceptedTask]}\n                                        videoRegistry={\n                                            videosRegistry === []\n                                                ? null\n                                                : videosRegistry\n                                        }\n                                        title=\"You have this task selected\"\n                                        description=\"\"\n                                        taskActionButtons={\n                                            assignedTaskActionButtons\n                                        }\n                                    />\n                                </Box>\n                            </Grid>\n                        </Grid>\n                    ) : (\n                        !loading && (\n                            <Grid container className={taskSection}>\n                                <Grid item>\n                                    <Box mt={!tasks ? 0 : 2} width=\"100\">\n                                        <TaskSection\n                                            tasks={\n                                                tasks.length == 0 ? [] : tasks\n                                            }\n                                            videoRegistry={\n                                                videosRegistry === []\n                                                    ? null\n                                                    : videosRegistry\n                                            }\n                                            title={\n                                                processingTx\n                                                    ? 'Processing your request...'\n                                                    : tasks.length <= 0\n                                                    ? 'No tasks available'\n                                                    : tasks.length === 1\n                                                    ? 'This task is currently assigned to you'\n                                                    : 'These tasks are currently assigned to you'\n                                            }\n                                            description=\"\"\n                                            taskActionButtons={\n                                                processingTx\n                                                    ? disabledTaskActionButtons\n                                                    : availableTaskActionButtons\n                                            }\n                                        />\n                                    </Box>\n                                </Grid>\n                            </Grid>\n                        )\n                    )}\n                </Grid>\n\n                <Snackbar\n                    open={openTxSnackbar}\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                    TransitionComponent={SlideLeft}\n                    transitionDuration={500}\n                    autoHideDuration={3000}\n                    onClose={handleTxSnackbarClose}\n                    key={'bottomright'}\n                >\n                    <Alert severity={txSnackbar.type || 'info'}>\n                        {txSnackbar.message}\n                    </Alert>\n                </Snackbar>\n                <Snackbar\n                    open={openLoadingSnackbar}\n                    TransitionComponent={SlideUp}\n                    transitionDuration={500}\n                    onClose={() => setTimeout(() => {}, 1000)}\n                >\n                    <Alert icon={false} variant=\"filled\" color=\"info\">\n                        <div className={toastMessage}>\n                            {loading ? (\n                                <CircularProgress\n                                    className={iconLoadingState}\n                                    size={20}\n                                    thickness={5}\n                                />\n                            ) : (\n                                <CheckIcon className={iconLoadingState} />\n                            )}\n                            Loading your assingments!\n                        </div>\n                    </Alert>\n                </Snackbar>\n                <TransactionModal\n                    className={disabledModal}\n                    modalContent={modal}\n                    open={openTxModal}\n                    activating={activatingTxModal}\n                    onClose={() => setOpenTxModal(false)}\n                    onCreateTransaction={() => handleCreateTransaction()}\n                />\n                <MessageModal\n                    type=\"error\"\n                    title=\"You can't perform this action\"\n                    message=\"Check you have Metamask installed and you're connected to your account.\"\n                    open={openMessageModal}\n                    onClose={() => setOpenMessageModal(false)}\n                />\n            </MainView>\n        )\n    }\n    return null\n}\n\nexport default HomeFCFS\n","export const TaskStatuses = {\n  NonExistent: Symbol('NON_EXISTENT'),\n  Available: Symbol('AVAILABLE'),\n  // Assigned: Symbol('ASSIGNED'),\n  Accepted: Symbol('ACCEPTED'),\n  // Rejected: Symbol('REJECTED'),\n  Completed: Symbol('COMPLETED'),\n}\n\nconst symbolMapping = {\n  NonExistent: TaskStatuses.NonExistent,\n  Available: TaskStatuses.Available,\n  // Assigned: TaskStatuses.Assigned,\n  Accepted: TaskStatuses.Accepted,\n  // Rejected: TaskStatuses.Rejected,\n  Completed: TaskStatuses.Completed,\n}\n\nconst stringMapping = {\n  [TaskStatuses.NonExistent]: 'NonExistent',\n  [TaskStatuses.Available]: 'Available',\n  // [TaskStatuses.Assigned]: 'Assigned',\n  [TaskStatuses.Accepted]: 'Accepted',\n  // [TaskStatuses.Rejected]: 'Rejected',\n  [TaskStatuses.Completed]: 'Completed',\n}\n\n// Maps to typeInt number from subgraph, useful for queries\nconst intMapping = {\n  [TaskStatuses.NonExistent]: 0,\n  [TaskStatuses.Available]: 1,\n  // [TaskStatuses.Assigned]: 2,\n  [TaskStatuses.Accepted]: 2,\n  // [TaskStatuses.Rejected]: 4,\n  [TaskStatuses.Completed]: 3,\n}\n\nexport function convertFromString(str) {\n  return symbolMapping[str]\n}\n\nexport function convertToString(symbol) {\n  return stringMapping[symbol]\n}\n\nexport function convertToInt(symbol) {\n  return intMapping[symbol]\n}\n","import { useState, useEffect } from 'react'\nimport {\n    useUserQuery,\n    useAssignedTasksQueryPolling,\n    useTasksAcceptedByUserQueryPolling,\n} from './useRequests'\nimport { buildMapById } from '../helpers/general-helpers'\nimport AmaraApi from '../amara-api'\nimport { mergeTaskData } from '../helpers/data-transform-helpers'\nimport { TaskStatuses } from '../types/taskStatuses'\n\n// Puts contract task data inside contractData field\nasync function getTasks(tasks, user) {\n    const { teams, apiKey } = user\n\n    if (teams && teams.length && tasks && tasks.length) {\n        const { name: teamName } = teams[0]\n\n        AmaraApi.setApiKeyHeader(apiKey)\n\n        const tasksRequests = tasks.map(({ id }) => {\n            return AmaraApi.teams.getTeamSubtitleRequest(teamName, id)\n        })\n\n        const responses = await Promise.all([...tasksRequests])\n        const amaraTasks = responses.map(({ data }) => data)\n        const transformedTasks = mergeTaskData(tasks, amaraTasks)\n\n        return transformedTasks\n    }\n\n    return []\n}\n\nfunction useUserLogicRR(userId) {\n    const contractUser = useUserQuery(userId)\n    const contractTasks = useAssignedTasksQueryPolling(userId)\n    const contractAcceptedTasks = useTasksAcceptedByUserQueryPolling(userId)\n    const [user, setUser] = useState()\n    const [tasks, setTasks] = useState()\n    const [acceptedTask, setAcceptedTask] = useState()\n    const [videosRegistry, setVideosRegistry] = useState(new Map())\n\n    // Fetch Amara user data\n    useEffect(() => {\n        let isMounted = true\n        async function buildUser(userId) {\n            try {\n                const amaraUserRes = await AmaraApi.users.getOne(userId)\n                const amaraUser = { ...amaraUserRes.data }\n                const user = { ...contractUser, ...amaraUser }\n                if (isMounted) setUser(user)\n            } catch (err) {\n                console.log(err)\n            }\n        }\n        buildUser(userId)\n        return () => {\n            isMounted = false\n        }\n    }, [userId, contractUser])\n\n    // Fetch team videos\n    useEffect(() => {\n        async function getTeamVideos(amaraUser) {\n            const { teams } = amaraUser\n            const {\n                data: { objects: videos },\n            } = await AmaraApi.videos.getAll({ team: teams[0].name })\n            const videosMap = buildMapById(videos)\n\n            setVideosRegistry(videosMap)\n        }\n        if (!user || !user.teams || !user.teams.length) {\n            return\n        }\n\n        getTeamVideos(user)\n\n        return () => {}\n    }, [user])\n\n    // Fetch tasks\n    useEffect(() => {\n        if (!user || !contractTasks) {\n            return\n        }\n        getTasks(contractTasks, user).then(mergedTasks => {\n            setTasks(mergedTasks)\n        })\n\n        return () => {}\n    }, [user, contractTasks])\n\n    // Fetch accepted task\n    useEffect(() => {\n        if (!user || !contractAcceptedTasks) {\n            return\n        }\n        getTasks(contractAcceptedTasks, user).then(mergedTasks => {\n            setAcceptedTask(mergedTasks[0] ? mergedTasks[0] : null)\n        })\n\n        return () => {}\n    }, [user, contractAcceptedTasks])\n\n    const loadingData =\n        !user || !videosRegistry || !tasks || acceptedTask === undefined\n\n    return {\n        user,\n        tasks,\n        acceptedTask: acceptedTask ? acceptedTask : null,\n        videosRegistry,\n        loading: loadingData,\n    }\n}\n\nexport default useUserLogicRR\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppState } from '../contexts/AppState'\nimport { Actions } from '../types/actions'\nimport { toBytes32 } from '../helpers/web3-helpers'\nimport useTransaction from './useTransaction'\n\nconst GAS_LIMIT = 450000 // Reallocation spends around 150 gas\nconst GAS_PRICE = 2000000000 //2 Gwei\nconst { AcceptTask, RejectTask } = Actions\n\nfunction useActions(onReportStatus) {\n    const { account, library: web3 } = useWeb3React()\n    const { contractAddress, modelContractInstance } = useAppState()\n    const [\n        processTransaction,\n        {\n            data: { txHash, receipt: txReceipt },\n            loading: txLoading,\n            error: txError,\n        },\n    ] = useTransaction()\n    const [currentAction, setCurrentAction] = useState()\n\n    useEffect(() => {\n        if (txHash && !txLoading && !txReceipt && !txError) {\n            onReportStatus('info', currentAction)\n        } else if (txHash && txLoading && !txError) {\n        } else if (txHash && !txLoading && txReceipt && !txError) {\n            onReportStatus('success', currentAction)\n            setCurrentAction(null)\n        } else if (txError) {\n            console.error(txError)\n            onReportStatus('error', currentAction)\n        }\n    }, [txHash, txReceipt, txLoading, txError])\n\n    /**\n     * Function that is triggered when a user\n     * confirms a transaction to acept a task\n     */\n    const acceptTask = useCallback(\n        (userId, taskId) => {\n            const hexUserId = toBytes32(userId)\n            const hexTaskId = toBytes32(taskId)\n\n            // console.log('[AcceptTask] params:')\n            // console.log(hexUserId)\n            // console.log(hexTaskId)\n\n            const acceptTaskTxParams = {\n                from: account,\n                to: contractAddress,\n                data: modelContractInstance.methods['acceptTask'](\n                    hexUserId,\n                    hexTaskId\n                ).encodeABI(),\n                gas: GAS_LIMIT,\n                gasPrice: GAS_PRICE,\n            }\n\n            try {\n                processTransaction(web3, acceptTaskTxParams, false)\n                setCurrentAction(AcceptTask)\n            } catch (err) {\n                console.error('Could not create tx:', err)\n                onReportStatus('error', AcceptTask)\n            }\n        },\n        [web3, account, onReportStatus]\n    )\n\n    /**\n     * Function that is triggered when a user\n     * confirms a transaction to reject a task\n     */\n    const rejectTask = useCallback(\n        (userId, taskId) => {\n            const hexUserId = toBytes32(userId)\n            const hexTaskId = toBytes32(taskId)\n\n            // console.log('[RejectTask] params:')\n            // console.log(hexUserId)\n            // console.log(hexTaskId)\n\n            const rejectTaskTxParams = {\n                from: account,\n                to: contractAddress,\n                data: modelContractInstance.methods['rejectTask'](\n                    hexUserId,\n                    hexTaskId\n                ).encodeABI(),\n                gas: GAS_LIMIT,\n                gasPrice: GAS_PRICE,\n            }\n\n            try {\n                processTransaction(web3, rejectTaskTxParams, false)\n                setCurrentAction(RejectTask)\n            } catch (err) {\n                console.error('Could not create tx:', err)\n                onReportStatus('error', RejectTask)\n            }\n        },\n        [web3, account, onReportStatus]\n    )\n\n    return {\n        acceptTask,\n        rejectTask,\n    }\n}\n\nexport default useActions\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { getEditorLink } from '../helpers/amara-helpers'\nimport { getTxStatus, getTxAction } from '../helpers/transaction-helpers'\nimport { getResourceFromPathname } from '../helpers/route-helpers'\nimport { Actions, convertToString } from '../types/actions'\nimport useUserLogicRR from '../hooks/useUserLogicRR'\nimport useActions from '../hooks/useActionsRR'\nimport AmaraApi from '../amara-api'\n\nimport { Grid, Box, Snackbar, Slide, CircularProgress } from '@material-ui/core'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport { Alert } from '@material-ui/lab'\nimport CheckIcon from '@material-ui/icons/Check'\n\nimport MainView from '../components/MainView'\nimport Banner from '../components/Banner'\nimport TaskSection from '../components/TaskSection'\nimport MessageModal from '../components/Modals/MessageModal'\nimport TransactionModal from '../components/Modals/TransactionModal'\nimport NoValidUserEntered from '../components/ErrorPanels/NoValidUserEntered'\nimport { useAppState } from '../contexts/AppState'\nimport Homepage from '../assets/Homepage.svg'\nimport models from '../types/models'\n\nconst { AcceptTask, RejectTask } = Actions\nconst SNACKBAR_FIXED_TIME = 700\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    taskSection: {\n        // width: '90%',\n        // border: '1px solid black',\n    },\n    toastMessage: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    iconLoadingState: {\n        color: 'white',\n        marginRight: theme.spacing(1),\n    },\n    disabledModal: {\n        opacity: 0.4,\n    },\n    rejectButton: {\n        color: theme.palette.error.main,\n        textDecoration: 'underline',\n    },\n}))\n\nconst MODAL_ACTIONS = {\n    acceptTask: {\n        title: 'Accept Assignment',\n        message:\n            'You need to create and confirm a transaction in order to accept this assignment.',\n    },\n    rejectTask: {\n        title: 'Reject Assignment',\n        message:\n            'You need to create and confirm a transaction in order to reject this assignment.',\n    },\n}\n\nconst SlideUp = props => <Slide {...props} direction=\"up\" />\nconst SlideLeft = props => <Slide {...props} direction=\"left\" />\n\nconst HomeRR = () => {\n    const theme = useTheme()\n    const {\n        root,\n        taskSection,\n        toastMessage,\n        iconLoadingState,\n        disabledModal,\n        rejectButton,\n    } = useStyles()\n    const web3React = useWeb3React()\n    const { account } = web3React\n    const { pathname } = useLocation()\n    const { modelName, setModel } = useAppState()\n    const userId = getResourceFromPathname(pathname, 'userId')\n    const modelNameParam = getResourceFromPathname(pathname, 'model')\n    const {\n        user,\n        tasks,\n        acceptedTask,\n        videosRegistry,\n        loading,\n    } = useUserLogicRR(userId)\n    /* ref to avoid updating component when setting to true.\n   Need it to execute useEffect only once at some point in time */\n    const loadingHandlerExecutedRef = useRef(false)\n    const [openMessageModal, setOpenMessageModal] = useState(false)\n    const [modal, setModal] = useState(null)\n    const [openTxModal, setOpenTxModal] = useState(false)\n    const [activatingTxModal, setActivatingTxModal] = useState(false)\n    const [openLoadingSnackbar, setOpenLoadingSnackbar] = useState(true)\n    const [openTxSnackbar, setOpenTxSnackbar] = useState(false)\n    const [txSnackbar, setTxSnackbar] = useState({})\n    const [processingTx, setProcessingTx] = useState(false)\n    const [nTasksToDisplay, setNTasksToDisplay] = useState(0)\n    const model = models.find(m => m.name == modelName)\n\n    useEffect(() => {\n        setModel(modelNameParam)\n    }, [])\n\n    // Set current number of tasks to display\n    useEffect(() => {\n        if (tasks) {\n            let n = tasks.length\n            tasks.map(t => {\n                if (t.contractData.endDate * 1000 < Date.now()) n--\n            })\n            setNTasksToDisplay(n)\n        }\n    }, [tasks])\n\n    // Wait before hiding loading snackbar. Only for aesthetic purposes\n    useEffect(() => {\n        if (!loadingHandlerExecutedRef.current && !loading) {\n            let timerId = setTimeout(\n                () => setOpenLoadingSnackbar(false),\n                SNACKBAR_FIXED_TIME\n            )\n            loadingHandlerExecutedRef.current = true\n        }\n        return (timerId = 0) => {\n            clearTimeout(timerId)\n        }\n    }, [loading])\n\n    /**\n     * Handle that is executed every time snakbars need to be open\n     */\n    const handleExecutedTransaction = (type, action) => {\n        if (type === 'success' || type === 'error') {\n            setProcessingTx(false)\n        }\n\n        const snackbar = { type }\n        const txStatus = getTxStatus(type)\n        const txAction = getTxAction(action)\n\n        snackbar.message = <span>{txStatus}</span>\n        setActivatingTxModal(false)\n        setOpenTxModal(false)\n\n        setTxSnackbar(snackbar)\n        setOpenTxSnackbar(true)\n        // If action is accept task, hide tasks while the graph is syncing\n        if (action === actions.AcceptTask) {\n            setNTasksToDisplay(0)\n        }\n    }\n\n    const actions = useActions(handleExecutedTransaction)\n\n    const handleTxSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return\n        }\n\n        setOpenTxSnackbar(false)\n    }\n\n    /**\n     * Handle that is executed when user accepts to\n     * create a transaction.\n     * @param task: contain information about the task\n     * @param action: contain the action to be executed\n     */\n    const handleCreateTransaction = (task, action) => {\n        const actionStr = convertToString(action)\n        setProcessingTx(true)\n        actions[actionStr](userId, task.contractData.id)\n        setActivatingTxModal(true)\n    }\n\n    /**\n     * Handle that manages task acceptance\n     */\n    const handleAcceptTask = task => {\n        // If the user is not connected with metamask, a modal is displayed\n        // asking the user to check her metamask installation\n        if (!account) setOpenMessageModal(true)\n        else {\n            // If the user is connected to metamask, a modal is displayed\n            // to notify that a transaction is going to be created\n            const content = { ...MODAL_ACTIONS.acceptTask }\n            content.createTransactionHandler = () =>\n                handleCreateTransaction(task, AcceptTask)\n            setModal(content)\n            setOpenTxModal(true)\n        }\n    }\n\n    /**\n     * Handle that manages task rejection\n     */\n    const handleRejectTask = task => {\n        // If the user is not connected with metamask, a modal is displayed\n        // asking the user to check her metamask installation\n        if (!account) setOpenMessageModal(true)\n        else {\n            // If the user is connected to metamask, a modal is displayed\n            // to notify that a transaction is going to be created\n            const content = { ...MODAL_ACTIONS.rejectTask }\n            content.createTransactionHandler = () =>\n                handleCreateTransaction(task, RejectTask)\n            setModal(content)\n            setOpenTxModal(true)\n        }\n    }\n\n    const handleTranslateTask = task => {\n        AmaraApi.teams\n            .updateSubtitleRequest(user.teams[0].name, task.job_id, userId)\n            .then(\n                () => {\n                    window.open(getEditorLink(task), '_blank')\n                },\n                err =>\n                    console.error(\n                        'A problem has ocurred trying to update assignment using Amara API',\n                        err\n                    )\n            )\n    }\n\n    const availableTaskActionButtons = [\n        {\n            label: 'Accept',\n            color: theme.palette.success.main,\n            variant: 'contained',\n            actionHandler: handleAcceptTask,\n        },\n    ]\n    if (modelName == models[1].name || modelName == models[2].name)\n        availableTaskActionButtons.unshift({\n            label: 'Reject',\n            color: theme.palette.error.main,\n            variant: 'text',\n            actionHandler: handleRejectTask,\n            className: rejectButton,\n        })\n\n    const disabledTaskActionButtons = availableTaskActionButtons.map(\n        taskButton => {\n            return {\n                ...taskButton,\n                disabled: true,\n            }\n        }\n    )\n\n    const assignedTaskActionButtons = [\n        {\n            label: 'Translate',\n            color: theme.palette.translateButton,\n            variant: 'contained',\n            actionHandler: handleTranslateTask,\n        },\n    ]\n\n    if (user) {\n        if (!Object.keys(user).length) {\n            return <NoValidUserEntered />\n        }\n        return (\n            <MainView className={root}>\n                <Grid\n                    container\n                    direction=\"column\"\n                    justify=\"space-evenly\"\n                    alignItems=\"center\"\n                >\n                    <Banner\n                        title={model.displayName}\n                        description={model.description}\n                        img={Homepage}\n                    />\n                    {acceptedTask ? (\n                        <Grid container className={taskSection}>\n                            <Grid item>\n                                <Box mt={!tasks ? 0 : 2} width=\"100\">\n                                    <TaskSection\n                                        tasks={[acceptedTask]}\n                                        videoRegistry={\n                                            videosRegistry === []\n                                                ? null\n                                                : videosRegistry\n                                        }\n                                        title=\"You have this task selected\"\n                                        description=\"\"\n                                        emptyText=\"No tasks available\"\n                                        taskActionButtons={\n                                            assignedTaskActionButtons\n                                        }\n                                    />\n                                </Box>\n                            </Grid>\n                        </Grid>\n                    ) : (\n                        !loading && (\n                            <Grid container className={taskSection}>\n                                <Grid item>\n                                    <Box mt={!tasks ? 0 : 2} width=\"100\">\n                                        <TaskSection\n                                            model={modelName}\n                                            tasks={\n                                                tasks.length == 0 ? [] : tasks\n                                            }\n                                            videoRegistry={\n                                                videosRegistry === []\n                                                    ? null\n                                                    : videosRegistry\n                                            }\n                                            title={\n                                                processingTx\n                                                    ? 'Processing your request...'\n                                                    : nTasksToDisplay <= 0\n                                                    ? 'No tasks available'\n                                                    : nTasksToDisplay === 1\n                                                    ? 'This task is currently assigned to you'\n                                                    : 'These tasks are currently assigned to you'\n                                            }\n                                            description=\"\"\n                                            taskActionButtons={\n                                                processingTx\n                                                    ? disabledTaskActionButtons\n                                                    : availableTaskActionButtons\n                                            }\n                                            onTaskTimeout={() => {\n                                                setNTasksToDisplay(_n => {\n                                                    let n = _n - 1\n                                                    return n\n                                                })\n                                            }}\n                                        />\n                                    </Box>\n                                </Grid>\n                            </Grid>\n                        )\n                    )}\n                </Grid>\n\n                <Snackbar\n                    open={openTxSnackbar}\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                    TransitionComponent={SlideLeft}\n                    transitionDuration={500}\n                    autoHideDuration={3000}\n                    onClose={handleTxSnackbarClose}\n                    key={'bottomright'}\n                >\n                    <Alert severity={txSnackbar.type || 'info'}>\n                        {txSnackbar.message}\n                    </Alert>\n                </Snackbar>\n                <Snackbar\n                    open={openLoadingSnackbar}\n                    TransitionComponent={SlideUp}\n                    transitionDuration={500}\n                    onClose={() => setTimeout(() => {}, 1000)}\n                >\n                    <Alert icon={false} variant=\"filled\" color=\"info\">\n                        <div className={toastMessage}>\n                            {loading ? (\n                                <CircularProgress\n                                    className={iconLoadingState}\n                                    size={20}\n                                    thickness={5}\n                                />\n                            ) : (\n                                <CheckIcon className={iconLoadingState} />\n                            )}\n                            Loading your assingments!\n                        </div>\n                    </Alert>\n                </Snackbar>\n                <TransactionModal\n                    className={disabledModal}\n                    modalContent={modal}\n                    open={openTxModal}\n                    activating={activatingTxModal}\n                    onClose={() => setOpenTxModal(false)}\n                    onCreateTransaction={() => handleCreateTransaction()}\n                />\n                <MessageModal\n                    type=\"error\"\n                    title=\"You can't perform this action\"\n                    message=\"Check you have Metamask installed and you're connected to your account.\"\n                    open={openMessageModal}\n                    onClose={() => setOpenMessageModal(false)}\n                />\n            </MainView>\n        )\n    }\n    return null\n}\n\nexport default HomeRR\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppState } from '../contexts/AppState'\nimport { Actions } from '../types/actions'\nimport { toBytes32 } from '../helpers/web3-helpers'\nimport useTransaction from './useTransaction'\n\nconst GAS_LIMIT = 450000 // Reallocation spends around 150 gas\nconst GAS_PRICE = 2000000000 //2 Gwei\nconst { AcceptTask, RejectTask, SetUserCalendarRanges } = Actions\n\nfunction useActions(onReportStatus) {\n    const { account, library: web3 } = useWeb3React()\n    const { contractAddress, modelContractInstance } = useAppState()\n    const [\n        processTransaction,\n        {\n            data: { txHash, receipt: txReceipt },\n            loading: txLoading,\n            error: txError,\n        },\n    ] = useTransaction()\n    const [currentAction, setCurrentAction] = useState()\n\n    useEffect(() => {\n        if (txHash && !txLoading && !txReceipt && !txError) {\n            onReportStatus('info', currentAction)\n        } else if (txHash && txLoading && !txError) {\n        } else if (txHash && !txLoading && txReceipt && !txError) {\n            onReportStatus('success', currentAction)\n            setCurrentAction(null)\n        } else if (txError) {\n            console.error(txError)\n            onReportStatus('error', currentAction)\n        }\n    }, [txHash, txReceipt, txLoading, txError])\n\n    /**\n     * Function that is triggered when a user\n     * confirms a transaction to acept a task\n     */\n    const acceptTask = useCallback(\n        (userId, taskId) => {\n            const hexUserId = toBytes32(userId)\n            const hexTaskId = toBytes32(taskId)\n\n            // console.log('[AcceptTask] params:')\n            // console.log(hexUserId)\n            // console.log(hexTaskId)\n\n            const acceptTaskTxParams = {\n                from: account,\n                to: contractAddress,\n                data: modelContractInstance.methods['acceptTask'](\n                    hexUserId,\n                    hexTaskId\n                ).encodeABI(),\n                gas: GAS_LIMIT,\n                gasPrice: GAS_PRICE,\n            }\n\n            try {\n                processTransaction(web3, acceptTaskTxParams, false)\n                setCurrentAction(AcceptTask)\n            } catch (err) {\n                console.error('Could not create tx:', err)\n                onReportStatus('error', AcceptTask)\n            }\n        },\n        [web3, account, onReportStatus]\n    )\n\n    /**\n     * Function that is triggered when a user\n     * confirms a transaction to reject a task\n     */\n    const rejectTask = useCallback(\n        (userId, taskId) => {\n            const hexUserId = toBytes32(userId)\n            const hexTaskId = toBytes32(taskId)\n\n            // console.log('[RejectTask] params:')\n            // console.log(hexUserId)\n            // console.log(hexTaskId)\n\n            const rejectTaskTxParams = {\n                from: account,\n                to: contractAddress,\n                data: modelContractInstance.methods['rejectTask'](\n                    hexUserId,\n                    hexTaskId\n                ).encodeABI(),\n                gas: GAS_LIMIT,\n                gasPrice: GAS_PRICE,\n            }\n\n            try {\n                processTransaction(web3, rejectTaskTxParams, false)\n                setCurrentAction(RejectTask)\n            } catch (err) {\n                console.error('Could not create tx:', err)\n                onReportStatus('error', RejectTask)\n            }\n        },\n        [web3, account, onReportStatus]\n    )\n\n    /**\n     * Function that is triggered when a user\n     * confirms a transaction to reject a task\n     */\n    const setUserCalendarRanges = useCallback(\n        (userId, calendarRangesStart, calendarRangesEnd) => {\n            const hexUserId = toBytes32(userId)\n\n            // console.log('[SetUserCalendarRanges] params:')\n            // console.log(hexUserId)\n            // console.log(calendarRangesStart)\n            // console.log(calendarRangesEnd)\n\n            const setCalendarRangesTxParams = {\n                from: account,\n                to: contractAddress,\n                data: modelContractInstance.methods['setUserCalendarRanges'](\n                    hexUserId,\n                    calendarRangesStart,\n                    calendarRangesEnd\n                ).encodeABI(),\n                gas: GAS_LIMIT,\n                gasPrice: GAS_PRICE,\n            }\n\n            try {\n                processTransaction(web3, setCalendarRangesTxParams, false)\n                setCurrentAction(SetUserCalendarRanges)\n            } catch (err) {\n                console.error('Could not create tx:', err)\n                onReportStatus('error', SetUserCalendarRanges)\n            }\n        },\n        [web3, account, onReportStatus]\n    )\n\n    return {\n        acceptTask,\n        rejectTask,\n        setUserCalendarRanges,\n    }\n}\n\nexport default useActions\n","import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport {\n    Grid,\n    Box,\n    Modal,\n    Typography,\n    IconButton,\n    Button,\n} from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\n\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\n\nconst useStyles = makeStyles(theme => ({\n    modalBox: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: '80%',\n        // height: '80vh',\n        boxShadow: 24,\n        p: 4,\n        backgroundColor: '#fff',\n        '& div.fc': {\n            // calendar styles\n            marginBottom: '1.5rem',\n        },\n        '& .fc-scrollgrid': {\n            border: 'none',\n        },\n        padding: '1rem',\n    },\n    closeButton: {\n        color: theme.palette.grey[500],\n        position: 'relative',\n        top: '-.75rem',\n        right: '-.75rem',\n    },\n    header1: {\n        color: '#B3B5B8',\n        fontSize: '.75rem',\n        fontWeight: 'bold',\n        letterSpacing: 0,\n        textTransform: 'uppercase',\n    },\n    mainHeader: {\n        color: '#333333',\n        fontSize: '2rem',\n        fontWeight: 300,\n        letterSpacing: 0,\n    },\n    paragraph1: {\n        color: '#333333',\n        fontSize: '14px',\n        letterSpacing: 0,\n    },\n    note: {\n        color: '#333333',\n        fontSize: '.75rem',\n        fontWeight: 'bold',\n        letterSpacing: 0,\n        marginBottom: '1rem',\n    },\n    submitButton: {\n        color: '#fff',\n        backgroundColor: theme.palette.success.main,\n        '&:hover': {\n            backgroundColor: theme.palette.success.dark,\n        },\n    },\n}))\n\nconst Calendar = ({ open, calendarRanges, onClose, onSubmit, ...props }) => {\n    const {\n        modalBox,\n        closeButton,\n        header1,\n        mainHeader,\n        paragraph1,\n        note,\n        submitButton,\n    } = useStyles()\n    const [events, setEvents] = useState([])\n\n    useEffect(() => {\n        let currentEvents = []\n        if (\n            calendarRanges.length === 2 &&\n            calendarRanges[0] &&\n            calendarRanges[1]\n        ) {\n            calendarRanges[0].map((startRange, i) => {\n                let startRangeDate = new Date(startRange * 1000).toISOString()\n                // Timestamps are stored in s in the blockchain and also in GMT+0, they get converted to client GMT time\n                let endRangeDate = new Date(\n                    calendarRanges[1][i] * 1000\n                ).toISOString()\n                // Timestamps are stored in s in the blockchain\n                let newEventId = `event-${startRangeDate}-${endRangeDate}`\n                currentEvents = [\n                    ...currentEvents,\n                    {\n                        id: newEventId,\n                        title: 'Working hours',\n                        start: startRangeDate,\n                        end: endRangeDate,\n                    },\n                ]\n            })\n            setEvents(currentEvents)\n        }\n    }, [calendarRanges])\n\n    const updateEvents = (eventStart, eventEnd, id = null) => {\n        let newEventId = `event-${eventStart}-${eventEnd}`\n        setEvents(events => {\n            // If event exists, delete it and create new with the current data\n            if (id) {\n                if (events.find(e => e.id === id)) {\n                    let index = events.findIndex(e => e.id === id)\n                    events.splice(index, 1)\n                }\n            }\n            return [\n                ...events,\n                {\n                    id: newEventId,\n                    start: eventStart,\n                    end: eventEnd,\n                    title: 'Working hours',\n                },\n            ]\n        })\n    }\n\n    const hanldeSelectClick = e => {\n        updateEvents(\n            new Date(e.startStr).toISOString(),\n            new Date(e.endStr).toISOString()\n        )\n        let calendarApi = e.view.calendar\n        calendarApi.unselect() // clear date selection\n    }\n\n    const handleDragEvent = e => {\n        // Time zone offset has to be extracted due to the fact that fullcalendar is working with local GMT time while blockchain stores GMT+0\n        // Time zone offset is in minutes, offset can be negative\n        updateEvents(\n            new Date(\n                e.event._instance.range.start.getTime() +\n                    e.event._instance.range.start.getTimezoneOffset() * 60000\n            ).toISOString(),\n            new Date(\n                e.event._instance.range.end.getTime() +\n                    e.event._instance.range.end.getTimezoneOffset() * 60000\n            ).toISOString(),\n            e.oldEvent._def.publicId\n        )\n        let calendarApi = e.view.calendar\n        calendarApi.unselect() // clear date selection\n    }\n\n    return (\n        <Modal\n            open={open}\n            onClose={onClose}\n            aria-labelledby=\"modal-modal-title\"\n            aria-describedby=\"modal-modal-description\"\n        >\n            <Box className={modalBox}>\n                <Grid container>\n                    <Grid item sm={11}>\n                        <Typography variant=\"h4\" className={header1}>\n                            Calendar to indicate your availability to accept\n                            task\n                        </Typography>\n                        <Typography variant=\"h2\" className={mainHeader}>\n                            Please, select the time when you are available to\n                            accept tasks\n                        </Typography>\n                        <Typography variant=\"body1\" className={paragraph1}>\n                            This doesn't mean you have to work on the tasks\n                            during this time, it is primarily used by the\n                            distribution system to assign you with tasks.\n                        </Typography>\n                        <Typography variant=\"body2\" className={note}>\n                            Remember you cannot select more than XX hours a day\n                            and past time ranges will be ignored\n                        </Typography>\n                    </Grid>\n                    <Grid item sm={1}>\n                        <Grid container justify=\"flex-end\">\n                            <IconButton\n                                aria-label=\"close\"\n                                className={closeButton}\n                                onClick={() => {\n                                    onClose()\n                                }}\n                            >\n                                <CloseIcon />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                    <Grid item sm={12}>\n                        <FullCalendar\n                            events={events}\n                            plugins={[\n                                dayGridPlugin,\n                                timeGridPlugin,\n                                interactionPlugin,\n                            ]}\n                            initialView=\"timeGridWeek\" //first view = week with hours\n                            headerToolbar={{\n                                start: 'prev',\n                                end: 'today next',\n                            }}\n                            startAccessor=\"start\"\n                            endAccessor=\"end\"\n                            select={hanldeSelectClick}\n                            eventDrop={handleDragEvent}\n                            eventColor=\"#b6daa7\"\n                            eventBorderColor=\"#87d666\"\n                            aspectRatio={2} //the smaller, the bigger the cells of the calendar\n                            selectable={true} //Allows a user to highlight multiple days or timeslots by clicking and drag\n                            editable={true}\n                            selectMirror={true} //A value of true will draw a “placeholder” event while the user is dragging (similar to what Google Calendar does )\n                            businessHours={{\n                                startTime: '8:00', //moment().format('HH:mm'), /* Current Hour/Minute 24H format */\n                                endTime: '20:00',\n                                daysOfWeek: [1, 2, 3, 4, 5], // Day of week. If you don't set it, Sat/Sun are gray too\n                            }} //try to put grey the days before today\n                            nowIndicator={true}\n                            allDaySlot={false}\n                            scrollTime={'08:00:00'}\n                        />\n                    </Grid>\n                    <Grid item sm={12}>\n                        <Grid container justify=\"center\">\n                            <Button\n                                variant=\"contained\"\n                                className={submitButton}\n                                onClick={() => {\n                                    onClose()\n\n                                    let calendarRanges = events.map(e => [\n                                        new Date(e.start).getTime() / 1000,\n                                        new Date(e.end).getTime() / 1000,\n                                    ])\n\n                                    calendarRanges.sort(\n                                        (r1, r2) => r1[0] - r2[0]\n                                    )\n\n                                    let calendarRangesStart = []\n                                    let calendarRangesEnd = []\n                                    calendarRanges.map(range => {\n                                        calendarRangesStart.push(range[0])\n                                        calendarRangesEnd.push(range[1])\n                                    })\n\n                                    onSubmit(\n                                        calendarRangesStart,\n                                        calendarRangesEnd\n                                    )\n                                }}\n                            >\n                                Submit week availability\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </Modal>\n    )\n}\n\nexport default Calendar\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { getEditorLink } from '../helpers/amara-helpers'\nimport { getTxStatus, getTxAction } from '../helpers/transaction-helpers'\nimport { getResourceFromPathname } from '../helpers/route-helpers'\nimport { Actions, convertToString } from '../types/actions'\nimport useUserLogicRR from '../hooks/useUserLogicRR'\nimport useActions from '../hooks/useActionsRRCal'\nimport AmaraApi from '../amara-api'\n\nimport {\n    Grid,\n    Box,\n    Snackbar,\n    Slide,\n    CircularProgress,\n    Button,\n} from '@material-ui/core'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport { Alert } from '@material-ui/lab'\nimport CheckIcon from '@material-ui/icons/Check'\n\nimport MainView from '../components/MainView'\nimport Banner from '../components/Banner'\nimport TaskSection from '../components/TaskSection'\nimport MessageModal from '../components/Modals/MessageModal'\nimport TransactionModal from '../components/Modals/TransactionModal'\nimport NoValidUserEntered from '../components/ErrorPanels/NoValidUserEntered'\nimport { useAppState } from '../contexts/AppState'\nimport Homepage from '../assets/Homepage.svg'\nimport models from '../types/models'\nimport Calendar from '../components/Calendar'\n\nconst { AcceptTask, RejectTask, SetUserCalendarRanges } = Actions\nconst SNACKBAR_FIXED_TIME = 700\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    taskSection: {\n        // width: '90%',\n        // border: '1px solid black',\n    },\n    toastMessage: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    iconLoadingState: {\n        color: 'white',\n        marginRight: theme.spacing(1),\n    },\n    disabledModal: {\n        opacity: 0.4,\n    },\n    rejectButton: {\n        color: theme.palette.error.main,\n        textDecoration: 'underline',\n    },\n}))\n\nconst MODAL_ACTIONS = {\n    acceptTask: {\n        title: 'Accept Assignment',\n        message:\n            'You need to create and confirm a transaction in order to accept this assignment.',\n    },\n    rejectTask: {\n        title: 'Reject Assignment',\n        message:\n            'You need to create and confirm a transaction in order to reject this assignment.',\n    },\n    setCalendarRanges: {\n        title: 'Set availability schedule',\n        message:\n            'You need to create and confirm a transaction in order to set your schedule.',\n    },\n}\n\nconst SlideUp = props => <Slide {...props} direction=\"up\" />\nconst SlideLeft = props => <Slide {...props} direction=\"left\" />\n\nconst HomeRRCal = () => {\n    const theme = useTheme()\n    const {\n        root,\n        taskSection,\n        toastMessage,\n        iconLoadingState,\n        disabledModal,\n        rejectButton,\n    } = useStyles()\n    const web3React = useWeb3React()\n    const { account } = web3React\n    const { pathname } = useLocation()\n    const { modelName, setModel } = useAppState()\n    const userId = getResourceFromPathname(pathname, 'userId')\n    const modelNameParam = getResourceFromPathname(pathname, 'model')\n    const {\n        user,\n        tasks,\n        acceptedTask,\n        videosRegistry,\n        loading,\n    } = useUserLogicRR(userId)\n    /* ref to avoid updating component when setting to true.\n   Need it to execute useEffect only once at some point in time */\n    const loadingHandlerExecutedRef = useRef(false)\n    const [openMessageModal, setOpenMessageModal] = useState(false)\n    const [modal, setModal] = useState(null)\n    const [openTxModal, setOpenTxModal] = useState(false)\n    const [activatingTxModal, setActivatingTxModal] = useState(false)\n    const [openLoadingSnackbar, setOpenLoadingSnackbar] = useState(true)\n    const [openTxSnackbar, setOpenTxSnackbar] = useState(false)\n    const [txSnackbar, setTxSnackbar] = useState({})\n    const [processingTx, setProcessingTx] = useState(false)\n    const [nTasksToDisplay, setNTasksToDisplay] = useState(0)\n    const [showCalendar, setShowCalendar] = useState(false)\n    const model = models.find(m => m.name == modelName)\n\n    useEffect(() => {\n        setModel(modelNameParam)\n    }, [])\n\n    useEffect(() => {\n    }, [nTasksToDisplay])\n\n    // Set current number of tasks to display\n    useEffect(() => {\n        if (tasks) {\n            let n = tasks.length\n            tasks.map(t => {\n                if (t.contractData.endDate * 1000 < Date.now()) n--\n            })\n            setNTasksToDisplay(n)\n        }\n    }, [tasks])\n\n    // Wait before hiding loading snackbar. Only for aesthetic purposes\n    useEffect(() => {\n        if (!loadingHandlerExecutedRef.current && !loading) {\n            let timerId = setTimeout(\n                () => setOpenLoadingSnackbar(false),\n                SNACKBAR_FIXED_TIME\n            )\n            loadingHandlerExecutedRef.current = true\n        }\n        return (timerId = 0) => {\n            clearTimeout(timerId)\n        }\n    }, [loading])\n\n    /**\n     * Handle that is executed every time snakbars need to be open\n     */\n    const handleExecutedTransaction = (type, action) => {\n        if (type === 'success' || type === 'error') {\n            setProcessingTx(false)\n        }\n\n        const snackbar = { type }\n        const txStatus = getTxStatus(type)\n        const txAction = getTxAction(action)\n\n        snackbar.message = <span>{txStatus}</span>\n        setActivatingTxModal(false)\n        setOpenTxModal(false)\n\n        setTxSnackbar(snackbar)\n        setOpenTxSnackbar(true)\n        // If action is accept task, hide tasks while the graph is syncing\n        if (action === actions.AcceptTask) {\n            setNTasksToDisplay(0)\n        }\n    }\n\n    const actions = useActions(handleExecutedTransaction)\n\n    const handleTxSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return\n        }\n\n        setOpenTxSnackbar(false)\n    }\n\n    /**\n     * Handle that is executed when user accepts to\n     * create a transaction.\n     * @param task: contain information about the task\n     * @param action: contain the action to be executed\n     */\n    const handleCreateTransaction = (task, action) => {\n        const actionStr = convertToString(action)\n        setProcessingTx(true)\n        actions[actionStr](userId, task.contractData.id)\n        setActivatingTxModal(true)\n    }\n\n    /**\n     * Handle that manages calendar ranges set\n     */\n    const handleSubmitCalendarRanges = (\n        calendarRangesStart,\n        calendarRangesEnd\n    ) => {\n        // If the user is not connected with metamask, a modal is displayed\n        // asking the user to check her metamask installation\n        if (!account) setOpenMessageModal(true)\n        else {\n            // If the user is connected to metamask, a modal is displayed\n            // to notify that a transaction is going to be created\n            const content = { ...MODAL_ACTIONS.setCalendarRanges }\n            content.createTransactionHandler = () => {\n                const actionStr = convertToString(SetUserCalendarRanges)\n                setProcessingTx(true)\n                actions[actionStr](\n                    userId,\n                    calendarRangesStart,\n                    calendarRangesEnd\n                )\n                setActivatingTxModal(true)\n            }\n            setModal(content)\n            setOpenTxModal(true)\n        }\n    }\n\n    /**\n     * Handle that manages task acceptance\n     */\n    const handleAcceptTask = task => {\n        // If the user is not connected with metamask, a modal is displayed\n        // asking the user to check her metamask installation\n        if (!account) setOpenMessageModal(true)\n        else {\n            // If the user is connected to metamask, a modal is displayed\n            // to notify that a transaction is going to be created\n            const content = { ...MODAL_ACTIONS.acceptTask }\n            content.createTransactionHandler = () =>\n                handleCreateTransaction(task, AcceptTask)\n            setModal(content)\n            setOpenTxModal(true)\n        }\n    }\n\n    /**\n     * Handle that manages task rejection\n     */\n    const handleRejectTask = task => {\n        // If the user is not connected with metamask, a modal is displayed\n        // asking the user to check her metamask installation\n        if (!account) setOpenMessageModal(true)\n        else {\n            // If the user is connected to metamask, a modal is displayed\n            // to notify that a transaction is going to be created\n            const content = { ...MODAL_ACTIONS.rejectTask }\n            content.createTransactionHandler = () =>\n                handleCreateTransaction(task, RejectTask)\n            setModal(content)\n            setOpenTxModal(true)\n        }\n    }\n\n    const handleTranslateTask = task => {\n        AmaraApi.teams\n            .updateSubtitleRequest(user.teams[0].name, task.job_id, userId)\n            .then(\n                () => {\n                    window.open(getEditorLink(task), '_blank')\n                },\n                err =>\n                    console.error(\n                        'A problem has ocurred trying to update assignment using Amara API',\n                        err\n                    )\n            )\n    }\n\n    const availableTaskActionButtons = [\n        {\n            label: 'Accept',\n            color: theme.palette.success.main,\n            variant: 'contained',\n            actionHandler: handleAcceptTask,\n        },\n    ]\n    if (modelName == models[1].name || modelName == models[2].name)\n        availableTaskActionButtons.unshift({\n            label: 'Reject',\n            color: theme.palette.error.main,\n            variant: 'text',\n            actionHandler: handleRejectTask,\n            className: rejectButton,\n        })\n\n    const disabledTaskActionButtons = availableTaskActionButtons.map(\n        taskButton => {\n            return {\n                ...taskButton,\n                disabled: true,\n            }\n        }\n    )\n\n    const assignedTaskActionButtons = [\n        {\n            label: 'Translate',\n            color: theme.palette.translateButton,\n            variant: 'contained',\n            actionHandler: handleTranslateTask,\n        },\n    ]\n\n    if (user) {\n        if (!Object.keys(user).length) {\n            return <NoValidUserEntered />\n        }\n        return (\n            <MainView className={root}>\n                <Grid\n                    container\n                    direction=\"column\"\n                    justify=\"space-evenly\"\n                    alignItems=\"center\"\n                >\n                    <Banner\n                        title={model.displayName}\n                        description={model.description}\n                        img={Homepage}\n                        cta={\n                            <Button onClick={() => setShowCalendar(true)}>\n                                View availability calendar\n                            </Button>\n                        }\n                    />\n                    {acceptedTask ? (\n                        <Grid container className={taskSection}>\n                            <Grid item>\n                                <Box mt={!tasks ? 0 : 2} width=\"100\">\n                                    <TaskSection\n                                        tasks={[acceptedTask]}\n                                        videoRegistry={\n                                            videosRegistry === []\n                                                ? null\n                                                : videosRegistry\n                                        }\n                                        title=\"You have this task selected\"\n                                        description=\"\"\n                                        emptyText=\"No tasks available\"\n                                        taskActionButtons={\n                                            assignedTaskActionButtons\n                                        }\n                                    />\n                                </Box>\n                            </Grid>\n                        </Grid>\n                    ) : (\n                        !loading && (\n                            <Grid container className={taskSection}>\n                                <Grid item>\n                                    <Box mt={!tasks ? 0 : 2} width=\"100\">\n                                        <TaskSection\n                                            model={modelName}\n                                            tasks={\n                                                tasks.length == 0 ? [] : tasks\n                                            }\n                                            videoRegistry={\n                                                videosRegistry === []\n                                                    ? null\n                                                    : videosRegistry\n                                            }\n                                            title={\n                                                processingTx\n                                                    ? 'Processing your request...'\n                                                    : nTasksToDisplay <= 0\n                                                    ? 'No tasks available'\n                                                    : nTasksToDisplay === 1\n                                                    ? 'This task is currently assigned to you'\n                                                    : 'These tasks are currently assigned to you'\n                                            }\n                                            description=\"\"\n                                            taskActionButtons={\n                                                processingTx\n                                                    ? disabledTaskActionButtons\n                                                    : availableTaskActionButtons\n                                            }\n                                            onTaskTimeout={() => {\n                                                console.log(\"    Substract one to number of task from onTaskTimeout\")\n                                                setNTasksToDisplay(_n => {\n                                                    let n = _n - 1\n                                                    return n\n                                                })\n                                            }}\n                                        />\n                                    </Box>\n                                </Grid>\n                            </Grid>\n                        )\n                    )}\n                </Grid>\n\n                <Calendar\n                    open={showCalendar}\n                    calendarRanges={\n                        user\n                            ? [user.calendarRangesStart, user.calendarRangesEnd]\n                            : null\n                    }\n                    onSubmit={handleSubmitCalendarRanges}\n                    onClose={() => {\n                        setShowCalendar(false)\n                    }}\n                />\n\n                <Snackbar\n                    open={openTxSnackbar}\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                    TransitionComponent={SlideLeft}\n                    transitionDuration={500}\n                    autoHideDuration={3000}\n                    onClose={handleTxSnackbarClose}\n                    key={'bottomright'}\n                >\n                    <Alert severity={txSnackbar.type || 'info'}>\n                        {txSnackbar.message}\n                    </Alert>\n                </Snackbar>\n                <Snackbar\n                    open={openLoadingSnackbar}\n                    TransitionComponent={SlideUp}\n                    transitionDuration={500}\n                    onClose={() => setTimeout(() => {}, 1000)}\n                >\n                    <Alert icon={false} variant=\"filled\" color=\"info\">\n                        <div className={toastMessage}>\n                            {loading ? (\n                                <CircularProgress\n                                    className={iconLoadingState}\n                                    size={20}\n                                    thickness={5}\n                                />\n                            ) : (\n                                <CheckIcon className={iconLoadingState} />\n                            )}\n                            Loading your assingments!\n                        </div>\n                    </Alert>\n                </Snackbar>\n                <TransactionModal\n                    className={disabledModal}\n                    modalContent={modal}\n                    open={openTxModal}\n                    activating={activatingTxModal}\n                    onClose={() => setOpenTxModal(false)}\n                    onCreateTransaction={() => handleCreateTransaction()}\n                />\n                <MessageModal\n                    type=\"error\"\n                    title=\"You can't perform this action\"\n                    message=\"Check you have Metamask installed and you're connected to your account.\"\n                    open={openMessageModal}\n                    onClose={() => setOpenMessageModal(false)}\n                />\n            </MainView>\n        )\n    }\n    return null\n}\n\nexport default HomeRRCal\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n    FormControl,\n    InputLabel,\n    Select as MuiSelect,\n    MenuItem,\n    makeStyles,\n    useTheme,\n} from '@material-ui/core'\n\nfunction Select(props) {\n    const theme = useTheme()\n\n    const {\n        name,\n        label,\n        labelTitle,\n        value,\n        onChange,\n        options,\n        className,\n        required,\n        ...other\n    } = props\n\n    return (\n        <FormControl variant=\"outlined\" className={className} {...other}>\n            <InputLabel>{label}</InputLabel>\n            <MuiSelect\n                name={name}\n                label={label}\n                value={value}\n                onChange={onChange}\n            >\n                <MenuItem value=\"\">None</MenuItem>\n                {options.map((opt, i) => (\n                    <MenuItem key={i} value={opt.value}>\n                        {opt.label}\n                    </MenuItem>\n                ))}\n            </MuiSelect>\n        </FormControl>\n    )\n}\n\nSelect.propTypes = {\n    name: PropTypes.string,\n    label: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    options: PropTypes.array,\n}\n\nexport default Select\n","import React from 'react'\nimport { withStyles, makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport IconButton from '@material-ui/core/IconButton'\nimport RefreshIcon from '@material-ui/icons/Refresh'\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n})\n\nconst StyledTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.secondary.dark,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell)\n\nconst StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow)\n\nconst TasksTable = ({ tasks }) => {\n    const classes = useStyles()\n\n    return tasks ? (\n        <TableContainer component={Paper}>\n            <Table stickyHeader aria-label=\"Tasks Table\">\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell align=\"center\">\n                            Task Id\n                        </StyledTableCell>\n                        <StyledTableCell align=\"center\">Status</StyledTableCell>\n                        <StyledTableCell align=\"center\">\n                            Assigned to\n                        </StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {tasks == null ? (\n                        <StyledTableRow>\n                            <StyledTableCell\n                                componenet=\"th\"\n                                scope=\"row\"\n                                colSpan=\"4\"\n                                align=\"left\"\n                            >\n                                Loading data...\n                            </StyledTableCell>\n                        </StyledTableRow>\n                    ) : !tasks.length ? (\n                        <StyledTableRow>\n                            <StyledTableCell\n                                componenet=\"th\"\n                                scope=\"row\"\n                                colSpan=\"4\"\n                                align=\"center\"\n                            >\n                                No tasks\n                            </StyledTableCell>\n                        </StyledTableRow>\n                    ) : (\n                        tasks.map(task => (\n                            <StyledTableRow key={task.id}>\n                                <StyledTableCell\n                                    component=\"th\"\n                                    scope=\"row\"\n                                    align=\"center\"\n                                >\n                                    {task.id}\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\">\n                                    {task.status}\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\">\n                                    {task.userId ? task.userId : '--'}\n                                </StyledTableCell>\n                            </StyledTableRow>\n                        ))\n                    )}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    ) : (\n        <></>\n    )\n}\n\nexport default TasksTable\n","import React from 'react'\nimport { withStyles, makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport IconButton from '@material-ui/core/IconButton'\nimport RefreshIcon from '@material-ui/icons/Refresh'\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n    lastUpdateCell: {\n        color: '#676767',\n        backgroundColor: '#fff',\n    },\n})\n\nconst StyledTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.secondary.dark,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell)\n\nconst StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow)\n\nconst UsersTable = ({ users }) => {\n    const classes = useStyles()\n\n    return (\n        <TableContainer component={Paper}>\n            <Table stickyHeader aria-label=\"Transactions Table\">\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell align=\"center\">Id</StyledTableCell>\n                        <StyledTableCell align=\"center\">\n                            Accepted task\n                        </StyledTableCell>\n                        <StyledTableCell align=\"center\">\n                            Task id\n                        </StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {users == null ? (\n                        <StyledTableRow>\n                            <StyledTableCell\n                                componenet=\"th\"\n                                scope=\"row\"\n                                colSpan=\"4\"\n                                align=\"left\"\n                            >\n                                Loading data...\n                            </StyledTableCell>\n                        </StyledTableRow>\n                    ) : !users.length ? (\n                        <StyledTableRow>\n                            <StyledTableCell\n                                componenet=\"th\"\n                                scope=\"row\"\n                                colSpan=\"4\"\n                                align=\"center\"\n                            >\n                                No users\n                            </StyledTableCell>\n                        </StyledTableRow>\n                    ) : (\n                        users.map(user => (\n                            <StyledTableRow key={user.id}>\n                                <StyledTableCell\n                                    align=\"center\"\n                                    component=\"th\"\n                                    scope=\"row\"\n                                >\n                                    {user.id}\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\">\n                                    {user.hasTask ? '✔️' : '❌'}\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\">\n                                    {user.taskId || '--'}\n                                </StyledTableCell>\n                            </StyledTableRow>\n                        ))\n                    )}\n                    <StyledTableRow key=\"last-update-trow\">\n                        <StyledTableCell className={classes.lastUpdateCell}>\n                            {`Last update ${new Date(\n                                Date.now()\n                            ).toLocaleTimeString()}`}\n                        </StyledTableCell>\n                    </StyledTableRow>\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}\n\nexport default UsersTable\n","import React from 'react'\nimport { withStyles, makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport IconButton from '@material-ui/core/IconButton'\nimport RefreshIcon from '@material-ui/icons/Refresh'\n\nconst StyledTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.secondary.dark,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell)\n\nconst StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow)\n\nconst TxsTable = ({ txs }) => {\n    return txs ? (\n        <TableContainer component={Paper}>\n            <Table stickyHeader aria-label=\"Transactions Table\">\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell align=\"center\">\n                            Block number\n                        </StyledTableCell>\n                        <StyledTableCell align=\"center\">To</StyledTableCell>\n                        <StyledTableCell align=\"center\">From</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {txs == null ? (\n                        <StyledTableRow>\n                            <StyledTableCell\n                                componenet=\"th\"\n                                scope=\"row\"\n                                colSpan=\"4\"\n                                align=\"left\"\n                            >\n                                Loading data...\n                            </StyledTableCell>\n                        </StyledTableRow>\n                    ) : !txs.length ? (\n                        <StyledTableRow>\n                            <StyledTableCell\n                                componenet=\"th\"\n                                scope=\"row\"\n                                colSpan=\"4\"\n                                align=\"center\"\n                            >\n                                No transactions\n                            </StyledTableCell>\n                        </StyledTableRow>\n                    ) : (\n                        txs.map(tx => (\n                            <StyledTableRow key={tx.transactionHash}>\n                                <StyledTableCell\n                                    component=\"th\"\n                                    scope=\"row\"\n                                    align=\"center\"\n                                >\n                                    {tx.blockNumber}\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\">\n                                    {tx.to}\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\">\n                                    {tx.from}\n                                </StyledTableCell>\n                            </StyledTableRow>\n                        ))\n                    )}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    ) : (\n        <></>\n    )\n}\n\nexport default TxsTable\n","export const users = [\n    'p2pmodels.user1',\n    'p2pmodels.user2',\n    'p2pmodels.user3',\n    'p2pmodels.user4',\n    'p2pmodels.user5',\n    'p2pmodels.user6',\n]\n\nconst mockVideos = [\n    {\n        id: 'MsVoQB3DTAdZ',\n        video_type: 'K',\n        primary_audio_language_code: 'en',\n        title: 'Keyboard - 10822',\n        description: '',\n        duration: 12,\n        thumbnail:\n            'https://userdata.staging.amara.org/video/thumbnail/bf119bf3f4d730b5c53256f6894e45e78d1cb56d_480x270_crop-smart_upscale-True_q85.jpg',\n        created: '2018-04-16T15:19:24Z',\n        team: 'collab-demo-team',\n        project: null,\n        all_urls: [\n            'http://cdnapi.kaltura.com/p/1492321/sp/149232100/playManifest/entryId/0_hvfq3mvs/format/url/protocol/http',\n        ],\n        metadata: {},\n        languages: [\n            {\n                code: 'de',\n                name: 'German',\n                published: false,\n                dir: 'ltr',\n                subtitles_uri:\n                    'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/de/subtitles/',\n                resource_uri:\n                    'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/de/',\n            },\n            {\n                code: 'en',\n                name: 'English',\n                published: true,\n                dir: 'ltr',\n                subtitles_uri:\n                    'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/en/subtitles/',\n                resource_uri:\n                    'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/en/',\n            },\n            {\n                code: 'es',\n                name: 'Spanish',\n                published: false,\n                dir: 'ltr',\n                subtitles_uri:\n                    'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/es/subtitles/',\n                resource_uri:\n                    'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/es/',\n            },\n            {\n                code: 'fr',\n                name: 'French',\n                published: false,\n                dir: 'ltr',\n                subtitles_uri:\n                    'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/fr/subtitles/',\n                resource_uri:\n                    'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/fr/',\n            },\n            {\n                code: 'pt-br',\n                name: 'Portuguese, Brazilian',\n                published: false,\n                dir: 'ltr',\n                subtitles_uri:\n                    'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/pt-br/subtitles/',\n                resource_uri:\n                    'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/pt-br/',\n            },\n        ],\n        activity_uri:\n            'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/activity/',\n        urls_uri: 'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/urls/',\n        subtitle_languages_uri:\n            'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/',\n        resource_uri: 'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/',\n    },\n    {\n        id: 'mjgA8CA8ieBU',\n        video_type: 'K',\n        primary_audio_language_code: 'en',\n        title: 'Footage - 12127',\n        description: '',\n        duration: 7,\n        thumbnail:\n            'https://userdata.staging.amara.org/video/thumbnail/3d303d684fabfb10cdf4a996e00e1745205a9e68_480x270_crop-smart_upscale-True_q85.jpg',\n        created: '2018-04-16T15:19:24Z',\n        team: 'collab-demo-team',\n        project: null,\n        all_urls: [\n            'http://cdnapi.kaltura.com/p/1492321/sp/149232100/playManifest/entryId/0_0xivs8to/format/url/protocol/http',\n        ],\n        metadata: {},\n        languages: [\n            {\n                code: 'de',\n                name: 'German',\n                published: false,\n                dir: 'ltr',\n                subtitles_uri:\n                    'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/de/subtitles/',\n                resource_uri:\n                    'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/de/',\n            },\n            {\n                code: 'en',\n                name: 'English',\n                published: true,\n                dir: 'ltr',\n                subtitles_uri:\n                    'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/en/subtitles/',\n                resource_uri:\n                    'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/en/',\n            },\n            {\n                code: 'es',\n                name: 'Spanish',\n                published: false,\n                dir: 'ltr',\n                subtitles_uri:\n                    'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/es/subtitles/',\n                resource_uri:\n                    'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/es/',\n            },\n            {\n                code: 'fr',\n                name: 'French',\n                published: false,\n                dir: 'ltr',\n                subtitles_uri:\n                    'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/fr/subtitles/',\n                resource_uri:\n                    'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/fr/',\n            },\n            {\n                code: 'pt-br',\n                name: 'Portuguese, Brazilian',\n                published: false,\n                dir: 'ltr',\n                subtitles_uri:\n                    'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/pt-br/subtitles/',\n                resource_uri:\n                    'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/pt-br/',\n            },\n        ],\n        activity_uri:\n            'https://staging.amara.org/api/videos/mjgA8CA8ieBU/activity/',\n        urls_uri: 'https://staging.amara.org/api/videos/mjgA8CA8ieBU/urls/',\n        subtitle_languages_uri:\n            'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/',\n        resource_uri: 'https://staging.amara.org/api/videos/mjgA8CA8ieBU/',\n    },\n]\n\nexport const videoRegistry = mockVideos.reduce((registry, v) => {\n    registry.set(v.id, v)\n    return registry\n}, new Map())\n\nexport const mockTasks = [\n    {\n        job_id: 'JS4TMAF',\n        video: 'MsVoQB3DTAdZ',\n        language: 'de',\n        source_team: 'collab-demo-team',\n        team: 'collab-demo-team',\n        evaluation_teams: [],\n        status: 'in-progress',\n        work_status: 'needs-subtitler',\n        subtitler: null,\n        reviewer: null,\n        approver: null,\n        created: '2018-10-29T22:40:28Z',\n        subtitles_due_date: null,\n        review_due_date: null,\n        approval_due_date: null,\n        due_date: null,\n        completed: null,\n        work_completed: null,\n        video_uri: 'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/',\n        subtitles_uri:\n            'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/de/subtitles/',\n        actions_uri:\n            'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/de/subtitles/actions/',\n        resource_uri:\n            'https://staging.amara.org/api/teams/collab-demo-team/subtitle-requests/JS4TMAF/',\n    },\n    {\n        job_id: '0UTJG1S',\n        video: 'MsVoQB3DTAdZ',\n        language: 'fr',\n        source_team: 'collab-demo-team',\n        team: 'collab-demo-team',\n        evaluation_teams: [],\n        status: 'in-progress',\n        work_status: 'needs-subtitler',\n        subtitler: null,\n        reviewer: null,\n        approver: null,\n        created: '2018-10-29T22:40:28Z',\n        subtitles_due_date: null,\n        review_due_date: null,\n        approval_due_date: null,\n        due_date: null,\n        completed: null,\n        work_completed: null,\n        video_uri: 'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/',\n        subtitles_uri:\n            'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/fr/subtitles/',\n        actions_uri:\n            'https://staging.amara.org/api/videos/MsVoQB3DTAdZ/languages/fr/subtitles/actions/',\n        resource_uri:\n            'https://staging.amara.org/api/teams/collab-demo-team/subtitle-requests/0UTJG1S/',\n    },\n    {\n        job_id: '9AR30EW',\n        video: 'mjgA8CA8ieBU',\n        language: 'es',\n        source_team: 'collab-demo-team',\n        team: 'collab-demo-team',\n        evaluation_teams: [],\n        status: 'in-progress',\n        work_status: 'needs-subtitler',\n        subtitler: null,\n        reviewer: null,\n        approver: null,\n        created: '2018-10-29T22:40:28Z',\n        subtitles_due_date: null,\n        review_due_date: null,\n        approval_due_date: null,\n        due_date: null,\n        completed: null,\n        work_completed: null,\n        video_uri: 'https://staging.amara.org/api/videos/mjgA8CA8ieBU/',\n        subtitles_uri:\n            'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/es/subtitles/',\n        actions_uri:\n            'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/es/subtitles/actions/',\n        resource_uri:\n            'https://staging.amara.org/api/teams/collab-demo-team/subtitle-requests/9AR30EW/',\n    },\n    {\n        job_id: 'TNEYKA0',\n        video: 'mjgA8CA8ieBU',\n        language: 'de',\n        source_team: 'collab-demo-team',\n        team: 'collab-demo-team',\n        evaluation_teams: [],\n        status: 'in-progress',\n        work_status: 'needs-subtitler',\n        subtitler: null,\n        reviewer: null,\n        approver: null,\n        created: '2018-10-29T22:40:28Z',\n        subtitles_due_date: null,\n        review_due_date: null,\n        approval_due_date: null,\n        due_date: null,\n        completed: null,\n        work_completed: null,\n        video_uri: 'https://staging.amara.org/api/videos/mjgA8CA8ieBU/',\n        subtitles_uri:\n            'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/de/subtitles/',\n        actions_uri:\n            'https://staging.amara.org/api/videos/mjgA8CA8ieBU/languages/de/subtitles/actions/',\n        resource_uri:\n            'https://staging.amara.org/api/teams/collab-demo-team/subtitle-requests/TNEYKA0/',\n    },\n]\n\nexport const REALLOCATION_TIME = 90 // (s)\n","import React, { useState, useEffect } from 'react'\nimport useTransaction from './useTransaction'\n\nexport default function useBulkTransactions() {\n    const [txsHash, setTxsHash] = useState([])\n    const [receipts, setReceipts] = useState([])\n    const [loading, setLoading] = useState()\n    const [error, setError] = useState([])\n\n    const [web3, setWeb3] = useState()\n    const [usePrivateKey, setUsePrivateKey] = useState()\n    const [txsToProcess, setTxsToProcess] = useState()\n    const [currentTxIndex, setCurrentTxIndex] = useState()\n    const [preparingNextTx, setPreparingNextTx] = useState(false)\n    const [lastTxIndex, setLastTxIndex] = useState()\n    let [\n        processTransaction,\n        {\n            data: { txHash: currentTxHash, receipt: currentReceipt },\n            loading: currentLoading,\n            error: currentError,\n        },\n    ] = useTransaction()\n\n    const processBulkTransactions = (web3, inputTxs, usePrivateKey = false) => {\n        // console.log(\"[useBulkTransaction] Starting bulk txs process...\")\n\n        setWeb3(web3)\n        setUsePrivateKey(usePrivateKey)\n\n        // Bulk tx starts, set loading state\n        setLoading(true)\n        // Restart index\n        setCurrentTxIndex(0)\n        // Set last index\n        setLastTxIndex(inputTxs.length)\n        // Store cases to tx\n        setTxsToProcess(inputTxs)\n\n        // Bootstrap, tx first case\n        processTransaction(web3, inputTxs[0], usePrivateKey)\n    }\n\n    useEffect(() => {\n        if (currentError) {\n            console.log('[useBulkTransaction] Error: ')\n            console.log(currentError)\n            setError(error => [...error, currentError])\n            return\n        }\n        if (currentLoading && currentTxHash) {\n            // console.log(\n            //     `[useBulkTransaction] Processing tx ${currentTxHash}...`\n            // )\n            setTxsHash(txsHash => [...txsHash, currentTxHash])\n            setPreparingNextTx(false)\n            return\n        }\n        if (currentReceipt && !currentLoading && !preparingNextTx) {\n            // console.log(\n            //     `[useBulkTransaction] Tx ${currentTxIndex + 1} processed: `\n            // )\n            // console.log(currentReceipt)\n\n            // Update state\n            setReceipts(receipts => [...receipts, currentReceipt])\n            setError(error => [...error, null])\n            setPreparingNextTx(true)\n\n            if (currentTxIndex + 1 < lastTxIndex) {\n                // console.log(\"[useBulkTransaction] Reporting next case...\")\n                processTransaction(\n                    web3,\n                    txsToProcess[currentTxIndex + 1],\n                    usePrivateKey\n                )\n                setCurrentTxIndex(index => index + 1)\n            } else if (currentTxIndex + 1 == lastTxIndex) {\n                // Bulk report finished\n                setLoading(false)\n            }\n            return\n        }\n    }, [currentTxHash, currentReceipt, currentLoading, currentError])\n\n    return [\n        processBulkTransactions,\n        { data: { txsHash, receipts }, loading, error },\n    ]\n}\n","import { useState, useCallback, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { getWeb3ReactContext } from '@web3-react/core'\nimport { useAppState } from '../contexts/AppState'\nimport { Actions } from '../types/actions'\nimport { toBytes32 } from '../helpers/web3-helpers'\nimport { users as mockUsers, mockTasks } from '../mock-data'\nimport useTransaction from './useTransaction'\nimport useBulkTransactions from './useBulkTransactions'\n\nconst PUBLIC_KEY = process.env.REACT_APP_AMARA_PUBLIC_ADDRESS\nconst GAS_LIMIT = 450000\nconst GAS_PRICE = 2000000000\nconst { RestartContract, RegisterUser, CreateTask } = Actions\n\nconst useAdminActions = () => {\n    const account = PUBLIC_KEY\n    const { library: web3 } = useWeb3React()\n    const { contractAddress, contractABI } = useAppState()\n    const [\n        processBulkTransactions,\n        { data, loading, error },\n    ] = useBulkTransactions()\n\n    const getContractInstance = useCallback((web3, abi) => {\n        // console.log(web3)\n        if (web3) {\n            return new web3.eth.Contract(abi)\n        }\n    }, [])\n\n    const restartPrototype = useCallback(() => {\n        const modelContractInstance = getContractInstance(web3, contractABI)\n\n        const restartContractTxParams = {\n            from: account,\n            to: contractAddress,\n            data: modelContractInstance.methods['restart']().encodeABI(),\n            gas: GAS_LIMIT,\n            gasPrice: GAS_PRICE,\n        }\n\n        const bulkUserRegisterTxParams = mockUsers.map(user => {\n            return {\n                from: account,\n                to: contractAddress,\n                data: modelContractInstance.methods['registerUser'](\n                    toBytes32(user)\n                ).encodeABI(),\n                gas: GAS_LIMIT,\n                gasPrice: GAS_PRICE,\n            }\n        })\n\n        const bulkCreateTaskTxParams = mockTasks.map(task => {\n            return {\n                from: account,\n                to: contractAddress,\n                data: modelContractInstance.methods['createTask'](\n                    toBytes32(task.job_id)\n                ).encodeABI(),\n                gas: GAS_LIMIT,\n                gasPrice: GAS_PRICE,\n            }\n        })\n\n        processBulkTransactions(\n            web3,\n            [\n                restartContractTxParams,\n                ...bulkUserRegisterTxParams,\n                ...bulkCreateTaskTxParams,\n            ],\n            true // Use private key\n        )\n    }, [web3])\n\n    return [restartPrototype, { data, loading, error }]\n}\n\nexport default useAdminActions\n","import React, { useState, useRef, useEffect } from 'react'\nimport clsx from 'clsx'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport {\n    Drawer,\n    AppBar,\n    Toolbar,\n    List,\n    CssBaseline,\n    Typography,\n    Divider,\n    IconButton,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Snackbar,\n    Grid,\n    Slide,\n} from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport ReplayIcon from '@material-ui/icons/Replay'\nimport { Alert } from '@material-ui/lab'\n\nimport MainView from '../components/MainView'\nimport Select from '../components/Select'\nimport TasksTable from '../components/Tables/TasksTable'\nimport UsersTable from '../components/Tables/UsersTable'\nimport TxsTable from '../components/Tables/TxsTable'\nimport { useAppState } from '../contexts/AppState'\nimport useAdminActions from '../hooks/useAdminActions'\nimport { useTasksQueryPolling, useUsersQuery } from '../hooks/useRequests'\nimport models from '../types/models'\n\nconst drawerWidth = 240\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        margin: theme.spacing(5.5, 0),\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    hide: {\n        display: 'none',\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        whiteSpace: 'nowrap',\n    },\n    drawerOpen: {\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        margin: theme.spacing(5.5, 0),\n    },\n    drawerClose: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        overflowX: 'hidden',\n        width: theme.spacing(3.5),\n        // [theme.breakpoints.up('sm')]: {\n        //   width: theme.spacing(9) + 1,\n        // },\n        margin: theme.spacing(5.5, 0),\n        '& div.MuiListItemIcon-root': {\n            marginRight: theme.spacing(0),\n        },\n    },\n    toolbar: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n    },\n    listItem: {\n        '& > div.MuiListItemIcon-root': {\n            marginRight: theme.spacing(1),\n            minWidth: theme.spacing(1.5),\n        },\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n}))\n\nconst SlideLeft = props => <Slide {...props} direction=\"left\" />\n\nconst AdminFCFS = () => {\n    const classes = useStyles()\n    const theme = useTheme()\n    const {\n        modelName,\n        modelDisplayName,\n        setModel,\n        modelContractInstance,\n    } = useAppState()\n    const { tasks } = useTasksQueryPolling()\n    const { users, refetch: refecthUsers } = useUsersQuery()\n    const [\n        restartPrototype,\n        {\n            data: restartPrototypeData,\n            loading: restartPrototypeLoading,\n            error: restartPrototypeError,\n        },\n    ] = useAdminActions()\n    const [open, setOpen] = useState(false)\n    const [openSnackbar, setOpenSnackbar] = useState(false)\n    const [snackbarMsg, setSnackbarMsg] = useState('')\n\n    const modelsOptions = models.map(m => ({\n        value: m.name,\n        label: m.displayName,\n    }))\n\n    useEffect(() => {\n        refecthUsers()\n    }, [restartPrototypeData])\n\n    const handleDrawerOpen = () => {\n        setOpen(true)\n    }\n\n    const handleDrawerClose = () => {\n        setOpen(false)\n    }\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        setOpenSnackbar(false)\n    }\n\n    const handleRestartPrototype = () => {\n        setSnackbarMsg(\"Restarting prototype... Don't close the tab.\")\n        setOpenSnackbar(true)\n        restartPrototype()\n    }\n\n    return (\n        <MainView className={classes.root}>\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open,\n                })}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(classes.menuButton, {\n                            [classes.hide]: open,\n                        })}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        Administration Panel\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                className={clsx(classes.drawer, {\n                    [classes.drawerOpen]: open,\n                    [classes.drawerClose]: !open,\n                })}\n                classes={{\n                    paper: clsx({\n                        [classes.drawerOpen]: open,\n                        [classes.drawerClose]: !open,\n                    }),\n                }}\n            >\n                <div className={classes.toolbar}>\n                    <IconButton onClick={handleDrawerClose}>\n                        {theme.direction === 'rtl' ? (\n                            <ChevronRightIcon />\n                        ) : (\n                            <ChevronLeftIcon />\n                        )}\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>\n                    <ListItem\n                        className={classes.listItem}\n                        button\n                        key=\"RestartPrototype\"\n                    >\n                        <ListItemIcon onClick={handleRestartPrototype}>\n                            <ReplayIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Restart prototype\" />\n                    </ListItem>\n                </List>\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.toolbar} />\n                <Grid container spacing={2}>\n                    <Grid item lg={6}>\n                        <Typography variant=\"h3\">{modelDisplayName}</Typography>\n                    </Grid>\n                    <Grid item lg={6}>\n                        <Grid\n                            container\n                            justify=\"flex-end\"\n                            alignItems=\"center\"\n                            spacing={2}\n                        >\n                            <Grid item>\n                                <Typography variant=\"h6\">\n                                    Change model:\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Select\n                                    name=\"model\"\n                                    label=\"model\"\n                                    value={modelName}\n                                    options={modelsOptions}\n                                    onChange={e => setModel(e.target.value)}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item lg={6}>\n                        <Typography variant=\"h6\">Registered users</Typography>\n                        <UsersTable\n                            users={\n                                users && tasks\n                                    ? users.map(u => {\n                                          let task = tasks.filter(\n                                              t => t.userId === u.id\n                                          )[0]\n                                          return {\n                                              id: u.id,\n                                              hasTask: u.hasTask,\n                                              taskId: task ? task.id : null,\n                                          }\n                                      })\n                                    : null\n                            }\n                        />\n                    </Grid>\n                    <Grid item lg={6}>\n                        <Typography variant=\"h6\">Tasks</Typography>\n                        <TasksTable tasks={tasks} />\n                    </Grid>\n                    <Grid item lg={12}>\n                        <Typography variant=\"h6\">Transactions</Typography>\n                        <TxsTable txs={restartPrototypeData.receipts} />\n                    </Grid>\n                </Grid>\n            </main>\n            <Snackbar\n                open={openSnackbar}\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                TransitionComponent={SlideLeft}\n                transitionDuration={500}\n                autoHideDuration={3000}\n                onClose={handleSnackbarClose}\n                key={'bottomright'}\n            >\n                <Alert severity={'info'}>{snackbarMsg}</Alert>\n            </Snackbar>\n        </MainView>\n    )\n}\n\nexport default AdminFCFS\n","import React from 'react'\nimport { withStyles, makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport IconButton from '@material-ui/core/IconButton'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport Timer from '../Cards/TaskCard/Timer'\n\nconst useStyles = makeStyles(theme => ({\n    table: {\n        minWidth: 650,\n    },\n    timer: {\n        color: theme.palette.primary.main,\n    },\n}))\n\nconst StyledTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.secondary.dark,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell)\n\nconst StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow)\n\nconst JobsTable = ({ jobs }) => {\n    const classes = useStyles()\n\n    return jobs ? (\n        <TableContainer component={Paper}>\n            <Table stickyHeader aria-label=\"Jobs Table\">\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell align=\"center\">\n                            Timer id\n                        </StyledTableCell>\n                        <StyledTableCell align=\"center\">\n                            Task id\n                        </StyledTableCell>\n                        <StyledTableCell align=\"center\">Status</StyledTableCell>\n                        <StyledTableCell align=\"center\">\n                            Timeout\n                        </StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {jobs == null ? (\n                        <StyledTableRow>\n                            <StyledTableCell\n                                componenet=\"th\"\n                                scope=\"row\"\n                                colSpan=\"4\"\n                                align=\"left\"\n                            >\n                                Loading data...\n                            </StyledTableCell>\n                        </StyledTableRow>\n                    ) : !jobs.length ? (\n                        <StyledTableRow>\n                            <StyledTableCell\n                                componenet=\"th\"\n                                scope=\"row\"\n                                colSpan=\"4\"\n                                align=\"center\"\n                            >\n                                No jobs\n                            </StyledTableCell>\n                        </StyledTableRow>\n                    ) : (\n                        jobs.map(job => (\n                            <StyledTableRow key={job.id}>\n                                <StyledTableCell align=\"center\">\n                                    {job.id}\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\">\n                                    {job.taskId}\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\">\n                                    {job.status}\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\">\n                                    <Timer\n                                        end={new Date(job.endDate)}\n                                        className={classes.timer}\n                                    />\n                                </StyledTableCell>\n                            </StyledTableRow>\n                        ))\n                    )}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    ) : (\n        <></>\n    )\n}\n\nexport default JobsTable\n","import React from 'react'\nimport { withStyles, makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport IconButton from '@material-ui/core/IconButton'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport { getTime } from '../../helpers/date-helpers'\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n    lastUpdateCell: {\n        color: '#676767',\n        backgroundColor: '#fff',\n    },\n})\n\nconst StyledTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.secondary.dark,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell)\n\nconst StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow)\n\nconst TasksTable = ({ tasks }) => {\n    const classes = useStyles()\n\n    return tasks ? (\n        <TableContainer component={Paper}>\n            <Table stickyHeader aria-label=\"Tasks Table\">\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell align=\"center\">\n                            Task Id\n                        </StyledTableCell>\n                        <StyledTableCell align=\"center\">Status</StyledTableCell>\n                        <StyledTableCell align=\"center\">\n                            End date\n                        </StyledTableCell>\n                        <StyledTableCell align=\"center\">\n                            Assigned to\n                        </StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {tasks == null ? (\n                        <StyledTableRow>\n                            <StyledTableCell\n                                componenet=\"th\"\n                                scope=\"row\"\n                                colSpan=\"4\"\n                                align=\"left\"\n                            >\n                                Loading data...\n                            </StyledTableCell>\n                        </StyledTableRow>\n                    ) : !tasks.length ? (\n                        <StyledTableRow>\n                            <StyledTableCell\n                                componenet=\"th\"\n                                scope=\"row\"\n                                colSpan=\"4\"\n                                align=\"center\"\n                            >\n                                No tasks\n                            </StyledTableCell>\n                        </StyledTableRow>\n                    ) : (\n                        tasks.map(task => (\n                            <StyledTableRow key={task.id}>\n                                <StyledTableCell\n                                    component=\"th\"\n                                    scope=\"row\"\n                                    align=\"center\"\n                                >\n                                    {task.id}\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\">\n                                    {task.status}\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\">\n                                    {task.endDate\n                                        ? new Date(\n                                              task.endDate\n                                          ).toLocaleTimeString()\n                                        : '--'}\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\">\n                                    {task.userId ? task.userId : '--'}\n                                </StyledTableCell>\n                            </StyledTableRow>\n                        ))\n                    )}\n                    <StyledTableRow key=\"last-update-trow\">\n                        <StyledTableCell className={classes.lastUpdateCell}>\n                            {`Last update ${new Date(\n                                Date.now()\n                            ).toLocaleTimeString()}`}\n                        </StyledTableCell>\n                    </StyledTableRow>\n                </TableBody>\n            </Table>\n        </TableContainer>\n    ) : (\n        <></>\n    )\n}\n\nexport default TasksTable\n","export const TaskStatuses = {\n    NonExistent: Symbol('NON_EXISTENT'),\n    Available: Symbol('AVAILABLE'),\n    Assigned: Symbol('ASSIGNED'),\n    Accepted: Symbol('ACCEPTED'),\n    Rejected: Symbol('REJECTED'),\n    Completed: Symbol('COMPLETED'),\n}\n\nconst symbolMapping = {\n    NonExistent: TaskStatuses.NonExistent,\n    Available: TaskStatuses.Available,\n    Assigned: TaskStatuses.Assigned,\n    Accepted: TaskStatuses.Accepted,\n    Rejected: TaskStatuses.Rejected,\n    Completed: TaskStatuses.Completed,\n}\n\nconst stringMapping = {\n    [TaskStatuses.NonExistent]: 'NonExistent',\n    [TaskStatuses.Available]: 'Available',\n    [TaskStatuses.Assigned]: 'Assigned',\n    [TaskStatuses.Accepted]: 'Accepted',\n    [TaskStatuses.Rejected]: 'Rejected',\n    [TaskStatuses.Completed]: 'Completed',\n}\n\n// Maps to typeInt number from subgraph, useful for queries\nconst intMapping = {\n    [TaskStatuses.NonExistent]: 0,\n    [TaskStatuses.Available]: 1,\n    [TaskStatuses.Assigned]: 2,\n    [TaskStatuses.Accepted]: 3,\n    [TaskStatuses.Rejected]: 4,\n    [TaskStatuses.Completed]: 5,\n}\n\nexport function convertFromString(str) {\n    return symbolMapping[str]\n}\n\nexport function convertToString(symbol) {\n    return stringMapping[symbol]\n}\n\nexport function convertToInt(symbol) {\n    return intMapping[symbol]\n}\n","import { useState, useRef } from 'react'\nimport { useAppState } from '../contexts/AppState'\nimport { hexToAscii, toBytes32, hexToUtf8 } from '../helpers/web3-helpers'\nimport {\n    USER_REGISTERED,\n    USER_DELETED,\n    TASK_CREATED,\n    TASK_ALLOCATED,\n    TASK_ACCEPTED,\n    TASK_REJECTED,\n    TASK_DELETED,\n    REJECTER_DELETED,\n} from '../types/events'\nimport { TaskStatuses, convertToString } from '../types/taskStatusesRR'\nimport { REALLOCATION_TIME } from '../mock-data'\n\nimport useQueuedTransactions from './useQueuedTransactions'\n\nconst useManager = (web3, account, GAS_LIMIT, GAS_PRICE, log) => {\n    const { contractAddress, modelContractInstance } = useAppState()\n    const [running, setRunning] = useState(false)\n    const [queueTransaction, stopQueue, txsRecord] = useQueuedTransactions()\n    const scheduledJobs = useRef(new Map())\n    const handledEvents = useRef(new Map())\n\n    function createJob(web3, txParams, taskId, timeout) {\n        // console.log(\n        //     `%c[createJob] Creating reallocation job for task ${taskId} in ${\n        //         timeout / 1000\n        //     }s`,\n        //     'color: pink'\n        // )\n        return {\n            taskId,\n            timerId: setTimeout(async () => {\n                queueTransaction(web3, txParams, true)\n                // console.log(\n                //     `%c[createJob] Scheduled job for ${taskId} executed.`,\n                //     'color: pink'\n                // )\n            }, timeout),\n            endDate: Date.now() + timeout,\n            tx: {\n                data: {\n                    hash: null,\n                    receipt: null,\n                },\n                loading: false,\n                error: null,\n            },\n        }\n    }\n\n    function userRegisteredHandler(userId) {\n        // if (userId) {\n        //     console.log(`${USER_REGISTERED} event - User ${userId} created`)\n        // } else {\n        //     console.log(`${USER_REGISTERED} event - No params received`)\n        // }\n    }\n\n    function userDeletedHandler(userId) {\n        // if (userId) {\n        //     console.log(`${USER_DELETED} event - User ${userId} deleted`)\n        // } else {\n        //     console.log(`${USER_DELETED} event - No params received`)\n        // }\n    }\n\n    function taskCreatedHandler(taskId) {\n        // if (taskId) {\n        //     console.log(`${TASK_CREATED} event - Task ${taskId} created`)\n        // } else {\n        //     console.log(`${TASK_CREATED} event - No params received`)\n        // }\n    }\n\n    const taskAllocatedHandler = async function (taskId, userId) {\n        if (taskId && userId) {\n            // Get current task end date (s)\n            const { endDate } = await modelContractInstance.methods['getTask'](\n                toBytes32(taskId)\n            ).call()\n\n            const endDateMillis = endDate * 1000\n\n            // console.log(\n            //     `${TASK_ALLOCATED} event - Task ${taskId} has been assigned to ${userId} and will be reassigned on ${new Date(\n            //         endDateMillis\n            //     ).toLocaleTimeString()}, current time is: ${new Date(\n            //         Date.now()\n            //     ).toLocaleTimeString()}`\n            // )\n\n            log(\n                `${TASK_ALLOCATED} event - Task ${taskId} has been assigned to ${userId} and will be reassigned on ${new Date(\n                    endDateMillis\n                ).toLocaleTimeString()}, current time is: ${new Date(\n                    Date.now()\n                ).toLocaleTimeString()}`,\n                'info'\n            )\n\n            let scheduledJob\n            // Check if there is already a scheduled job for the taskId\n            if (scheduledJobs.current.has(taskId)) {\n                scheduledJobs.current.delete(taskId)\n            }\n            const reallocateTaskTxParams = {\n                from: account,\n                to: contractAddress,\n                data: modelContractInstance.methods['reallocateTask'](\n                    toBytes32(taskId)\n                ).encodeABI(),\n                gas: GAS_LIMIT,\n                gasPrice: GAS_PRICE,\n            }\n            scheduledJob = createJob(\n                web3,\n                reallocateTaskTxParams,\n                taskId,\n                endDateMillis - Date.now() // timeout\n            )\n            scheduledJobs.current.set(scheduledJob.taskId, scheduledJob)\n        } else {\n            // console.log(\n            //     `${TASK_ALLOCATED} event - No params received. Task id: ${taskId}, User id: ${userId}`\n            // )\n        }\n    }\n\n    function taskAcceptedHandler(userId, taskId) {\n        if (taskId && userId) {\n            // console.log(\n            //     `${TASK_ACCEPTED} event - Task ${taskId} accepted by user ${userId}`\n            // )\n            log(\n                `${TASK_ACCEPTED} event - Task ${taskId} accepted by user ${userId}`,\n                'info'\n            )\n            if (scheduledJobs.current.has(taskId)) {\n                // Whenever an accepted task event is received the corresponding cronjob\n                // is stopped\n                clearTimeout(scheduledJobs.current.get(taskId).timerId)\n                scheduledJobs.current.delete(taskId)\n            }\n        } else {\n            // console.log(`${TASK_ACCEPTED} event - No params received`)\n        }\n    }\n\n    function taskRejectedHandler(userId, taskId) {\n        if (taskId && userId) {\n            // console.log(\n            //     `${TASK_REJECTED} event - Task ${taskId} rejected by ${userId}`\n            // )\n            if (scheduledJobs.current.has(taskId)) {\n                // Whenever a rejected task event is received the cronjob is stopped\n                clearTimeout(scheduledJobs.current.get(taskId).timerId)\n                scheduledJobs.current.delete(taskId)\n            }\n\n            // The rejected task indicated by taskId is reassigned\n\n            // Prepare tx params\n            const reallocateTaskTxParams = {\n                from: account,\n                to: contractAddress,\n                data: modelContractInstance.methods['reallocateTask'](\n                    toBytes32(taskId)\n                ).encodeABI(),\n                gas: GAS_LIMIT,\n                gasPrice: GAS_PRICE,\n            }\n\n            // Reallocate task now\n            // console.log(\n            //     `%c[manageTasks] Reallocating task ${taskId}`,\n            //     'color: lightgreen'\n            // )\n            queueTransaction(web3, reallocateTaskTxParams, true)\n        } else {\n            // console.log(`${TASK_REJECTED} event - No params received`)\n        }\n    }\n\n    function taskDeletedHandler({ taskId }) {\n        if (taskId) {\n            // console.log(`${TASK_DELETED} event - Task ${taskId} deleted`)\n            if (scheduledJobs.current.has(taskId)) {\n                // Whenever a deleted task event is received the corresponding cronjob\n                // is stopped\n                scheduledJobs.current.delete(taskId)\n            }\n        } else {\n            // console.log(`${TASK_DELETED} event - No params received`)\n        }\n    }\n\n    function rejecterDeletedHandler(userId, taskId) {\n        // console.log(\n        //     `${REJECTER_DELETED} event - Task ${taskId} rejecter ${userId} deleted`\n        // )\n    }\n\n    async function setUpEventListeners() {\n        // console.log('Set up event listeners!')\n\n        modelContractInstance.events[USER_REGISTERED]({}, (error, event) => {\n            if (!handledEvents.current.get(event.id)) {\n                handledEvents.current.set(event.id, true)\n                userRegisteredHandler(hexToUtf8(event.returnValues.userId))\n            }\n        })\n        modelContractInstance.events[USER_DELETED]({}, (error, event) => {\n            if (!handledEvents.current.get(event.id)) {\n                handledEvents.current.set(event.id, true)\n                userDeletedHandler(hexToUtf8(event.returnValues.userId))\n            }\n        })\n        modelContractInstance.events[TASK_CREATED]({}, (error, event) => {\n            if (!handledEvents.current.get(event.id)) {\n                handledEvents.current.set(event.id, true)\n                taskCreatedHandler(hexToUtf8(event.returnValues.taskId))\n            }\n        })\n        modelContractInstance.events[TASK_ALLOCATED](\n            {},\n            async (error, event) => {\n                if (!handledEvents.current.get(event.id)) {\n                    handledEvents.current.set(event.id, true)\n                    const { taskId, userId } = event.returnValues\n                    await taskAllocatedHandler(\n                        hexToUtf8(taskId),\n                        hexToUtf8(userId)\n                    )\n                }\n            }\n        )\n        modelContractInstance.events[TASK_ACCEPTED]({}, (error, event) => {\n            if (!handledEvents.current.get(event.id)) {\n                handledEvents.current.set(event.id, true)\n                taskAcceptedHandler(\n                    hexToUtf8(event.returnValues.userId),\n                    hexToUtf8(event.returnValues.taskId)\n                )\n            }\n        })\n        modelContractInstance.events[TASK_REJECTED]({}, (error, event) => {\n            if (!handledEvents.current.get(event.id)) {\n                handledEvents.current.set(event.id, true)\n                taskRejectedHandler(\n                    hexToUtf8(event.returnValues.userId),\n                    hexToUtf8(event.returnValues.taskId)\n                )\n            }\n        })\n        modelContractInstance.events[TASK_DELETED]({}, (error, event) => {\n            if (!handledEvents.current.get(event.id)) {\n                handledEvents.current.set(event.id, true)\n                taskDeletedHandler(hexToUtf8(event.returnValues.taskId))\n            }\n        })\n        modelContractInstance.events[REJECTER_DELETED]({}, (error, event) => {\n            if (!handledEvents.current.get(event.id)) {\n                handledEvents.current.set(event.id, true)\n                rejecterDeletedHandler(\n                    hexToUtf8(event.returnValues.userId),\n                    hexToUtf8(event.returnValues.taskId)\n                )\n            }\n        })\n\n        // console.log('Events listeners set up')\n\n        // console.log(modelContractInstance)\n    }\n\n    /**\n     * Reallocates timed out tasks and scheduled jobs for upcoming tasks\n     */\n    async function manageTasks(tasks) {\n        // Filter assigned tasks\n        const filteredTasks = tasks.filter(\n            t =>\n                t.status === convertToString(TaskStatuses.Assigned) ||\n                t.status === convertToString(TaskStatuses.Rejected) ||\n                t.status === convertToString(TaskStatuses.Available)\n        )\n        // console.log('%c[manageTasks] Tasks to manage:', 'color: lightgreen')\n        // console.log(filteredTasks)\n\n        if (filteredTasks.length)\n            // Create jobs or reallocate for each one\n            filteredTasks.forEach(task => {\n                const now = new Date()\n                const timestamp = new Date(task.endDate * 1000)\n\n                // console.log(\n                //     `%c[manageTasks] Managing task ${\n                //         task.id\n                //     }, endDate: ${timestamp.toLocaleTimeString()}`,\n                //     'color: lightgreen'\n                // )\n\n                // Prepare tx params\n                const reallocateTaskTxParams = {\n                    from: account,\n                    to: contractAddress,\n                    data: modelContractInstance.methods['reallocateTask'](\n                        toBytes32(task.id)\n                    ).encodeABI(),\n                    gas: GAS_LIMIT,\n                    gasPrice: GAS_PRICE,\n                }\n\n                if (timestamp > now) {\n                    // Create scheduled job\n                    let scheduledJob = createJob(\n                        web3,\n                        reallocateTaskTxParams,\n                        task.id,\n                        timestamp - now\n                    )\n\n                    // Update jobs ref\n                    scheduledJobs.current.set(scheduledJob.taskId, scheduledJob)\n                } else {\n                    // Reallocate task now\n                    // console.log(\n                    //     `%c[manageTasks] Reallocating task ${task.id}`,\n                    //     'color: lightgreen'\n                    // )\n                    queueTransaction(web3, reallocateTaskTxParams, true)\n                }\n            })\n    }\n\n    const start = async tasks => {\n        // console.log('Starting manager...')\n        setRunning(true)\n\n        // console.log('Executing events listener script...')\n        setUpEventListeners()\n\n        // console.log('Managing tasks...')\n        await manageTasks(tasks)\n\n        // console.log('[useManager] modelContractInstnce after manager start:')\n        // console.log(modelContractInstance)\n    }\n\n    const stop = () => {\n        // console.log('Stopping manager...')\n        // Update state\n        setRunning(false)\n\n        // Clear timers and jobs\n        let clearJobs = [...scheduledJobs.current]\n        clearJobs.forEach(([k, v]) => {\n            console.log(v)\n            clearTimeout(v.timerId)\n        })\n        // setScheduledJobs(new Map())\n        scheduledJobs.current = new Map()\n        handledEvents.current = new Map()\n\n        // Clear txs queue\n        stopQueue()\n\n        // Disconnect from contract events\n        // modelContractInstance.clearSubscriptions()\n        web3.eth.clearSubscriptions()\n        // console.log('Stopped')\n    }\n\n    return {\n        start,\n        stop,\n        running,\n        scheduledJobs: scheduledJobs.current,\n        txsRecord,\n    }\n}\n\nexport default useManager\n","import { useState, useEffect, useRef } from 'react'\nimport useTransaction from './useTransaction'\n\nexport default function useQueuedTransactions() {\n    const [txsHash, setTxsHash] = useState([])\n    const [receipts, setReceipts] = useState([])\n    const loading = useRef(false)\n    const [error, setError] = useState([])\n\n    const [providers, setProviders] = useState([])\n    const [usePrivateKeys, setUsePrivateKeys] = useState([])\n    const [txsToProcess, setTxsToProcess] = useState([])\n    const currentTxIndex = useRef(null)\n    const [preparingNextTx, setPreparingNextTx] = useState(false)\n    const lastTxIndex = useRef(0)\n\n    let [\n        processTransaction,\n        {\n            data: { txHash: currentTxHash, receipt: currentReceipt },\n            loading: currentLoading,\n            error: currentError,\n        },\n    ] = useTransaction()\n\n    const queueTransaction = (web3, inputTx, usePrivateKey = false) => {\n        // console.log(\n        //     `%c[queueTransaction] Tx added to queue in position ${\n        //         lastTxIndex.current\n        //     }, ${\n        //         usePrivateKey\n        //             ? 'private key WILL be used'\n        //             : 'private key WONT be used'\n        //     }`,\n        //     'color: orange'\n        // )\n\n        // If its the first time or the queue was completed\n        if (!loading.current) {\n            if (currentTxIndex.current == null) {\n                currentTxIndex.current = 0\n            }\n            // console.log('%c[useQueueTransaction] Bootstraping', 'color: orange')\n            loading.current = true\n            setPreparingNextTx(true)\n            // Bootstrap\n            processTransaction(web3, inputTx, usePrivateKey)\n            currentTxIndex.current++\n        }\n\n        setProviders(providers => [...providers, web3])\n        setTxsToProcess(inputTxs => [...inputTxs, inputTx])\n        setUsePrivateKeys(usePrivateKeys => [...usePrivateKeys, usePrivateKey])\n        lastTxIndex.current++\n    }\n\n    const stop = () => {\n        setTxsHash([])\n        setReceipts([])\n        loading.current = false\n        setError([])\n        currentTxIndex.current = null\n        lastTxIndex.current = 0\n        setProviders([])\n        setTxsToProcess([])\n        setUsePrivateKeys([])\n        setPreparingNextTx(false)\n    }\n\n    useEffect(() => {\n        if (currentError) {\n            console.log(currentError)\n            setError(error => [...error, currentError])\n            return\n        }\n        if (currentLoading && currentTxHash) {\n            // console.log(\n            //     `%c[useQueuedTransactions] Processing tx ${currentTxHash.slice(\n            //         0,\n            //         5\n            //     )}...${currentTxHash.slice(\n            //         currentTxHash.length - 3,\n            //         currentTxHash.length\n            //     )}`,\n            //     'color: orange'\n            // )\n            setTxsHash(txsHash => [...txsHash, currentTxHash])\n            setPreparingNextTx(false)\n            return\n        }\n        if (currentReceipt && !currentLoading && !preparingNextTx) {\n            // console.log(\n            //     `%c[useQueuedTransactions] Tx ${\n            //         currentTxIndex.current //+ 1\n            //     } processed: `,\n            //     'color: orange'\n            // )\n            // console.log(currentReceipt)\n\n            // Update state\n            setReceipts(receipts => [...receipts, currentReceipt])\n            setError(error => [...error, null])\n\n            if (currentTxIndex.current < lastTxIndex.current) {\n                setPreparingNextTx(true)\n                // console.log(\n                //     '%c[useQueueTransaction] Sending next tx...',\n                //     'color: orange'\n                // )\n                processTransaction(\n                    providers[currentTxIndex.current],\n                    txsToProcess[currentTxIndex.current],\n                    usePrivateKeys[currentTxIndex.current]\n                )\n                currentTxIndex.current++\n            } else if (currentTxIndex.current == lastTxIndex.current) {\n                // console.log(\n                //     '%c[useQueueTransaction] Queue finished',\n                //     'color: orange'\n                // )\n                loading.current = false\n            }\n            return\n        }\n    }, [\n        currentTxHash,\n        currentReceipt,\n        currentLoading,\n        currentError,\n        txsToProcess,\n    ])\n\n    return [\n        queueTransaction,\n        stop,\n        { data: { txsHash, receipts }, loading: loading.current, error },\n    ]\n}\n","/**\n * Constants\n */\nexport const USER_REGISTERED = 'UserRegistered'\nexport const USER_DELETED = 'UserDeleted'\nexport const TASK_CREATED = 'TaskCreated'\nexport const TASK_ALLOCATED = 'TaskAllocated'\nexport const TASK_ACCEPTED = 'TaskAccepted'\nexport const TASK_REJECTED = 'TaskRejected'\nexport const TASK_DELETED = 'TaskDeleted'\nexport const REJECTER_DELETED = 'RejecterDeleted'\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppState } from '../contexts/AppState'\nimport { Actions } from '../types/actions'\nimport { toBytes32 } from '../helpers/web3-helpers'\nimport { users as mockUsers, mockTasks, REALLOCATION_TIME } from '../mock-data'\nimport useBulkTransactions from './useBulkTransactions'\nimport useManager from './useManager'\n\nconst PUBLIC_KEY = process.env.REACT_APP_AMARA_PUBLIC_ADDRESS\nconst GAS_LIMIT = 450000 // Reallocation spends around 150 gas\nconst GAS_PRICE = 8000000000 //1 Gwei\nconst { RestartContract, RegisterUser, CreateTask } = Actions\n\nconst MAXIMUM_RETRIES = 5\n\nconst useAdminActions = log => {\n    const account = PUBLIC_KEY\n    const { library: web3 } = useWeb3React()\n    const { contractAddress, modelContractInstance, modelName } = useAppState()\n    const [processBulkTransactions, bulkTxsRecord] = useBulkTransactions()\n    const {\n        start,\n        stop,\n        running,\n        scheduledJobs,\n        txsRecord: managerTxsRecord,\n    } = useManager(web3, account, GAS_LIMIT, GAS_PRICE, log)\n\n    const startManager = tasks => start(tasks)\n\n    const stopManager = () => stop()\n\n    const restartPrototype = useCallback(() => {\n        // console.log('%cRestarting prototype...', 'color: aqua')\n        // console.log(modelName)\n        // console.log(contractAddress)\n\n        const restartContractTxParams = {\n            from: account,\n            to: contractAddress,\n            data: modelContractInstance.methods['restart']().encodeABI(),\n            gas: GAS_LIMIT,\n            gasPrice: GAS_PRICE,\n        }\n\n        const bulkUserRegisterTxParams = mockUsers.map(user => {\n            return {\n                from: account,\n                to: contractAddress,\n                data: modelContractInstance.methods['registerUser'](\n                    toBytes32(user)\n                ).encodeABI(),\n                gas: GAS_LIMIT,\n                gasPrice: GAS_PRICE,\n            }\n        })\n\n        const bulkCreateTaskTxParams = mockTasks.map(task => {\n            return {\n                from: account,\n                to: contractAddress,\n                data: modelContractInstance.methods['createTask'](\n                    toBytes32(task.job_id),\n                    REALLOCATION_TIME\n                ).encodeABI(),\n                gas: GAS_LIMIT,\n                gasPrice: GAS_PRICE,\n            }\n        })\n\n        processBulkTransactions(\n            web3,\n            [\n                restartContractTxParams,\n                ...bulkUserRegisterTxParams,\n                ...bulkCreateTaskTxParams,\n            ],\n            true // Use private key\n        )\n    }, [web3, modelContractInstance, modelName])\n\n    return {\n        startManager,\n        stopManager,\n        managerRunning: running,\n        jobs: scheduledJobs,\n        txsRecord: {\n            data: {\n                txsHash: [\n                    ...managerTxsRecord.data.txsHash,\n                    ...bulkTxsRecord.data.txsHash,\n                ],\n                receipts: [\n                    ...managerTxsRecord.data.receipts,\n                    ...bulkTxsRecord.data.receipts,\n                ],\n            },\n            error: [...managerTxsRecord.error, ...bulkTxsRecord.error],\n        },\n        restartPrototype,\n        restartPrototypeLoading: bulkTxsRecord.loading,\n    }\n}\n\nexport default useAdminActions\n","import React, { useState, useRef, useEffect } from 'react'\nimport clsx from 'clsx'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport {\n    Drawer,\n    AppBar,\n    Toolbar,\n    List,\n    Typography,\n    Divider,\n    IconButton,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Snackbar,\n    Grid,\n} from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\nimport StopIcon from '@material-ui/icons/Stop'\nimport ReplayIcon from '@material-ui/icons/Replay'\nimport LowPriorityIcon from '@material-ui/icons/LowPriority'\nimport Chip from '@material-ui/core/Chip'\nimport CheckCircleRounded from '@material-ui/icons/CheckCircleRounded'\nimport CancelRounded from '@material-ui/icons/CancelRounded'\nimport MuiAlert from '@material-ui/lab/Alert'\n\nimport MainView from '../components/MainView'\nimport JobsTable from '../components/Tables/JobsTable'\nimport TasksTable from '../components/Tables/TasksTableRR'\nimport UsersTable from '../components/Tables/UsersTable'\nimport TxsTable from '../components/Tables/TxsTable'\nimport { useAppState } from '../contexts/AppState'\nimport useAdminActions from '../hooks/useAdminActionsRR'\nimport { useTasksQueryPolling, useUsersQuery } from '../hooks/useRequests'\n\nimport Select from '../components/Select'\nimport models from '../types/models'\nimport { TaskStatuses, convertToString } from '../types/taskStatuses'\nimport { LocalConvenienceStoreOutlined } from '@material-ui/icons'\n\nconst drawerWidth = 240\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        margin: theme.spacing(5.5, 0),\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    hide: {\n        display: 'none',\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        whiteSpace: 'nowrap',\n    },\n    drawerOpen: {\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        margin: theme.spacing(5.5, 0),\n    },\n    drawerClose: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        overflowX: 'hidden',\n        width: theme.spacing(3.5),\n        // [theme.breakpoints.up('sm')]: {\n        //   width: theme.spacing(9) + 1,\n        // },\n        margin: theme.spacing(5.5, 0),\n        '& div.MuiListItemIcon-root': {\n            marginRight: theme.spacing(0),\n        },\n    },\n    toolbar: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n    },\n    listItem: {\n        '& > div.MuiListItemIcon-root': {\n            marginRight: theme.spacing(1),\n            minWidth: theme.spacing(1.5),\n        },\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n}))\n\n// RR and RR+cal share this component\nconst AdminRR = () => {\n    const classes = useStyles()\n    const theme = useTheme()\n    const [open, setOpen] = useState(false)\n    const [openSnackbar, setOpenSnackbar] = useState(false)\n    const [snackbarMsg, setSnackbarMsg] = useState('')\n    const [snackbarSeverity, setSnackbarSeverity] = useState('success')\n    const [snackbarAutoHide, setSnackbarAutoHide] = useState(null)\n    const firstRun = useRef(true)\n\n    const {\n        modelName,\n        modelDisplayName,\n        setModel,\n        modelContractInstance,\n    } = useAppState()\n    const { tasks, refetch: refetchTasks } = useTasksQueryPolling()\n    const { users, refetch: refetchUsers } = useUsersQuery()\n\n    function notifyWithSeverity(msg, severity, autoHide = 30000) {\n        setSnackbarSeverity(severity)\n        setSnackbarMsg(msg)\n        setSnackbarAutoHide(autoHide)\n    }\n\n    const {\n        startManager,\n        stopManager,\n        managerRunning,\n        jobs,\n        txsRecord,\n        restartPrototype,\n        restartPrototypeLoading,\n    } = useAdminActions(notifyWithSeverity)\n\n    const modelsOptions = models.map(m => ({\n        value: m.name,\n        label: m.displayName,\n    }))\n\n    useEffect(() => {\n        if (openSnackbar) {\n            setOpenSnackbar(false)\n        }\n        if (snackbarMsg !== '') {\n            setOpenSnackbar(true)\n        }\n    }, [snackbarMsg])\n\n    useEffect(() => {\n        if (!restartPrototypeLoading && !firstRun.current) {\n            notifyWithSeverity(\n                'Prototype restart successfuly completed',\n                'success'\n            )\n        } else {\n            firstRun.current = false\n        }\n    }, [restartPrototypeLoading])\n\n    useEffect(() => {\n        console.log('Refetching users')\n        refetchUsers()\n    }, [tasks])\n\n    const handleDrawerOpen = () => {\n        setOpen(true)\n    }\n\n    const handleDrawerClose = () => {\n        setOpen(false)\n    }\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        setOpenSnackbar(false)\n    }\n\n    const handleSnackbarExited = () => {\n        setSnackbarMsg('')\n        setOpenSnackbar(false)\n    }\n\n    function notify(msg, autoHide = 5000) {\n        setSnackbarMsg(msg)\n        setSnackbarSeverity('info')\n        setSnackbarAutoHide(autoHide)\n    }\n\n    return (\n        <MainView className={classes.root}>\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open,\n                })}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(classes.menuButton, {\n                            [classes.hide]: open,\n                        })}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        Administration Panel\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                className={clsx(classes.drawer, {\n                    [classes.drawerOpen]: open,\n                    [classes.drawerClose]: !open,\n                })}\n                classes={{\n                    paper: clsx({\n                        [classes.drawerOpen]: open,\n                        [classes.drawerClose]: !open,\n                    }),\n                }}\n            >\n                <div className={classes.toolbar}>\n                    <IconButton onClick={handleDrawerClose}>\n                        {theme.direction === 'rtl' ? (\n                            <ChevronRightIcon />\n                        ) : (\n                            <ChevronLeftIcon />\n                        )}\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>\n                    <ListItem\n                        className={classes.listItem}\n                        button\n                        key=\"StartManager\"\n                        disabled={\n                            !modelContractInstance ||\n                            managerRunning ||\n                            restartPrototypeLoading\n                        }\n                    >\n                        <ListItemIcon\n                            onClick={() => {\n                                notify(\n                                    'Starting manager, this takes some minutes to complete. Please wait...'\n                                )\n                                try {\n                                    startManager(tasks)\n                                    notifyWithSeverity(\n                                        'Manager started successfuly!',\n                                        'success'\n                                    )\n                                } catch (error) {\n                                    notifyWithSeverity(\n                                        'Start manager failed',\n                                        'error'\n                                    )\n                                    console.log(error)\n                                }\n                            }}\n                        >\n                            <PlayArrowIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Start Manager\" />\n                    </ListItem>\n                    <ListItem\n                        className={classes.listItem}\n                        button\n                        key=\"StopManager\"\n                        disabled={!managerRunning || restartPrototypeLoading}\n                    >\n                        <ListItemIcon\n                            onClick={() => {\n                                notify('Stopping manager. Please wait...')\n                                try {\n                                    stopManager()\n                                    notifyWithSeverity(\n                                        'Manager stopped successfuly!',\n                                        'success'\n                                    )\n                                } catch (error) {\n                                    notifyWithSeverity(\n                                        'Stop manager failed',\n                                        'error'\n                                    )\n                                    console.log(error)\n                                }\n                            }}\n                        >\n                            <StopIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Stop Manager\" />\n                    </ListItem>\n                    <ListItem\n                        className={classes.listItem}\n                        button\n                        key=\"RestartContract\"\n                        disabled={\n                            !modelContractInstance ||\n                            managerRunning ||\n                            restartPrototypeLoading\n                        }\n                    >\n                        <ListItemIcon\n                            onClick={() => {\n                                notify(\n                                    'Restarting prototype, this takes some minutes to complete. You can check the state of transactions in the table. Please wait...'\n                                )\n                                try {\n                                    restartPrototype()\n                                } catch (error) {\n                                    notifyWithSeverity(\n                                        'Restart prototype failed',\n                                        'error'\n                                    )\n                                    console.log(error)\n                                }\n                            }}\n                        >\n                            <ReplayIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Restart Contract\" />\n                    </ListItem>\n                </List>\n            </Drawer>\n            <main className={classes.content}>\n                <Grid container spacing={2}>\n                    <Grid item lg={6}>\n                        <Typography variant=\"h3\">{modelDisplayName}</Typography>\n                    </Grid>\n                    <Grid item lg={6}>\n                        <Grid\n                            container\n                            justify=\"flex-end\"\n                            alignItems=\"center\"\n                            spacing={2}\n                        >\n                            <Grid item>\n                                <Typography variant=\"h6\">\n                                    Change model:\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Select\n                                    name=\"model\"\n                                    label=\"model\"\n                                    value={modelName}\n                                    options={modelsOptions}\n                                    onChange={e => setModel(e.target.value)}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item lg={6}>\n                        <Grid container justify=\"space-between\" spacing={2}>\n                            <Grid item>\n                                <Typography variant=\"h6\">Manager </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Chip\n                                    icon={\n                                        managerRunning ? (\n                                            <CheckCircleRounded />\n                                        ) : (\n                                            <CancelRounded />\n                                        )\n                                    }\n                                    label={managerRunning ? 'On' : 'Off'}\n                                    color={\n                                        managerRunning ? 'primary' : 'secondary'\n                                    }\n                                    style={{ marginBottom: '1rem' }}\n                                />\n                            </Grid>\n                        </Grid>\n                        <JobsTable\n                            jobs={[...jobs].map(([k, v]) => {\n                                return {\n                                    id: v.timerId,\n                                    taskId: v.taskId,\n                                    endDate: v.endDate,\n                                    status:\n                                        v.endDate > Date.now()\n                                            ? 'waiting'\n                                            : 'timed out',\n                                }\n                            })}\n                        />\n                    </Grid>\n                    <Grid item lg={6} />\n                    <Grid item lg={6}>\n                        <Typography variant=\"h6\">Registered users</Typography>\n                        <UsersTable\n                            users={\n                                users && tasks\n                                    ? users.map(u => {\n                                          let taskId = tasks.filter(\n                                              t =>\n                                                  t.assignee &&\n                                                  t.assignee.id === u.id &&\n                                                  t.status ===\n                                                      convertToString(\n                                                          TaskStatuses.Accepted\n                                                      )\n                                          )\n                                          return {\n                                              id: u.id,\n                                              hasTask: !u.available,\n                                              taskId: taskId[0]\n                                                  ? taskId[0].id\n                                                  : null,\n                                          }\n                                      })\n                                    : null\n                            }\n                        />\n                    </Grid>\n                    <Grid item lg={6}>\n                        <Typography variant=\"h6\">Tasks</Typography>\n                        <TasksTable\n                            tasks={\n                                tasks\n                                    ? tasks.map(t => {\n                                          return {\n                                              id: t.id,\n                                              status: t.status,\n                                              userId: t.assignee\n                                                  ? t.assignee.id\n                                                  : null,\n                                              endDate: t.endDate * 1000,\n                                          }\n                                      })\n                                    : null\n                            }\n                        />\n                    </Grid>\n                    <Grid item lg={12}>\n                        <Typography variant=\"h6\">Transactions</Typography>\n                        <TxsTable\n                            txs={txsRecord.data ? txsRecord.data.receipts : {}}\n                        />\n                    </Grid>\n                </Grid>\n                {/* <Typography variant=\"h6\">Allocated Tasks</Typography>\n                <TasksTable refreshTable={newData.current} /> */}\n            </main>\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                }}\n                open={openSnackbar}\n                onClose={handleSnackbarClose}\n                onExited={handleSnackbarExited}\n                autoHideDuration={snackbarAutoHide}\n                style={{ maxWidth: '30rem' }}\n            >\n                <Alert\n                    onClose={handleSnackbarClose}\n                    severity={snackbarSeverity}\n                >\n                    {snackbarMsg}\n                </Alert>\n            </Snackbar>\n        </MainView>\n    )\n}\n\nexport default AdminRR\n","import React from 'react'\nimport clsx from 'clsx'\nimport { Box, Container } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport Footer from './Footer'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        backgroundColor: theme.palette.background.green,\n        color: '#fff',\n    },\n    mainContainer: {\n        border: 'none',\n    },\n}))\n\nconst ConfigView = ({ className, children }) => {\n    const { root, mainContainer } = useStyles()\n\n    return (\n        <div className={root}>\n            <Container maxWidth=\"xl\">\n                <Box className={clsx(className, mainContainer)}>{children}</Box>\n            </Container>\n            <Footer />\n        </div>\n    )\n}\n\nexport default ConfigView\n","import React, { useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { generateUrl } from '../helpers/route-helpers'\n\nimport { Grid, Typography, Snackbar, Slide, Button } from '@material-ui/core'\nimport { Alert } from '@material-ui/lab'\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport FileCopyIcon from '@material-ui/icons/FileCopy'\n\nimport ConfigView from '../components/ConfigView'\nimport { useAppState } from '../contexts/AppState'\nimport Select from '../components/Select'\nimport { useUsersQuery } from '../hooks/useRequests'\nimport models from '../types/models'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: 'calc(100vh - 100px)',\n        '& h2': {\n            marginBottom: theme.spacing(4),\n        },\n    },\n    select: {\n        '& label, span, div, svg': {\n            color: '#fff',\n        },\n    },\n    button: {\n        color: '#fff',\n    },\n}))\n\nconst SlideLeft = props => <Slide {...props} direction=\"left\" />\n\nconst Config = () => {\n    const { root, select, button } = useStyles()\n    const history = useHistory()\n    const { users } = useUsersQuery()\n    const [selectedUser, setSelectedUser] = useState('')\n    const [usersOptions, setUsersOptions] = useState()\n    const [selectedModel, setSelectedModel] = useState('')\n    const [openSnackbar, setOpenSnackbar] = useState(false)\n    const snackbarMsg = 'Custom link copied to clipboard!'\n    const baseUri = '/home/'\n\n    const modelsOptions = models.map(m => ({\n        value: m.name,\n        label: m.displayName,\n    }))\n\n    const handleCopyButton = () => {\n        let generatedUrl = generateUrl(window.location.origin + baseUri, [\n            { key: 'userId', value: selectedUser },\n            { key: 'model', value: selectedModel },\n        ])\n        navigator.clipboard.writeText(generatedUrl)\n        setOpenSnackbar(true)\n    }\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        setOpenSnackbar(false)\n    }\n\n    useEffect(() => {\n        if (users) {\n            setUsersOptions(users.map(u => ({ value: u.id, label: u.id })))\n            setSelectedUser(users[0].id)\n        }\n    }, [users])\n\n    useEffect(() => {\n        if (models) {\n            setSelectedModel(models[0].name)\n        }\n    }, [models])\n\n    return (\n        <ConfigView>\n            <Grid\n                container\n                justify=\"flex-start\"\n                alignContent=\"center\"\n                alignItems=\"center\"\n                spacing={2}\n                className={root}\n            >\n                <Grid item lg={12}>\n                    <Typography variant=\"h2\">\n                        Welcome to the task allocation prototype!\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        Let's{' '}\n                        <b>\n                            <u>configure</u>\n                        </b>{' '}\n                        what model you want to test and choose a user:\n                    </Typography>\n                </Grid>\n                <Grid item lg={12}>\n                    <Grid container spacing={4}>\n                        {modelsOptions ? (\n                            <Grid item>\n                                <Grid container alignItems=\"center\" spacing={2}>\n                                    <Grid item>\n                                        <Typography variant=\"h6\">\n                                            Model\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item>\n                                        <Select\n                                            name=\"model\"\n                                            label=\"model\"\n                                            value={selectedModel}\n                                            options={modelsOptions}\n                                            className={select}\n                                            onChange={e =>\n                                                setSelectedModel(e.target.value)\n                                            }\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        ) : null}\n                        {usersOptions ? (\n                            <Grid item>\n                                <Grid container alignItems=\"center\" spacing={2}>\n                                    <Grid item>\n                                        <Typography variant=\"h6\">\n                                            User\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item>\n                                        <Select\n                                            name=\"user\"\n                                            label=\"User\"\n                                            value={selectedUser}\n                                            options={usersOptions}\n                                            className={select}\n                                            onChange={e =>\n                                                setSelectedUser(e.target.value)\n                                            }\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        ) : null}\n                    </Grid>\n                </Grid>\n                <Grid item lg={12}>\n                    <Grid container spacing={1}>\n                        <Grid item>\n                            <Button\n                                variant=\"outlined\"\n                                className={button}\n                                onClick={handleCopyButton}\n                            >\n                                <FileCopyIcon /> Copy link\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                variant=\"outlined\"\n                                className={button}\n                                onClick={() =>\n                                    history.push(\n                                        generateUrl(baseUri, [\n                                            {\n                                                key: 'userId',\n                                                value: selectedUser,\n                                            },\n                                            {\n                                                key: 'model',\n                                                value: selectedModel,\n                                            },\n                                        ])\n                                    )\n                                }\n                            >\n                                Access\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Snackbar\n                open={openSnackbar}\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                TransitionComponent={SlideLeft}\n                transitionDuration={500}\n                autoHideDuration={3000}\n                onClose={handleSnackbarClose}\n                key={'bottomright'}\n            >\n                <Alert severity={'info'}>{snackbarMsg}</Alert>\n            </Snackbar>\n        </ConfigView>\n    )\n}\n\nexport default Config\n","import React from 'react'\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport HomeFCFS from './pages/HomeFCFS'\nimport HomeRR from './pages/HomeRR'\nimport HomeRRCal from './pages/HomeRRCal'\nimport AdminFCFS from './pages/AdminFCFS'\nimport AdminRR from './pages/AdminRR'\nimport Config from './pages/Config'\nimport { useAppState } from './contexts/AppState'\nimport models from './types/models'\n\nfunction Routes() {\n    const { modelName } = useAppState()\n\n    let homeComponent, adminComponent\n\n    switch (modelName) {\n        // FCFS\n        case models[0].name:\n            homeComponent = HomeFCFS\n            adminComponent = AdminFCFS\n            break\n\n        // RR\n        case models[1].name:\n            homeComponent = HomeRR\n            adminComponent = AdminRR\n            break\n\n        // RR + cal\n        case models[2].name:\n            homeComponent = HomeRRCal\n            adminComponent = AdminRR\n            break\n\n        // Default FCFS\n        default:\n            homeComponent = HomeFCFS\n            break\n    }\n\n    return (\n        <Switch>\n            <Redirect exact from=\"/\" to=\"/config\"></Redirect>\n            <Route path=\"/config\" component={Config} />\n            <Route path=\"/home\" component={homeComponent} />\n            {/* Add admin provider */}\n            <Route path=\"/admin\" component={adminComponent} />\n        </Switch>\n    )\n}\n\nexport default Routes\n","import React, { Suspense } from 'react'\nimport { HashRouter } from 'react-router-dom'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Web3 from 'web3'\nimport { Web3ReactProvider, createWeb3ReactRoot } from '@web3-react/core'\nimport theme from './theme'\n\nimport { ConnectProvider as Connect } from './contexts/Connect'\nimport { BackendProvider as Backend } from './contexts/BackendProvider'\nimport { AppStateProvider } from './contexts/AppState'\nimport Routes from './Routes'\n\nfunction getLibrary(provider) {\n    return new Web3(provider)\n}\n\n// const AdminWeb3ReactProvider = createWeb3ReactRoot('adminProvider')\n\nfunction App() {\n    return (\n        <Suspense fallback=\"loading\">\n            <Web3ReactProvider getLibrary={getLibrary}>\n                <Connect>\n                    <AppStateProvider>\n                        {/* <AdminWeb3ReactProvider getLibrary={getLibrary}>\n                            <Connect networkOnlyConnector> */}\n                        <Backend>\n                            <ThemeProvider theme={theme}>\n                                <CssBaseline />\n                                <HashRouter>\n                                    <Routes />\n                                </HashRouter>\n                            </ThemeProvider>\n                        </Backend>\n                        {/* </Connect>\n                        </AdminWeb3ReactProvider> */}\n                    </AppStateProvider>\n                </Connect>\n            </Web3ReactProvider>\n        </Suspense>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}